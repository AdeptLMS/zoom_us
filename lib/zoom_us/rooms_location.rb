=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module ZoomUs
  class RoomsLocation
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a Location
    # Add a location to the [location hierarchial structure(s)](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) of Zoom Rooms in an account.  **Prerequisites:** * Account owner or admin permissions. * Zoom Rooms Version 4.0 or higher<br><br> **Scopes:** `room:write:admin`<br>
    # @param [Hash] opts the optional parameters
    # @option opts [Body56] :body
    # @return [InlineResponse20077]
    def add_azr_location(opts = {})
      data, _status_code, _headers = add_azr_location_with_http_info(opts)
      data
    end

    # Add a Location
    # Add a location to the [location hierarchial structure(s)](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) of Zoom Rooms in an account.  **Prerequisites:** * Account owner or admin permissions. * Zoom Rooms Version 4.0 or higher&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;room:write:admin&#x60;&lt;br&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Body56] :body
    # @return [Array<(InlineResponse20077, Fixnum, Hash)>] InlineResponse20077 data, response status code and response headers
    def add_azr_location_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsLocationApi.add_azr_location ...'
      end
      # resource path
      local_var_path = '/rooms/locations'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20077')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsLocationApi#add_azr_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Change the Assigned Parent Location
    # An account owner of a Zoom account can establish a [Zoom Rooms Location Hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) to better organize Zoom Rooms spread accross various location. The location can be structured in a hierarchy with Country being the top-level location, followed by city, campus, building, and floor. The location in the lower level in the hierarchy is considered as a child of the location that is a level above in the hierarchy. Use this API to change the parent location of a child location. <br><br> For instance, if the location hierarchy is structured in a way where there are two campuses (Campus 1, and Campus 2) in a City and Campus 1 consists of a building named Building 1 with a floor where Zoom Rooms are located, and you would like to rearrange the structure so that Building 1 along with its child locations (floor and Zoom Rooms) are relocated directly under Campus 2 instead of Campus 1, you must provide the location ID of Building 1 in the path parameter of this request and the location ID of Campus 2 as the value of `parent_location_id` in the  request body.<br><br> **Prerequisite:**<br> * Account owner or admin permission * Zoom Rooms version 4.0 or higher<br> **Scopes:** `room:write:admin`<br><br> /n
    # @param location_id
    # @param [Hash] opts the optional parameters
    # @option opts [Body65] :body
    # @return [Object]
    def change_parent_location(location_id, opts = {})
      data, _status_code, _headers = change_parent_location_with_http_info(location_id, opts)
      data
    end

    # Change the Assigned Parent Location
    # An account owner of a Zoom account can establish a [Zoom Rooms Location Hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) to better organize Zoom Rooms spread accross various location. The location can be structured in a hierarchy with Country being the top-level location, followed by city, campus, building, and floor. The location in the lower level in the hierarchy is considered as a child of the location that is a level above in the hierarchy. Use this API to change the parent location of a child location. &lt;br&gt;&lt;br&gt; For instance, if the location hierarchy is structured in a way where there are two campuses (Campus 1, and Campus 2) in a City and Campus 1 consists of a building named Building 1 with a floor where Zoom Rooms are located, and you would like to rearrange the structure so that Building 1 along with its child locations (floor and Zoom Rooms) are relocated directly under Campus 2 instead of Campus 1, you must provide the location ID of Building 1 in the path parameter of this request and the location ID of Campus 2 as the value of &#x60;parent_location_id&#x60; in the  request body.&lt;br&gt;&lt;br&gt; **Prerequisite:**&lt;br&gt; * Account owner or admin permission * Zoom Rooms version 4.0 or higher&lt;br&gt; **Scopes:** &#x60;room:write:admin&#x60;&lt;br&gt;&lt;br&gt; /n
    # @param location_id
    # @param [Hash] opts the optional parameters
    # @option opts [Body65] :body
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def change_parent_location_with_http_info(location_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsLocationApi.change_parent_location ...'
      end
      # verify the required parameter 'location_id' is set
      if @api_client.config.client_side_validation && location_id.nil?
        fail ArgumentError, "Missing the required parameter 'location_id' when calling RoomsLocationApi.change_parent_location"
      end
      # resource path
      local_var_path = '/rooms/locations/{locationId}/location'.sub('{' + 'locationId' + '}', location_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsLocationApi#change_parent_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Zoom Room Location Profile
    # Each location type of the [Zoom Rooms location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) has a profile page that includes information such as name of the location, address, support email, etc. Use this API to retrieve information about a specific Zoom Rooms location type such as information about the city where the Zoom Rooms is located.  **Prerequisite:**<br> * Account owner or admin permission * Zoom Rooms version 4.0 or higher<br> **Scopes:** `room:read:admin`<br>
    # @param location_id Unique identifier of the location type. This can be retrieved using the [List Zoom Room Location API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) (Id property in the response).
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20078]
    def get_zr_location_profile(location_id, opts = {})
      data, _status_code, _headers = get_zr_location_profile_with_http_info(location_id, opts)
      data
    end

    # Get Zoom Room Location Profile
    # Each location type of the [Zoom Rooms location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) has a profile page that includes information such as name of the location, address, support email, etc. Use this API to retrieve information about a specific Zoom Rooms location type such as information about the city where the Zoom Rooms is located.  **Prerequisite:**&lt;br&gt; * Account owner or admin permission * Zoom Rooms version 4.0 or higher&lt;br&gt; **Scopes:** &#x60;room:read:admin&#x60;&lt;br&gt;
    # @param location_id Unique identifier of the location type. This can be retrieved using the [List Zoom Room Location API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) (Id property in the response).
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20078, Fixnum, Hash)>] InlineResponse20078 data, response status code and response headers
    def get_zr_location_profile_with_http_info(location_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsLocationApi.get_zr_location_profile ...'
      end
      # verify the required parameter 'location_id' is set
      if @api_client.config.client_side_validation && location_id.nil?
        fail ArgumentError, "Missing the required parameter 'location_id' when calling RoomsLocationApi.get_zr_location_profile"
      end
      # resource path
      local_var_path = '/rooms/locations/{locationId}'.sub('{' + 'locationId' + '}', location_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20078')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsLocationApi#get_zr_location_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Location Settings
    # Get information on meeting or alert settings applied to Zoom Rooms located in a specific location. By default, only **Meeting Settings** are returned. To view only **Alert Settings**, specify `alert` as the value of the `setting_type` query parameter.<br><br> **Prerequisites:**<br> * Zoom Room licenses * Owner or Admin privileges on the Zoom Account.<br> **Scopes:** `room:read:admin`<br>
    # @param setting_type The type of setting that you would like to retrieve.&lt;br&gt; &#x60;alert&#x60;: Alert Settings applied on the Zoom Rooms Account.&lt;br&gt; &#x60;meeting&#x60;: Meeting settings of the Zoom Rooms Account.
    # @param location_id Unique identifier of the location type. This can be retrieved using the [List Zoom Room Location API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) (Id property in the response).
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_zr_location_settings(setting_type, location_id, opts = {})
      data, _status_code, _headers = get_zr_location_settings_with_http_info(setting_type, location_id, opts)
      data
    end

    # Get Location Settings
    # Get information on meeting or alert settings applied to Zoom Rooms located in a specific location. By default, only **Meeting Settings** are returned. To view only **Alert Settings**, specify &#x60;alert&#x60; as the value of the &#x60;setting_type&#x60; query parameter.&lt;br&gt;&lt;br&gt; **Prerequisites:**&lt;br&gt; * Zoom Room licenses * Owner or Admin privileges on the Zoom Account.&lt;br&gt; **Scopes:** &#x60;room:read:admin&#x60;&lt;br&gt;
    # @param setting_type The type of setting that you would like to retrieve.&lt;br&gt; &#x60;alert&#x60;: Alert Settings applied on the Zoom Rooms Account.&lt;br&gt; &#x60;meeting&#x60;: Meeting settings of the Zoom Rooms Account.
    # @param location_id Unique identifier of the location type. This can be retrieved using the [List Zoom Room Location API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) (Id property in the response).
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_zr_location_settings_with_http_info(setting_type, location_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsLocationApi.get_zr_location_settings ...'
      end
      # verify the required parameter 'setting_type' is set
      if @api_client.config.client_side_validation && setting_type.nil?
        fail ArgumentError, "Missing the required parameter 'setting_type' when calling RoomsLocationApi.get_zr_location_settings"
      end
      # verify the required parameter 'location_id' is set
      if @api_client.config.client_side_validation && location_id.nil?
        fail ArgumentError, "Missing the required parameter 'location_id' when calling RoomsLocationApi.get_zr_location_settings"
      end
      # resource path
      local_var_path = '/rooms/locations/{locationId}/settings'.sub('{' + 'locationId' + '}', location_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'setting_type'] = setting_type

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsLocationApi#get_zr_location_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Zoom Room Location Structure
    # Get the [location hierarchial structure(s)](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) applied on the Zoom Rooms in an account.<br><br> **Prerequisites:**<br> * Zoom Rooms version 4.0 or higher * Account owner or admin permissions<br> **Scopes:** `room:read:admin`<br>
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20079]
    def get_zr_location_structure(opts = {})
      data, _status_code, _headers = get_zr_location_structure_with_http_info(opts)
      data
    end

    # Get Zoom Room Location Structure
    # Get the [location hierarchial structure(s)](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) applied on the Zoom Rooms in an account.&lt;br&gt;&lt;br&gt; **Prerequisites:**&lt;br&gt; * Zoom Rooms version 4.0 or higher * Account owner or admin permissions&lt;br&gt; **Scopes:** &#x60;room:read:admin&#x60;&lt;br&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20079, Fixnum, Hash)>] InlineResponse20079 data, response status code and response headers
    def get_zr_location_structure_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsLocationApi.get_zr_location_structure ...'
      end
      # resource path
      local_var_path = '/rooms/locations/structure'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20079')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsLocationApi#get_zr_location_structure\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Zoom Room Locations
    # A Zoom account owner or a Zoom Room administrator can establish a [location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) to help manage Zoom Rooms that are spread among a variety of locations. Use this API to list the different location types used for Zoom Rooms in an account.<br><br> **Prerequisites:** * Account owner or admin permissions. * Zoom Rooms Version 4.0 or higher<br><br> **Scopes:** `room:read:admin`<br>
    # @param [Hash] opts the optional parameters
    # @option opts [String] :parent_location_id A unique identifier for the parent location. For instance, if a Zoom Room is located in Floor 1 of Building A, the location of Building A will be the parent location of Floor 1. Use this parameter to filter the response by a specific location hierarchy level.
    # @option opts [String] :type Use this field to filter the response by the type of location. The value can be one of the following: &#x60;country&#x60;, &#x60;states&#x60;, &#x60;city&#x60;, &#x60;campus&#x60;, &#x60;building&#x60;, &#x60;floor&#x60;.
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [InlineResponse20076]
    def list_zr_locations(opts = {})
      data, _status_code, _headers = list_zr_locations_with_http_info(opts)
      data
    end

    # List Zoom Room Locations
    # A Zoom account owner or a Zoom Room administrator can establish a [location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) to help manage Zoom Rooms that are spread among a variety of locations. Use this API to list the different location types used for Zoom Rooms in an account.&lt;br&gt;&lt;br&gt; **Prerequisites:** * Account owner or admin permissions. * Zoom Rooms Version 4.0 or higher&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;room:read:admin&#x60;&lt;br&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :parent_location_id A unique identifier for the parent location. For instance, if a Zoom Room is located in Floor 1 of Building A, the location of Building A will be the parent location of Floor 1. Use this parameter to filter the response by a specific location hierarchy level.
    # @option opts [String] :type Use this field to filter the response by the type of location. The value can be one of the following: &#x60;country&#x60;, &#x60;states&#x60;, &#x60;city&#x60;, &#x60;campus&#x60;, &#x60;building&#x60;, &#x60;floor&#x60;.
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [Array<(InlineResponse20076, Fixnum, Hash)>] InlineResponse20076 data, response status code and response headers
    def list_zr_locations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsLocationApi.list_zr_locations ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RoomsLocationApi.list_zr_locations, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/rooms/locations'

      # query parameters
      query_params = {}
      query_params[:'parent_location_id'] = opts[:'parent_location_id'] if !opts[:'parent_location_id'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20076')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsLocationApi#list_zr_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Zoom Rooms Location Structure
    # Update the [location hierarchial structure(s)](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) applied on the Zoom Rooms in an account.<br><br> **Prerequisites:**<br> * Zoom Rooms version 4.0 or higher * Account owner or admin permissions<br> **Scopes:** `room:write:admin`<br>
    # @param [Hash] opts the optional parameters
    # @option opts [Body58] :body
    # @return [Object]
    def update_zoom_rooms_location_structure(opts = {})
      data, _status_code, _headers = update_zoom_rooms_location_structure_with_http_info(opts)
      data
    end

    # Update Zoom Rooms Location Structure
    # Update the [location hierarchial structure(s)](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) applied on the Zoom Rooms in an account.&lt;br&gt;&lt;br&gt; **Prerequisites:**&lt;br&gt; * Zoom Rooms version 4.0 or higher * Account owner or admin permissions&lt;br&gt; **Scopes:** &#x60;room:write:admin&#x60;&lt;br&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Body58] :body
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def update_zoom_rooms_location_structure_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsLocationApi.update_zoom_rooms_location_structure ...'
      end
      # resource path
      local_var_path = '/rooms/locations/structure'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsLocationApi#update_zoom_rooms_location_structure\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Zoom Room Location Profile
    # Each location type of the [Zoom Rooms location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) has a profile page that includes information such as name of the location, address, support email, etc. Use this API to update information about a specific Zoom Rooms location type such as information about the city where the Zoom Rooms is located.  **Prerequisite:**<br> * Account owner or admin permission * Zoom Rooms version 4.0 or higher<br> **Scopes:** `room:write:admin`<br>
    # @param location_id Unique Identifier of the location. This can be retrieved from the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.
    # @param [Hash] opts the optional parameters
    # @option opts [Body57] :body
    # @return [Object]
    def update_zr_location_profile(location_id, opts = {})
      data, _status_code, _headers = update_zr_location_profile_with_http_info(location_id, opts)
      data
    end

    # Update Zoom Room Location Profile
    # Each location type of the [Zoom Rooms location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) has a profile page that includes information such as name of the location, address, support email, etc. Use this API to update information about a specific Zoom Rooms location type such as information about the city where the Zoom Rooms is located.  **Prerequisite:**&lt;br&gt; * Account owner or admin permission * Zoom Rooms version 4.0 or higher&lt;br&gt; **Scopes:** &#x60;room:write:admin&#x60;&lt;br&gt;
    # @param location_id Unique Identifier of the location. This can be retrieved from the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.
    # @param [Hash] opts the optional parameters
    # @option opts [Body57] :body
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def update_zr_location_profile_with_http_info(location_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsLocationApi.update_zr_location_profile ...'
      end
      # verify the required parameter 'location_id' is set
      if @api_client.config.client_side_validation && location_id.nil?
        fail ArgumentError, "Missing the required parameter 'location_id' when calling RoomsLocationApi.update_zr_location_profile"
      end
      # resource path
      local_var_path = '/rooms/locations/{locationId}'.sub('{' + 'locationId' + '}', location_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsLocationApi#update_zr_location_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Location Settings
    # Update information on either meeting or alert settings applied to Zoom Rooms located in a specific location. To update **Alert Settings**, specify `alert` as the value of the `setting_type` query parameter. Similarly, to update **Meeting Settings**, specify `meeting` as the value of the `setting_type` query parameter.<br><br> **Prerequisites:**<br> * Zoom Room licenses * Owner or Admin privileges on the Zoom Account.<br> **Scopes:** `room:write:admin`<br>
    # @param setting_type The type of setting that you would like to update.&lt;br&gt; &#x60;alert&#x60;: Alert Settings applied on the Zoom Rooms Account.&lt;br&gt; &#x60;meeting&#x60;: Meeting settings of the Zoom Rooms Account.
    # @param location_id Unique identifier of the location type. This can be retrieved using the [List Zoom Room Location API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) (Id property in the response).
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body
    # @return [Object]
    def update_zr_location_settings(setting_type, location_id, opts = {})
      data, _status_code, _headers = update_zr_location_settings_with_http_info(setting_type, location_id, opts)
      data
    end

    # Update Location Settings
    # Update information on either meeting or alert settings applied to Zoom Rooms located in a specific location. To update **Alert Settings**, specify &#x60;alert&#x60; as the value of the &#x60;setting_type&#x60; query parameter. Similarly, to update **Meeting Settings**, specify &#x60;meeting&#x60; as the value of the &#x60;setting_type&#x60; query parameter.&lt;br&gt;&lt;br&gt; **Prerequisites:**&lt;br&gt; * Zoom Room licenses * Owner or Admin privileges on the Zoom Account.&lt;br&gt; **Scopes:** &#x60;room:write:admin&#x60;&lt;br&gt;
    # @param setting_type The type of setting that you would like to update.&lt;br&gt; &#x60;alert&#x60;: Alert Settings applied on the Zoom Rooms Account.&lt;br&gt; &#x60;meeting&#x60;: Meeting settings of the Zoom Rooms Account.
    # @param location_id Unique identifier of the location type. This can be retrieved using the [List Zoom Room Location API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) (Id property in the response).
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def update_zr_location_settings_with_http_info(setting_type, location_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsLocationApi.update_zr_location_settings ...'
      end
      # verify the required parameter 'setting_type' is set
      if @api_client.config.client_side_validation && setting_type.nil?
        fail ArgumentError, "Missing the required parameter 'setting_type' when calling RoomsLocationApi.update_zr_location_settings"
      end
      # verify the required parameter 'location_id' is set
      if @api_client.config.client_side_validation && location_id.nil?
        fail ArgumentError, "Missing the required parameter 'location_id' when calling RoomsLocationApi.update_zr_location_settings"
      end
      # resource path
      local_var_path = '/rooms/locations/{locationId}/settings'.sub('{' + 'locationId' + '}', location_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'setting_type'] = setting_type

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsLocationApi#update_zr_location_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
