=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module ZoomUs
  class Accounts
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a Sub Account
    # Get a Sub Account under the Master Account. <aside>Your account must be a Master Account in order to retrieve Sub Accounts. Zoom only assigns this privilege to trusted partners.</aside><br><br> **Prerequisites:** * Pro or a higher paid account with Master Account option enabled. <br> **Scope**: `account:write:admin`<br>
    # @param account_id The account ID.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20012]
    def account(account_id, opts = {})
      data, _status_code, _headers = account_with_http_info(account_id, opts)
      data
    end

    # Get a Sub Account
    # Get a Sub Account under the Master Account. &lt;aside&gt;Your account must be a Master Account in order to retrieve Sub Accounts. Zoom only assigns this privilege to trusted partners.&lt;/aside&gt;&lt;br&gt;&lt;br&gt; **Prerequisites:** * Pro or a higher paid account with Master Account option enabled. &lt;br&gt; **Scope**: &#x60;account:write:admin&#x60;&lt;br&gt;
    # @param account_id The account ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20012, Fixnum, Hash)>] InlineResponse20012 data, response status code and response headers
    def account_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.account"
      end
      # resource path
      local_var_path = '/accounts/{accountId}'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20012')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Sub Account
    # Create a Sub Account under the Master Account. <aside>Your account must be a Master Account in order to create Sub Accounts. Zoom only assigns this privilege to trusted partners. Please note: the created user will receive a confirmation email.</aside><br><br> **Prerequisites:**<br> * Pro or a higher paid account with Master Account option enabled. <br> **Scope**: `account:write:admin`<br>
    # @param body Account.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2015]
    def account_create(body, opts = {})
      data, _status_code, _headers = account_create_with_http_info(body, opts)
      data
    end

    # Create a Sub Account
    # Create a Sub Account under the Master Account. &lt;aside&gt;Your account must be a Master Account in order to create Sub Accounts. Zoom only assigns this privilege to trusted partners. Please note: the created user will receive a confirmation email.&lt;/aside&gt;&lt;br&gt;&lt;br&gt; **Prerequisites:**&lt;br&gt; * Pro or a higher paid account with Master Account option enabled. &lt;br&gt; **Scope**: &#x60;account:write:admin&#x60;&lt;br&gt;
    # @param body Account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2015, Fixnum, Hash)>] InlineResponse2015 data, response status code and response headers
    def account_create_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.account_create ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AccountsApi.account_create"
      end
      # resource path
      local_var_path = '/accounts'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2015')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#account_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Disassociate a Sub Account
    # Disassociate a Sub Account from the Master Account. This will leave the Sub Account intact but it will no longer be associated with the master account.<br>  <aside>Your account must be a Master Account in order to disassociate Sub Accounts. Zoom only assigns this privilege to trusted partners.</aside> <br>  **Prerequisites:** * Pro or a higher paid account with Master Account option enabled. <br> **Scope**: `account:write:admin`<br>
    # @param account_id The account ID.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def account_disassociate(account_id, opts = {})
      account_disassociate_with_http_info(account_id, opts)
      nil
    end

    # Disassociate a Sub Account
    # Disassociate a Sub Account from the Master Account. This will leave the Sub Account intact but it will no longer be associated with the master account.&lt;br&gt;  &lt;aside&gt;Your account must be a Master Account in order to disassociate Sub Accounts. Zoom only assigns this privilege to trusted partners.&lt;/aside&gt; &lt;br&gt;  **Prerequisites:** * Pro or a higher paid account with Master Account option enabled. &lt;br&gt; **Scope**: &#x60;account:write:admin&#x60;&lt;br&gt;
    # @param account_id The account ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def account_disassociate_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.account_disassociate ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.account_disassociate"
      end
      # resource path
      local_var_path = '/accounts/{accountId}'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#account_disassociate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Managed Domains
    # Get a Sub Account's [managed domains](https://support.zoom.us/hc/en-us/articles/203395207-What-is-Managed-Domain-).<br><br>  To get managed domains of the Master Account, provide `me` as the value for accountId in the path parameter.   Provide the Sub Account's Account ID as the value of accountId path parameter to get managed domains of the Sub Account.  **Prerequisites:**<br> * Pro or a higher paid account with Master Account option enabled. <br> **Scope:** `account:read:admin`<br>
    # @param account_id The account ID.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20013]
    def account_managed_domain(account_id, opts = {})
      data, _status_code, _headers = account_managed_domain_with_http_info(account_id, opts)
      data
    end

    # Get Managed Domains
    # Get a Sub Account&#39;s [managed domains](https://support.zoom.us/hc/en-us/articles/203395207-What-is-Managed-Domain-).&lt;br&gt;&lt;br&gt;  To get managed domains of the Master Account, provide &#x60;me&#x60; as the value for accountId in the path parameter.   Provide the Sub Account&#39;s Account ID as the value of accountId path parameter to get managed domains of the Sub Account.  **Prerequisites:**&lt;br&gt; * Pro or a higher paid account with Master Account option enabled. &lt;br&gt; **Scope:** &#x60;account:read:admin&#x60;&lt;br&gt;
    # @param account_id The account ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20013, Fixnum, Hash)>] InlineResponse20013 data, response status code and response headers
    def account_managed_domain_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.account_managed_domain ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.account_managed_domain"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/managed_domains'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20013')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#account_managed_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Options
    # Update a Sub Account's options under the Master Account.<br> <aside>Your account must be a Master Account in order to update the options for Sub Accounts. Zoom only assigns this privilege to trusted partners. </aside>  **Prerequisites:** * Pro or a higher paid account with Master Account option enabled. <br> **Scope**: `account:write:admin`<br>
    # @param account_id The account ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def account_options_update(account_id, body, opts = {})
      account_options_update_with_http_info(account_id, body, opts)
      nil
    end

    # Update Options
    # Update a Sub Account&#39;s options under the Master Account.&lt;br&gt; &lt;aside&gt;Your account must be a Master Account in order to update the options for Sub Accounts. Zoom only assigns this privilege to trusted partners. &lt;/aside&gt;  **Prerequisites:** * Pro or a higher paid account with Master Account option enabled. &lt;br&gt; **Scope**: &#x60;account:write:admin&#x60;&lt;br&gt;
    # @param account_id The account ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def account_options_update_with_http_info(account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.account_options_update ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.account_options_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AccountsApi.account_options_update"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/options'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#account_options_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Settings
    # Get the settings of a Sub Account under a Master Account.<br> To get the settings of a Master Account, use `me` as the value for the `accountId` path parameter.<p style=\"background-color:#FEEFB3; color:#9F6000; padding:8px\"><b>Note:</b> The `force_pmi_jbh_password` field under meeting settings is planned to be deprecated on September 22, 2019. This field will be replaced by another field that will provide the same functionality.</p>  **Prerequisites**:  * The Sub Account must be a paid account.<br> **Scopes**: `account:read:admin` <br>
    # @param account_id The account ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :option &#x60;meeting_authentication&#x60;: Use this query parameter to view [meeting authentication configuration](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) applied on the account.&lt;br&gt;&#x60;recording_authentication&#x60;: Use this query parameter to view [recording authentication configuration](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings) applied on the account.
    # @return [Object]
    def account_settings(account_id, opts = {})
      data, _status_code, _headers = account_settings_with_http_info(account_id, opts)
      data
    end

    # Get Settings
    # Get the settings of a Sub Account under a Master Account.&lt;br&gt; To get the settings of a Master Account, use &#x60;me&#x60; as the value for the &#x60;accountId&#x60; path parameter.&lt;p style&#x3D;\&quot;background-color:#FEEFB3; color:#9F6000; padding:8px\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; The &#x60;force_pmi_jbh_password&#x60; field under meeting settings is planned to be deprecated on September 22, 2019. This field will be replaced by another field that will provide the same functionality.&lt;/p&gt;  **Prerequisites**:  * The Sub Account must be a paid account.&lt;br&gt; **Scopes**: &#x60;account:read:admin&#x60; &lt;br&gt;
    # @param account_id The account ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :option &#x60;meeting_authentication&#x60;: Use this query parameter to view [meeting authentication configuration](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) applied on the account.&lt;br&gt;&#x60;recording_authentication&#x60;: Use this query parameter to view [recording authentication configuration](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings) applied on the account.
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def account_settings_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.account_settings ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.account_settings"
      end
      if @api_client.config.client_side_validation && opts[:'option'] && !['meeting_authentication', 'recording_authentication'].include?(opts[:'option'])
        fail ArgumentError, 'invalid value for "option", must be one of meeting_authentication, recording_authentication'
      end
      # resource path
      local_var_path = '/accounts/{accountId}/settings'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'option'] = opts[:'option'] if !opts[:'option'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#account_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Settings
    # Update the settings of a Sub Account that is under a Master Account.<br> To update the settings of the Master Account, use `me` as the value of the `accountId` path parameter.<p style=\"background-color:#FEEFB3; color:#9F6000\"><br>Note:</b> The `force_pmi_jbh_password` field under meeting settings is planned to be deprecated on September 22, 2019. This field will be replaced by another field that will provide the same functionality.</p> **Prerequisites**:  * The Sub Account must be a paid account.<br> **Scopes**: `account:write:admin` <br>
    # @param account_id The account ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @option opts [String] :option
    # @return [nil]
    def account_settings_update(account_id, body, opts = {})
      account_settings_update_with_http_info(account_id, body, opts)
      nil
    end

    # Update Settings
    # Update the settings of a Sub Account that is under a Master Account.&lt;br&gt; To update the settings of the Master Account, use &#x60;me&#x60; as the value of the &#x60;accountId&#x60; path parameter.&lt;p style&#x3D;\&quot;background-color:#FEEFB3; color:#9F6000\&quot;&gt;&lt;br&gt;Note:&lt;/b&gt; The &#x60;force_pmi_jbh_password&#x60; field under meeting settings is planned to be deprecated on September 22, 2019. This field will be replaced by another field that will provide the same functionality.&lt;/p&gt; **Prerequisites**:  * The Sub Account must be a paid account.&lt;br&gt; **Scopes**: &#x60;account:write:admin&#x60; &lt;br&gt;
    # @param account_id The account ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @option opts [String] :option
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def account_settings_update_with_http_info(account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.account_settings_update ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.account_settings_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AccountsApi.account_settings_update"
      end
      if @api_client.config.client_side_validation && opts[:'option'] && !['meeting_authentication', 'recording_authentication'].include?(opts[:'option'])
        fail ArgumentError, 'invalid value for "option", must be one of meeting_authentication, recording_authentication'
      end
      # resource path
      local_var_path = '/accounts/{accountId}/settings'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'option'] = opts[:'option'] if !opts[:'option'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#account_settings_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Trusted Domains
    # Get trusted domains of a Sub Account. To get the trusted domains of a Master Account, use `me` as the value for the `accountId` path parameter.  **Prerequisites:**<br> * The Sub Account must be a paid account.<br> **Scope:** `account:read:admin`<br>
    # @param account_id The account ID.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def account_trusted_domain(account_id, opts = {})
      data, _status_code, _headers = account_trusted_domain_with_http_info(account_id, opts)
      data
    end

    # Get Trusted Domains
    # Get trusted domains of a Sub Account. To get the trusted domains of a Master Account, use &#x60;me&#x60; as the value for the &#x60;accountId&#x60; path parameter.  **Prerequisites:**&lt;br&gt; * The Sub Account must be a paid account.&lt;br&gt; **Scope:** &#x60;account:read:admin&#x60;&lt;br&gt;
    # @param account_id The account ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def account_trusted_domain_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.account_trusted_domain ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.account_trusted_domain"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/trusted_domains'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#account_trusted_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Sub Accounts
    # List all the Sub Accounts under the Master Account.<br> <aside>Only master accounts can create and have sub accounts. Zoom only assigns this privilege to trusted partners.</aside>  <br>**Prerequisites:**<br> * Pro or a higher paid account with Master Account option enabled. <br> **Scope**: `account:read:admin` <br>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [Integer] :page_number The current page number of returned records. (default to 1)
    # @return [AccountList]
    def accounts(opts = {})
      data, _status_code, _headers = accounts_with_http_info(opts)
      data
    end

    # List Sub Accounts
    # List all the Sub Accounts under the Master Account.&lt;br&gt; &lt;aside&gt;Only master accounts can create and have sub accounts. Zoom only assigns this privilege to trusted partners.&lt;/aside&gt;  &lt;br&gt;**Prerequisites:**&lt;br&gt; * Pro or a higher paid account with Master Account option enabled. &lt;br&gt; **Scope**: &#x60;account:read:admin&#x60; &lt;br&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [Integer] :page_number The current page number of returned records.
    # @return [Array<(AccountList, Fixnum, Hash)>] AccountList data, response status code and response headers
    def accounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.accounts ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AccountsApi.accounts, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/accounts'

      # query parameters
      query_params = {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page_number'] = opts[:'page_number'] if !opts[:'page_number'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Locked Settings
    # [Account Locked Settings](https://support.zoom.us/hc/en-us/articles/115005269866) allow you turn settings on or off for all users in your account. No user except the account admin or account owner can change these settings. With lock settings, you force the settings on for all users. Use this API to retrieve an account's locked settings.<p style=\"background-color:#FEEFB3; color:#9F6000\"><b>Note:</b> The <code>force_pmi_jbh_password</code> field under meeting settings was deprecated on September 22, 2019. Use <code>require_password_for_pmi_meetings</code> field as an alternative for the same functionality.</p>  **Prerequisites:** * Pro or a higher paid account with Master Account option enabled. <br> **Scope**: `account:read:admin`. <br>     **Scope:** account:read:admin
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20070]
    def get_account_lock_settings(account_id, opts = {})
      data, _status_code, _headers = get_account_lock_settings_with_http_info(account_id, opts)
      data
    end

    # Get Locked Settings
    # [Account Locked Settings](https://support.zoom.us/hc/en-us/articles/115005269866) allow you turn settings on or off for all users in your account. No user except the account admin or account owner can change these settings. With lock settings, you force the settings on for all users. Use this API to retrieve an account&#39;s locked settings.&lt;p style&#x3D;\&quot;background-color:#FEEFB3; color:#9F6000\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;force_pmi_jbh_password&lt;/code&gt; field under meeting settings was deprecated on September 22, 2019. Use &lt;code&gt;require_password_for_pmi_meetings&lt;/code&gt; field as an alternative for the same functionality.&lt;/p&gt;  **Prerequisites:** * Pro or a higher paid account with Master Account option enabled. &lt;br&gt; **Scope**: &#x60;account:read:admin&#x60;. &lt;br&gt;     **Scope:** account:read:admin
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20070, Fixnum, Hash)>] InlineResponse20070 data, response status code and response headers
    def get_account_lock_settings_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_account_lock_settings ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_account_lock_settings"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/lock_settings'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20070')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account_lock_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Locked Settings
    # [Account Locked Settings](https://support.zoom.us/hc/en-us/articles/115005269866) allow you turn settings on or off for all users in your account. No user except the account admin or account owner can change these settings. With lock settings, you force the settings on for all users.   Use this API to update an account's locked settings.<p style=\"background-color:#FEEFB3; color:#9F6000\"><br>Note:</b> The `force_pmi_jbh_password` field under meeting settings is planned to be deprecated on September 22, 2019. This field will be replaced by another field that will provide the same functionality.</p>  **Prerequisites:**<br> * Pro or a higher paid account with Master Account option enabled. <br> **Scope:** `account:write:admin`<br>
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [Body51] :body
    # @return [Object]
    def update_account_lock_settings(account_id, opts = {})
      data, _status_code, _headers = update_account_lock_settings_with_http_info(account_id, opts)
      data
    end

    # Update Locked Settings
    # [Account Locked Settings](https://support.zoom.us/hc/en-us/articles/115005269866) allow you turn settings on or off for all users in your account. No user except the account admin or account owner can change these settings. With lock settings, you force the settings on for all users.   Use this API to update an account&#39;s locked settings.&lt;p style&#x3D;\&quot;background-color:#FEEFB3; color:#9F6000\&quot;&gt;&lt;br&gt;Note:&lt;/b&gt; The &#x60;force_pmi_jbh_password&#x60; field under meeting settings is planned to be deprecated on September 22, 2019. This field will be replaced by another field that will provide the same functionality.&lt;/p&gt;  **Prerequisites:**&lt;br&gt; * Pro or a higher paid account with Master Account option enabled. &lt;br&gt; **Scope:** &#x60;account:write:admin&#x60;&lt;br&gt;
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [Body51] :body
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def update_account_lock_settings_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.update_account_lock_settings ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.update_account_lock_settings"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/lock_settings'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#update_account_lock_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the Account Owner
    # The current account owner can [change the owner of an account](https://support.zoom.us/hc/en-us/articles/115005686983-Change-Account-Owner) to another user on the same account.<br> Use this API to change the owner of an account.  **Prerequisites**:<br> * Account owner or admin permissions.<br> * Pro or a higher plan with Master Account option enabled..  **Scopes:**  `account:write:admin` or `account:master`<br> <br>
    # @param account_id Account Id of the account.
    # @param [Hash] opts the optional parameters
    # @option opts [Body53] :body
    # @return [Object]
    def update_account_owner(account_id, opts = {})
      data, _status_code, _headers = update_account_owner_with_http_info(account_id, opts)
      data
    end

    # Update the Account Owner
    # The current account owner can [change the owner of an account](https://support.zoom.us/hc/en-us/articles/115005686983-Change-Account-Owner) to another user on the same account.&lt;br&gt; Use this API to change the owner of an account.  **Prerequisites**:&lt;br&gt; * Account owner or admin permissions.&lt;br&gt; * Pro or a higher plan with Master Account option enabled..  **Scopes:**  &#x60;account:write:admin&#x60; or &#x60;account:master&#x60;&lt;br&gt; &lt;br&gt;
    # @param account_id Account Id of the account.
    # @param [Hash] opts the optional parameters
    # @option opts [Body53] :body
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def update_account_owner_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.update_account_owner ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.update_account_owner"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/owner'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#update_account_owner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
