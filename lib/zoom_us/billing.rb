=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module ZoomUs
  class Billing
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Billing Information
    # Get [billing information](https://support.zoom.us/hc/en-us/articles/201363263-About-Billing) of a Sub Account under a Master Account.<br><br>  **Prerequisites:** * Pro or a higher paid account with Master Account option enabled. <br> **Scope**:`billing:master`<br>
    # @param account_id The account ID.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20014]
    def account_billing(account_id, opts = {})
      data, _status_code, _headers = account_billing_with_http_info(account_id, opts)
      data
    end

    # Get Billing Information
    # Get [billing information](https://support.zoom.us/hc/en-us/articles/201363263-About-Billing) of a Sub Account under a Master Account.&lt;br&gt;&lt;br&gt;  **Prerequisites:** * Pro or a higher paid account with Master Account option enabled. &lt;br&gt; **Scope**:&#x60;billing:master&#x60;&lt;br&gt;
    # @param account_id The account ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20014, Fixnum, Hash)>] InlineResponse20014 data, response status code and response headers
    def account_billing_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.account_billing ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling BillingApi.account_billing"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/billing'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20014')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#account_billing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Billing Information
    # Update [billing information](https://support.zoom.us/hc/en-us/articles/201363263-About-Billing) for a Sub Account under a Master account. <aside>This is only for a paid sub account that is paid by a master account.</aside><br><br>  **Prerequisites:** * Pro or a higher paid account with Master Account option enabled. <br> **Scope**:`billing:master`<br>
    # @param account_id The account ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def account_billing_update(account_id, body, opts = {})
      account_billing_update_with_http_info(account_id, body, opts)
      nil
    end

    # Update Billing Information
    # Update [billing information](https://support.zoom.us/hc/en-us/articles/201363263-About-Billing) for a Sub Account under a Master account. &lt;aside&gt;This is only for a paid sub account that is paid by a master account.&lt;/aside&gt;&lt;br&gt;&lt;br&gt;  **Prerequisites:** * Pro or a higher paid account with Master Account option enabled. &lt;br&gt; **Scope**:&#x60;billing:master&#x60;&lt;br&gt;
    # @param account_id The account ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def account_billing_update_with_http_info(account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.account_billing_update ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling BillingApi.account_billing_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BillingApi.account_billing_update"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/billing'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#account_billing_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel  Additional Plans
    # [Cancel additional plan](https://support.zoom.us/hc/en-us/articles/203634215-How-Do-I-Cancel-My-Subscription-) for a sub account. Only a Master account holder who pays for this sub account can cancel the add-on. The cancellation does not provide refund for the current subscription. The service remains active for the current session.  **Prerequisites:**<br> * Pro or a higher plan with Master Account option enabled. * The Sub Account must be a paid account.<br> **Scope:** `billing:master`<br>
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [Body49] :body
    # @return [nil]
    def account_plan_addon_cancel(account_id, opts = {})
      account_plan_addon_cancel_with_http_info(account_id, opts)
      nil
    end

    # Cancel  Additional Plans
    # [Cancel additional plan](https://support.zoom.us/hc/en-us/articles/203634215-How-Do-I-Cancel-My-Subscription-) for a sub account. Only a Master account holder who pays for this sub account can cancel the add-on. The cancellation does not provide refund for the current subscription. The service remains active for the current session.  **Prerequisites:**&lt;br&gt; * Pro or a higher plan with Master Account option enabled. * The Sub Account must be a paid account.&lt;br&gt; **Scope:** &#x60;billing:master&#x60;&lt;br&gt;
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [Body49] :body
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def account_plan_addon_cancel_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.account_plan_addon_cancel ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling BillingApi.account_plan_addon_cancel"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/plans/addons/status'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#account_plan_addon_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add an Additional Plan
    # Add an additional plan for a sub account. <br> <br>**Prerequisites:**<br> * Pro or a higher plan with Master Account enabled. * The Sub Account must be a paid account. The billing charges for the Sub Account must be paid by the Master Account.<br> **Scopes**: `billing:master`<br>
    # @param account_id The account ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def account_plan_addon_create(account_id, body, opts = {})
      account_plan_addon_create_with_http_info(account_id, body, opts)
      nil
    end

    # Add an Additional Plan
    # Add an additional plan for a sub account. &lt;br&gt; &lt;br&gt;**Prerequisites:**&lt;br&gt; * Pro or a higher plan with Master Account enabled. * The Sub Account must be a paid account. The billing charges for the Sub Account must be paid by the Master Account.&lt;br&gt; **Scopes**: &#x60;billing:master&#x60;&lt;br&gt;
    # @param account_id The account ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def account_plan_addon_create_with_http_info(account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.account_plan_addon_create ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling BillingApi.account_plan_addon_create"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BillingApi.account_plan_addon_create"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/plans/addons'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#account_plan_addon_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Additional Plan
    # Update an additional plan for a sub account.<br> <br>**Prerequisites:**<br> * Pro or a higher plan with Master Account enabled. * The Sub Account must be a paid account. The billing charges for the Sub Account must be paid by the Master Account.<br> **Scopes**: `billing:master`<br>
    # @param account_id The account ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def account_plan_addon_update(account_id, body, opts = {})
      account_plan_addon_update_with_http_info(account_id, body, opts)
      nil
    end

    # Update an Additional Plan
    # Update an additional plan for a sub account.&lt;br&gt; &lt;br&gt;**Prerequisites:**&lt;br&gt; * Pro or a higher plan with Master Account enabled. * The Sub Account must be a paid account. The billing charges for the Sub Account must be paid by the Master Account.&lt;br&gt; **Scopes**: &#x60;billing:master&#x60;&lt;br&gt;
    # @param account_id The account ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def account_plan_addon_update_with_http_info(account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.account_plan_addon_update ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling BillingApi.account_plan_addon_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BillingApi.account_plan_addon_update"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/plans/addons'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#account_plan_addon_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel Base Plan
    # [Cancel a base plan](https://support.zoom.us/hc/en-us/articles/203634215-How-Do-I-Cancel-My-Subscription-) for a sub account. Only a master account holder who pays for this sub account can cancel the plan. The cancellation does not provide refund for the current subscription.  The service remains active for the current session.  **Scopes**: `billing:master`<br>
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [Body48] :body
    # @return [nil]
    def account_plan_base_delete(account_id, opts = {})
      account_plan_base_delete_with_http_info(account_id, opts)
      nil
    end

    # Cancel Base Plan
    # [Cancel a base plan](https://support.zoom.us/hc/en-us/articles/203634215-How-Do-I-Cancel-My-Subscription-) for a sub account. Only a master account holder who pays for this sub account can cancel the plan. The cancellation does not provide refund for the current subscription.  The service remains active for the current session.  **Scopes**: &#x60;billing:master&#x60;&lt;br&gt;
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [Body48] :body
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def account_plan_base_delete_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.account_plan_base_delete ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling BillingApi.account_plan_base_delete"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/plans/base/status'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#account_plan_base_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Base Plan
    # Update a base plan of a Sub Account. <aside> This can only update a base plan for a paid Sub Account that is paid by a Master Account.</aside><br><br> **Scopes:** `billing:master`<br>
    # @param account_id The account ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def account_plan_base_update(account_id, body, opts = {})
      account_plan_base_update_with_http_info(account_id, body, opts)
      nil
    end

    # Update a Base Plan
    # Update a base plan of a Sub Account. &lt;aside&gt; This can only update a base plan for a paid Sub Account that is paid by a Master Account.&lt;/aside&gt;&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;billing:master&#x60;&lt;br&gt;
    # @param account_id The account ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def account_plan_base_update_with_http_info(account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.account_plan_base_update ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling BillingApi.account_plan_base_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BillingApi.account_plan_base_update"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/plans/base'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#account_plan_base_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Subscribe to Plans
    # Subscribe plans for a Sub Account under a Master Account. <aside> The plans can only be subscribed for an existing free Sub Account and the subscriptions charge should be paid by a Master Account.</aside><br><br> **Scopes**: `billing:master`<br>
    # @param account_id The account ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def account_plan_create(account_id, body, opts = {})
      account_plan_create_with_http_info(account_id, body, opts)
      nil
    end

    # Subscribe to Plans
    # Subscribe plans for a Sub Account under a Master Account. &lt;aside&gt; The plans can only be subscribed for an existing free Sub Account and the subscriptions charge should be paid by a Master Account.&lt;/aside&gt;&lt;br&gt;&lt;br&gt; **Scopes**: &#x60;billing:master&#x60;&lt;br&gt;
    # @param account_id The account ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def account_plan_create_with_http_info(account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.account_plan_create ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling BillingApi.account_plan_create"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BillingApi.account_plan_create"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/plans'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#account_plan_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Plan Information
    # Get plan information for a Sub Account under the Master account.  <aside> This is only for a Sub Account that is paid by a Master Account.</aside><br><br> **Scopes:** `billing:master`<br>
    # @param account_id The account ID.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20015]
    def account_plans(account_id, opts = {})
      data, _status_code, _headers = account_plans_with_http_info(account_id, opts)
      data
    end

    # Get Plan Information
    # Get plan information for a Sub Account under the Master account.  &lt;aside&gt; This is only for a Sub Account that is paid by a Master Account.&lt;/aside&gt;&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;billing:master&#x60;&lt;br&gt;
    # @param account_id The account ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20015, Fixnum, Hash)>] InlineResponse20015 data, response status code and response headers
    def account_plans_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.account_plans ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling BillingApi.account_plans"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/plans'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20015')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#account_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Plan Usage
    # Get information on usage of [plans](https://marketplace.zoom.us/docs/api-reference/other-references/plans) on a Master Account.  **Prerequisite**:<br> Account type: Master Account on a paid Pro, Business or Enterprise plan.<br> **Scope:** `billing:master`<br>
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20072]
    def get_plan_usage(account_id, opts = {})
      data, _status_code, _headers = get_plan_usage_with_http_info(account_id, opts)
      data
    end

    # Get Plan Usage
    # Get information on usage of [plans](https://marketplace.zoom.us/docs/api-reference/other-references/plans) on a Master Account.  **Prerequisite**:&lt;br&gt; Account type: Master Account on a paid Pro, Business or Enterprise plan.&lt;br&gt; **Scope:** &#x60;billing:master&#x60;&lt;br&gt;
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20072, Fixnum, Hash)>] InlineResponse20072 data, response status code and response headers
    def get_plan_usage_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.get_plan_usage ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling BillingApi.get_plan_usage"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/plans/usage'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20072')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#get_plan_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
