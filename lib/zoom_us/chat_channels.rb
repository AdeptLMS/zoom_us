=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module ZoomUs
  class ChatChannels
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Channel
    # Zoom chat channels allow users to communicate via chat in private or public groups. Use this API to create a channel for a user.  <p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note: </b> This API only supports <b>user-managed</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>.</p><br>  **Scopes**: `chat_channel:write`<br>
    # @param [Hash] opts the optional parameters
    # @option opts [Body7] :body
    # @return [InlineResponse2012]
    def create_channel(opts = {})
      data, _status_code, _headers = create_channel_with_http_info(opts)
      data
    end

    # Create a Channel
    # Zoom chat channels allow users to communicate via chat in private or public groups. Use this API to create a channel for a user.  &lt;p style&#x3D;\&quot;background-color:#e1f5fe; color:#01579b; padding:8px\&quot;&gt; &lt;b&gt;Note: &lt;/b&gt; This API only supports &lt;b&gt;user-managed&lt;/b&gt; &lt;a href&#x3D;\&quot;https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\&quot;&gt;OAuth app&lt;/a&gt;.&lt;/p&gt;&lt;br&gt;  **Scopes**: &#x60;chat_channel:write&#x60;&lt;br&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Body7] :body
    # @return [Array<(InlineResponse2012, Fixnum, Hash)>] InlineResponse2012 data, response status code and response headers
    def create_channel_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatChannelsApi.create_channel ...'
      end
      # resource path
      local_var_path = '/chat/users/me/channels'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2012')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatChannelsApi#create_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Channel
    # Zoom chat [channels](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) allow users to communicate via chat in private or public groups. Use this API to delete a specific channel.   <p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note: </b>This API only supports <b>user-managed</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>.</p><br>  **Scope:** `chat_channel:write`<br>
    # @param channel_id Channel ID: Unique Identifier of a channel.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_channel(channel_id, opts = {})
      data, _status_code, _headers = delete_channel_with_http_info(channel_id, opts)
      data
    end

    # Delete a Channel
    # Zoom chat [channels](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) allow users to communicate via chat in private or public groups. Use this API to delete a specific channel.   &lt;p style&#x3D;\&quot;background-color:#e1f5fe; color:#01579b; padding:8px\&quot;&gt; &lt;b&gt;Note: &lt;/b&gt;This API only supports &lt;b&gt;user-managed&lt;/b&gt; &lt;a href&#x3D;\&quot;https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\&quot;&gt;OAuth app&lt;/a&gt;.&lt;/p&gt;&lt;br&gt;  **Scope:** &#x60;chat_channel:write&#x60;&lt;br&gt;
    # @param channel_id Channel ID: Unique Identifier of a channel.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def delete_channel_with_http_info(channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatChannelsApi.delete_channel ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling ChatChannelsApi.delete_channel"
      end
      # resource path
      local_var_path = '/chat/channels/{channelId}'.sub('{' + 'channelId' + '}', channel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatChannelsApi#delete_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Channel
    # Zoom chat [channels](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) allow users to communicate via chat in private or public groups. Use this API to get information about a specific channel.   <p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note: </b>This API only supports <b>user-managed</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>.</p><br>  **Scope:** `chat_channel:read` <br>
    # @param channel_id Channel ID: Unique Identifier of a channel.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20010]
    def get_channel(channel_id, opts = {})
      data, _status_code, _headers = get_channel_with_http_info(channel_id, opts)
      data
    end

    # Get a Channel
    # Zoom chat [channels](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) allow users to communicate via chat in private or public groups. Use this API to get information about a specific channel.   &lt;p style&#x3D;\&quot;background-color:#e1f5fe; color:#01579b; padding:8px\&quot;&gt; &lt;b&gt;Note: &lt;/b&gt;This API only supports &lt;b&gt;user-managed&lt;/b&gt; &lt;a href&#x3D;\&quot;https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\&quot;&gt;OAuth app&lt;/a&gt;.&lt;/p&gt;&lt;br&gt;  **Scope:** &#x60;chat_channel:read&#x60; &lt;br&gt;
    # @param channel_id Channel ID: Unique Identifier of a channel.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20010, Fixnum, Hash)>] InlineResponse20010 data, response status code and response headers
    def get_channel_with_http_info(channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatChannelsApi.get_channel ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling ChatChannelsApi.get_channel"
      end
      # resource path
      local_var_path = '/chat/channels/{channelId}'.sub('{' + 'channelId' + '}', channel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20010')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatChannelsApi#get_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List User's Channels
    # Zoom chat [channels](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) allow users to communicate via chat in private or public groups. Use this API to list a user's chat channels.   <p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note: </b> This API only supports <b>user-managed</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>.</p><br>  **Scope**: `chat_channel:read`<br>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned from a single API call. (default to 10)
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. The expiration period for this token is 15 minutes.
    # @return [InlineResponse2007]
    def get_channels(opts = {})
      data, _status_code, _headers = get_channels_with_http_info(opts)
      data
    end

    # List User&#39;s Channels
    # Zoom chat [channels](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) allow users to communicate via chat in private or public groups. Use this API to list a user&#39;s chat channels.   &lt;p style&#x3D;\&quot;background-color:#e1f5fe; color:#01579b; padding:8px\&quot;&gt; &lt;b&gt;Note: &lt;/b&gt; This API only supports &lt;b&gt;user-managed&lt;/b&gt; &lt;a href&#x3D;\&quot;https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\&quot;&gt;OAuth app&lt;/a&gt;.&lt;/p&gt;&lt;br&gt;  **Scope**: &#x60;chat_channel:read&#x60;&lt;br&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned from a single API call.
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. The expiration period for this token is 15 minutes.
    # @return [Array<(InlineResponse2007, Fixnum, Hash)>] InlineResponse2007 data, response status code and response headers
    def get_channels_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatChannelsApi.get_channels ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 50
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ChatChannelsApi.get_channels, must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/chat/users/me/channels'

      # query parameters
      query_params = {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2007')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatChannelsApi#get_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Invite Channel Members
    # A [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) can have one or multiple members. Use this API to invite members that are in your contact list to a channel. The maximum number of members that can be added at once with this API is 5.   <p style=\"background-color:#e7f3fe;\"><strong>Note:</strong> This API only supports <b>user-managed</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>.</p><br>  **Scope:** `chat_channel:write`<br>
    # @param channel_id Channel ID: Unique Identifier of the channel.
    # @param [Hash] opts the optional parameters
    # @option opts [Body9] :body
    # @return [InlineResponse2013]
    def invite_channel_members(channel_id, opts = {})
      data, _status_code, _headers = invite_channel_members_with_http_info(channel_id, opts)
      data
    end

    # Invite Channel Members
    # A [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) can have one or multiple members. Use this API to invite members that are in your contact list to a channel. The maximum number of members that can be added at once with this API is 5.   &lt;p style&#x3D;\&quot;background-color:#e7f3fe;\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; This API only supports &lt;b&gt;user-managed&lt;/b&gt; &lt;a href&#x3D;\&quot;https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\&quot;&gt;OAuth app&lt;/a&gt;.&lt;/p&gt;&lt;br&gt;  **Scope:** &#x60;chat_channel:write&#x60;&lt;br&gt;
    # @param channel_id Channel ID: Unique Identifier of the channel.
    # @param [Hash] opts the optional parameters
    # @option opts [Body9] :body
    # @return [Array<(InlineResponse2013, Fixnum, Hash)>] InlineResponse2013 data, response status code and response headers
    def invite_channel_members_with_http_info(channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatChannelsApi.invite_channel_members ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling ChatChannelsApi.invite_channel_members"
      end
      # resource path
      local_var_path = '/chat/channels/{channelId}/members'.sub('{' + 'channelId' + '}', channel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2013')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatChannelsApi#invite_channel_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Join a Channel
    # A [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) can have one or multiple members. Use this API to join a channel that is open for anyone in the same organization to join. You cannot use this API to join private channels that only allows invited members to be a part of it.  <p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note: </b>This API only supports <b>user-managed</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>.</p><br>  **Scope:** `chat_channel:write`<br>
    # @param channel_id Channel Id.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2014]
    def join_channel(channel_id, opts = {})
      data, _status_code, _headers = join_channel_with_http_info(channel_id, opts)
      data
    end

    # Join a Channel
    # A [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) can have one or multiple members. Use this API to join a channel that is open for anyone in the same organization to join. You cannot use this API to join private channels that only allows invited members to be a part of it.  &lt;p style&#x3D;\&quot;background-color:#e1f5fe; color:#01579b; padding:8px\&quot;&gt; &lt;b&gt;Note: &lt;/b&gt;This API only supports &lt;b&gt;user-managed&lt;/b&gt; &lt;a href&#x3D;\&quot;https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\&quot;&gt;OAuth app&lt;/a&gt;.&lt;/p&gt;&lt;br&gt;  **Scope:** &#x60;chat_channel:write&#x60;&lt;br&gt;
    # @param channel_id Channel Id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2014, Fixnum, Hash)>] InlineResponse2014 data, response status code and response headers
    def join_channel_with_http_info(channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatChannelsApi.join_channel ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling ChatChannelsApi.join_channel"
      end
      # resource path
      local_var_path = '/chat/channels/{channelId}/members/me'.sub('{' + 'channelId' + '}', channel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2014')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatChannelsApi#join_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Leave a Channel
    # If you're no longer interested in being a member of an existing channel, you can leave the channel at any time. Use this API to leave a specific channel. After leaving the channel, you can no longer access information from that channel.  <p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note: </b>This API only supports <b>user-managed</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>.</p><br>  **Scope:** `chat_channel:write`<br>
    # @param channel_id Channel ID: Unique Identifier of a channel.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def leave_channel(channel_id, opts = {})
      data, _status_code, _headers = leave_channel_with_http_info(channel_id, opts)
      data
    end

    # Leave a Channel
    # If you&#39;re no longer interested in being a member of an existing channel, you can leave the channel at any time. Use this API to leave a specific channel. After leaving the channel, you can no longer access information from that channel.  &lt;p style&#x3D;\&quot;background-color:#e1f5fe; color:#01579b; padding:8px\&quot;&gt; &lt;b&gt;Note: &lt;/b&gt;This API only supports &lt;b&gt;user-managed&lt;/b&gt; &lt;a href&#x3D;\&quot;https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\&quot;&gt;OAuth app&lt;/a&gt;.&lt;/p&gt;&lt;br&gt;  **Scope:** &#x60;chat_channel:write&#x60;&lt;br&gt;
    # @param channel_id Channel ID: Unique Identifier of a channel.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def leave_channel_with_http_info(channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatChannelsApi.leave_channel ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling ChatChannelsApi.leave_channel"
      end
      # resource path
      local_var_path = '/chat/channels/{channelId}/members/me'.sub('{' + 'channelId' + '}', channel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatChannelsApi#leave_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Channel Members
    # A [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) can have one or multiple members. List all the members of a channel using this API.  <p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note: </b>This API only supports <b>user-managed</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>.</p><br>  **Scopes:** `chat_channel:read`<br>
    # @param channel_id Channel Id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned with a single API call. (default to 30)
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [InlineResponse20011]
    def list_channel_members(channel_id, opts = {})
      data, _status_code, _headers = list_channel_members_with_http_info(channel_id, opts)
      data
    end

    # List Channel Members
    # A [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) can have one or multiple members. List all the members of a channel using this API.  &lt;p style&#x3D;\&quot;background-color:#e1f5fe; color:#01579b; padding:8px\&quot;&gt; &lt;b&gt;Note: &lt;/b&gt;This API only supports &lt;b&gt;user-managed&lt;/b&gt; &lt;a href&#x3D;\&quot;https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\&quot;&gt;OAuth app&lt;/a&gt;.&lt;/p&gt;&lt;br&gt;  **Scopes:** &#x60;chat_channel:read&#x60;&lt;br&gt;
    # @param channel_id Channel Id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned with a single API call.
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [Array<(InlineResponse20011, Fixnum, Hash)>] InlineResponse20011 data, response status code and response headers
    def list_channel_members_with_http_info(channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatChannelsApi.list_channel_members ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling ChatChannelsApi.list_channel_members"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ChatChannelsApi.list_channel_members, must be smaller than or equal to 100.'
      end

      # resource path
      local_var_path = '/chat/channels/{channelId}/members'.sub('{' + 'channelId' + '}', channel_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20011')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatChannelsApi#list_channel_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove a Member
    #  A [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) can have one or multiple members. Use this API to remove a member from a chat channel.<br><br>  **Scopes:** `chat_channel:write`<br>      <p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note: </b>This API only supports <b>user-managed</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>.</p><br>
    # @param channel_id Unique Identifier of the Channel from where you would like to remove a member. This can be retrieved from the [List Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels).
    # @param member_id Email address of the member whom you would like to be remove from the channel.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def remove_a_channel_member(channel_id, member_id, opts = {})
      data, _status_code, _headers = remove_a_channel_member_with_http_info(channel_id, member_id, opts)
      data
    end

    # Remove a Member
    #  A [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) can have one or multiple members. Use this API to remove a member from a chat channel.&lt;br&gt;&lt;br&gt;  **Scopes:** &#x60;chat_channel:write&#x60;&lt;br&gt;      &lt;p style&#x3D;\&quot;background-color:#e1f5fe; color:#01579b; padding:8px\&quot;&gt; &lt;b&gt;Note: &lt;/b&gt;This API only supports &lt;b&gt;user-managed&lt;/b&gt; &lt;a href&#x3D;\&quot;https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\&quot;&gt;OAuth app&lt;/a&gt;.&lt;/p&gt;&lt;br&gt;
    # @param channel_id Unique Identifier of the Channel from where you would like to remove a member. This can be retrieved from the [List Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels).
    # @param member_id Email address of the member whom you would like to be remove from the channel.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def remove_a_channel_member_with_http_info(channel_id, member_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatChannelsApi.remove_a_channel_member ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling ChatChannelsApi.remove_a_channel_member"
      end
      # verify the required parameter 'member_id' is set
      if @api_client.config.client_side_validation && member_id.nil?
        fail ArgumentError, "Missing the required parameter 'member_id' when calling ChatChannelsApi.remove_a_channel_member"
      end
      # resource path
      local_var_path = '/chat/channels/{channelId}/members/{memberId}'.sub('{' + 'channelId' + '}', channel_id.to_s).sub('{' + 'memberId' + '}', member_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatChannelsApi#remove_a_channel_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Channel
    # Zoom chat channels allow users to communicate via chat in private or public channels. Use this API to update the name of a specific channel that you created.   <p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note: </b>This API only supports <b>user-managed</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>.</p><br>  **Scope:** `chat_channel:write` <br>
    # @param channel_id Channel Id.
    # @param [Hash] opts the optional parameters
    # @option opts [Body8] :body
    # @return [Object]
    def update_channel(channel_id, opts = {})
      data, _status_code, _headers = update_channel_with_http_info(channel_id, opts)
      data
    end

    # Update a Channel
    # Zoom chat channels allow users to communicate via chat in private or public channels. Use this API to update the name of a specific channel that you created.   &lt;p style&#x3D;\&quot;background-color:#e1f5fe; color:#01579b; padding:8px\&quot;&gt; &lt;b&gt;Note: &lt;/b&gt;This API only supports &lt;b&gt;user-managed&lt;/b&gt; &lt;a href&#x3D;\&quot;https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\&quot;&gt;OAuth app&lt;/a&gt;.&lt;/p&gt;&lt;br&gt;  **Scope:** &#x60;chat_channel:write&#x60; &lt;br&gt;
    # @param channel_id Channel Id.
    # @param [Hash] opts the optional parameters
    # @option opts [Body8] :body
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def update_channel_with_http_info(channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatChannelsApi.update_channel ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling ChatChannelsApi.update_channel"
      end
      # resource path
      local_var_path = '/chat/channels/{channelId}'.sub('{' + 'channelId' + '}', channel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatChannelsApi#update_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
