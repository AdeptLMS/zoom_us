=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module ZoomUs
  class TrackingField
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Tracking Field
    # [Tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) allow you to analyze usage by various fields within an organization.<br> Use this API to create a new tracking field.<br><br> **Scope:** `trackingfield:write:admin`<br>  <br> **Prerequisites:** * Business, Education, API or higher plan
    # @param body Tracking Field
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2018]
    def trackingfield_create(body, opts = {})
      data, _status_code, _headers = trackingfield_create_with_http_info(body, opts)
      data
    end

    # Create a Tracking Field
    # [Tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) allow you to analyze usage by various fields within an organization.&lt;br&gt; Use this API to create a new tracking field.&lt;br&gt;&lt;br&gt; **Scope:** &#x60;trackingfield:write:admin&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:** * Business, Education, API or higher plan
    # @param body Tracking Field
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2018, Fixnum, Hash)>] InlineResponse2018 data, response status code and response headers
    def trackingfield_create_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackingFieldApi.trackingfield_create ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TrackingFieldApi.trackingfield_create"
      end
      # resource path
      local_var_path = '/tracking_fields'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2018')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingFieldApi#trackingfield_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Tracking Field
    # [Tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) allow you to analyze usage by various fields within an organization.<br> Use this API to delete a tracking field.<br><br> **Scope:** `trackingfield:write:admin`<br>  <br> **Prerequisites:** * Business, Education, API or higher plan
    # @param field_id The Tracking Field ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def trackingfield_delete(field_id, opts = {})
      trackingfield_delete_with_http_info(field_id, opts)
      nil
    end

    # Delete a Tracking Field
    # [Tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) allow you to analyze usage by various fields within an organization.&lt;br&gt; Use this API to delete a tracking field.&lt;br&gt;&lt;br&gt; **Scope:** &#x60;trackingfield:write:admin&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:** * Business, Education, API or higher plan
    # @param field_id The Tracking Field ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def trackingfield_delete_with_http_info(field_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackingFieldApi.trackingfield_delete ...'
      end
      # verify the required parameter 'field_id' is set
      if @api_client.config.client_side_validation && field_id.nil?
        fail ArgumentError, "Missing the required parameter 'field_id' when calling TrackingFieldApi.trackingfield_delete"
      end
      # resource path
      local_var_path = '/tracking_fields/{fieldId}'.sub('{' + 'fieldId' + '}', field_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingFieldApi#trackingfield_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Tracking Field
    # [Tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) allow you to analyze usage by various fields within an organization.<br><br> When scheduling a meeting, the tracking field will be included in the meeting options.<br>Use this API to get information on a tracking field.<br><br> **Scopes:** `trackingfield:read:admin`<br>  <br> **Prerequisites:** * Business, Education, API or higher plan
    # @param field_id The Tracking Field ID
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2018]
    def trackingfield_get(field_id, opts = {})
      data, _status_code, _headers = trackingfield_get_with_http_info(field_id, opts)
      data
    end

    # Get a Tracking Field
    # [Tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) allow you to analyze usage by various fields within an organization.&lt;br&gt;&lt;br&gt; When scheduling a meeting, the tracking field will be included in the meeting options.&lt;br&gt;Use this API to get information on a tracking field.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;trackingfield:read:admin&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:** * Business, Education, API or higher plan
    # @param field_id The Tracking Field ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2018, Fixnum, Hash)>] InlineResponse2018 data, response status code and response headers
    def trackingfield_get_with_http_info(field_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackingFieldApi.trackingfield_get ...'
      end
      # verify the required parameter 'field_id' is set
      if @api_client.config.client_side_validation && field_id.nil?
        fail ArgumentError, "Missing the required parameter 'field_id' when calling TrackingFieldApi.trackingfield_get"
      end
      # resource path
      local_var_path = '/tracking_fields/{fieldId}'.sub('{' + 'fieldId' + '}', field_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2018')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingFieldApi#trackingfield_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Tracking Fields
    # [Tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) allow you to analyze usage by various fields within an organization.<br> Use this API to list all the tracking fields on your Zoom account.<br><br> **Scopes:** `trackingfield:read:admin`<br>  <br> **Prerequisites:** * Business, Education, API or higher plan
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def trackingfield_list(opts = {})
      data, _status_code, _headers = trackingfield_list_with_http_info(opts)
      data
    end

    # List Tracking Fields
    # [Tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) allow you to analyze usage by various fields within an organization.&lt;br&gt; Use this API to list all the tracking fields on your Zoom account.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;trackingfield:read:admin&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:** * Business, Education, API or higher plan
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def trackingfield_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackingFieldApi.trackingfield_list ...'
      end
      # resource path
      local_var_path = '/tracking_fields'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingFieldApi#trackingfield_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Tracking Field
    # [Tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) allow you to analyze usage by various fields within an organization.<br> Use this API to update a tracking field.<br><br> **Scope:** `trackingfield:write:admin`<br>  <br> **Prerequisites:** * Business, Education, API or higher plan
    # @param field_id The Tracking Field ID
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def trackingfield_update(field_id, body, opts = {})
      trackingfield_update_with_http_info(field_id, body, opts)
      nil
    end

    # Update a Tracking Field
    # [Tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) allow you to analyze usage by various fields within an organization.&lt;br&gt; Use this API to update a tracking field.&lt;br&gt;&lt;br&gt; **Scope:** &#x60;trackingfield:write:admin&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:** * Business, Education, API or higher plan
    # @param field_id The Tracking Field ID
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def trackingfield_update_with_http_info(field_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackingFieldApi.trackingfield_update ...'
      end
      # verify the required parameter 'field_id' is set
      if @api_client.config.client_side_validation && field_id.nil?
        fail ArgumentError, "Missing the required parameter 'field_id' when calling TrackingFieldApi.trackingfield_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TrackingFieldApi.trackingfield_update"
      end
      # resource path
      local_var_path = '/tracking_fields/{fieldId}'.sub('{' + 'fieldId' + '}', field_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingFieldApi#trackingfield_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
