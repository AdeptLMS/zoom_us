=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module ZoomUs
  class Meetings
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List Past Meeting Files
    # List files sent via in-meeting chat during a meeting. The in-meeting files are deleted after 24 hours of the meeting completion time.  <br><br> **Scope:** `meeting:read`, `meeting:read:admin`<br>
    # @param meeting_id The meeting ID.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20084]
    def list_past_meeting_files(meeting_id, opts = {})
      data, _status_code, _headers = list_past_meeting_files_with_http_info(meeting_id, opts)
      data
    end

    # List Past Meeting Files
    # List files sent via in-meeting chat during a meeting. The in-meeting files are deleted after 24 hours of the meeting completion time.  &lt;br&gt;&lt;br&gt; **Scope:** &#x60;meeting:read&#x60;, &#x60;meeting:read:admin&#x60;&lt;br&gt;
    # @param meeting_id The meeting ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20084, Fixnum, Hash)>] InlineResponse20084 data, response status code and response headers
    def list_past_meeting_files_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.list_past_meeting_files ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsApi.list_past_meeting_files"
      end
      # resource path
      local_var_path = '/past_meetings/{meetingId}/files'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20084')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#list_past_meeting_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Past Meeting's Poll Results
    # [Polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) allow the meeting host to survey attendees. Use this API to list poll results of a meeting.<br><br>  **Scopes**: `meeting:read:admin`, `meeting:read`<br>  **Prerequisites**:<br> * Host user type must be **Pro**. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
    # @param meeting_id The meeting ID or meeting UUID. If   meeting ID is provided, it will take the last meeting instance.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20083]
    def list_past_meeting_polls(meeting_id, opts = {})
      data, _status_code, _headers = list_past_meeting_polls_with_http_info(meeting_id, opts)
      data
    end

    # List Past Meeting&#39;s Poll Results
    # [Polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) allow the meeting host to survey attendees. Use this API to list poll results of a meeting.&lt;br&gt;&lt;br&gt;  **Scopes**: &#x60;meeting:read:admin&#x60;, &#x60;meeting:read&#x60;&lt;br&gt;  **Prerequisites**:&lt;br&gt; * Host user type must be **Pro**. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
    # @param meeting_id The meeting ID or meeting UUID. If   meeting ID is provided, it will take the last meeting instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20083, Fixnum, Hash)>] InlineResponse20083 data, response status code and response headers
    def list_past_meeting_polls_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.list_past_meeting_polls ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsApi.list_past_meeting_polls"
      end
      # resource path
      local_var_path = '/past_meetings/{meetingId}/polls'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20083')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#list_past_meeting_polls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Meeting
    # Retrieve the details of a meeting.<br><br> **Scopes:** `meeting:read:admin` `meeting:read`<br>
    # @param meeting_id The meeting ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id Meeting occurrence id
    # @return [InlineResponse20022]
    def meeting(meeting_id, opts = {})
      data, _status_code, _headers = meeting_with_http_info(meeting_id, opts)
      data
    end

    # Get a Meeting
    # Retrieve the details of a meeting.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:read:admin&#x60; &#x60;meeting:read&#x60;&lt;br&gt;
    # @param meeting_id The meeting ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id Meeting occurrence id
    # @return [Array<(InlineResponse20022, Fixnum, Hash)>] InlineResponse20022 data, response status code and response headers
    def meeting_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.meeting ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsApi.meeting"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'occurrence_id'] = opts[:'occurrence_id'] if !opts[:'occurrence_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20022')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#meeting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Meeting
    # Create a meeting for a user. <br>This API has a daily rate limit of 100 requests per day. Therefore, only 100 **Create a Meeting** API requests are permitted within a 24 hour window for a user.<br>  <aside>The <code>start_url</code> of a meeting is a URL using which a host or an alternative host can start a meeting. The expiration time for the <code>start_url</code> field is two hours for all regular users.    For users created using the <code>custCreate</code> option via the [Create Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usercreate) API, the expiration time of the <code>start_url</code> field is 90 days.   For security reasons, the recommended way to retrieve the updated value for the <code>start_url</code> field programmatically (after expiry) is by calling the [Retrieve a Meeting API](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meeting) and referring to the value of the <code>start_url</code> field in the response.</aside><br><br> Scopes: `meeting:write:admin` `meeting:write`
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param body Meeting object.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20110]
    def meeting_create(user_id, body, opts = {})
      data, _status_code, _headers = meeting_create_with_http_info(user_id, body, opts)
      data
    end

    # Create a Meeting
    # Create a meeting for a user. &lt;br&gt;This API has a daily rate limit of 100 requests per day. Therefore, only 100 **Create a Meeting** API requests are permitted within a 24 hour window for a user.&lt;br&gt;  &lt;aside&gt;The &lt;code&gt;start_url&lt;/code&gt; of a meeting is a URL using which a host or an alternative host can start a meeting. The expiration time for the &lt;code&gt;start_url&lt;/code&gt; field is two hours for all regular users.    For users created using the &lt;code&gt;custCreate&lt;/code&gt; option via the [Create Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usercreate) API, the expiration time of the &lt;code&gt;start_url&lt;/code&gt; field is 90 days.   For security reasons, the recommended way to retrieve the updated value for the &lt;code&gt;start_url&lt;/code&gt; field programmatically (after expiry) is by calling the [Retrieve a Meeting API](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meeting) and referring to the value of the &lt;code&gt;start_url&lt;/code&gt; field in the response.&lt;/aside&gt;&lt;br&gt;&lt;br&gt; Scopes: &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param body Meeting object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20110, Fixnum, Hash)>] InlineResponse20110 data, response status code and response headers
    def meeting_create_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.meeting_create ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling MeetingsApi.meeting_create"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MeetingsApi.meeting_create"
      end
      # resource path
      local_var_path = '/users/{userId}/meetings'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20110')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#meeting_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Meeting
    # Delete a meeting.<br><br> **Scopes:** `meeting:write:admin` `meeting:write`<br>
    # @param meeting_id The meeting ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id The meeting occurrence ID.
    # @option opts [BOOLEAN] :schedule_for_reminder &#x60;true&#x60;: Notify host and alternative host about the meeting cancellation via email. &#x60;false&#x60;: Do not send any email notification.
    # @return [nil]
    def meeting_delete(meeting_id, opts = {})
      meeting_delete_with_http_info(meeting_id, opts)
      nil
    end

    # Delete a Meeting
    # Delete a meeting.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;&lt;br&gt;
    # @param meeting_id The meeting ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id The meeting occurrence ID.
    # @option opts [BOOLEAN] :schedule_for_reminder &#x60;true&#x60;: Notify host and alternative host about the meeting cancellation via email. &#x60;false&#x60;: Do not send any email notification.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def meeting_delete_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.meeting_delete ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsApi.meeting_delete"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'occurrence_id'] = opts[:'occurrence_id'] if !opts[:'occurrence_id'].nil?
      query_params[:'schedule_for_reminder'] = opts[:'schedule_for_reminder'] if !opts[:'schedule_for_reminder'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#meeting_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Meeting Invitation
    # Retrieve the meeting invite note that was sent for a specific meeting.<br><br> **Scopes:** `meeting:read:admin` `meeting:read`<br>
    # @param meeting_id The meeting ID.
    # @param [Hash] opts the optional parameters
    # @return [MeetingInvitation]
    def meeting_invitation(meeting_id, opts = {})
      data, _status_code, _headers = meeting_invitation_with_http_info(meeting_id, opts)
      data
    end

    # Get Meeting Invitation
    # Retrieve the meeting invite note that was sent for a specific meeting.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:read:admin&#x60; &#x60;meeting:read&#x60;&lt;br&gt;
    # @param meeting_id The meeting ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MeetingInvitation, Fixnum, Hash)>] MeetingInvitation data, response status code and response headers
    def meeting_invitation_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.meeting_invitation ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsApi.meeting_invitation"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/invitation'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MeetingInvitation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#meeting_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Live Stream Status
    # Zoom allows users to [live stream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to update the status of a meeting's live stream.<br><br> **Prerequisites:**<br> * Meeting host must have a Pro license.<br> **Scopes:** `meeting:write:admin` `meeting:write`<br>
    # @param meeting_id The meeting ID.
    # @param body Meeting
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def meeting_live_stream_status_update(meeting_id, body, opts = {})
      meeting_live_stream_status_update_with_http_info(meeting_id, body, opts)
      nil
    end

    # Update Live Stream Status
    # Zoom allows users to [live stream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to update the status of a meeting&#39;s live stream.&lt;br&gt;&lt;br&gt; **Prerequisites:**&lt;br&gt; * Meeting host must have a Pro license.&lt;br&gt; **Scopes:** &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;&lt;br&gt;
    # @param meeting_id The meeting ID.
    # @param body Meeting
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def meeting_live_stream_status_update_with_http_info(meeting_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.meeting_live_stream_status_update ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsApi.meeting_live_stream_status_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MeetingsApi.meeting_live_stream_status_update"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/livestream/status'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#meeting_live_stream_status_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Live Stream
    # Zoom allows users to [live stream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to update a meeting's live stream information.<br><br> **Prerequisites:**<br> * Meeting host must have a Pro license.<br> **Scopes:** `meeting:write:admin` `meeting:write`<br>
    # @param meeting_id The meeting ID.
    # @param body Meeting
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def meeting_live_stream_update(meeting_id, body, opts = {})
      meeting_live_stream_update_with_http_info(meeting_id, body, opts)
      nil
    end

    # Update Live Stream
    # Zoom allows users to [live stream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to update a meeting&#39;s live stream information.&lt;br&gt;&lt;br&gt; **Prerequisites:**&lt;br&gt; * Meeting host must have a Pro license.&lt;br&gt; **Scopes:** &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;&lt;br&gt;
    # @param meeting_id The meeting ID.
    # @param body Meeting
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def meeting_live_stream_update_with_http_info(meeting_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.meeting_live_stream_update ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsApi.meeting_live_stream_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MeetingsApi.meeting_live_stream_update"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/livestream'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#meeting_live_stream_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Meeting Poll
    # Polls allow the meeting host to survey attendees. Use this API to create a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.<br><br>  **Scopes**: `meeting:write:admin` `meeting:write`<br>    **Prerequisites**:<br> * Host user type must be **Pro**. * Polling feature should be enabled in the host's account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
    # @param meeting_id The meeting ID.
    # @param body Meeting poll object
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20112]
    def meeting_poll_create(meeting_id, body, opts = {})
      data, _status_code, _headers = meeting_poll_create_with_http_info(meeting_id, body, opts)
      data
    end

    # Create a Meeting Poll
    # Polls allow the meeting host to survey attendees. Use this API to create a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.&lt;br&gt;&lt;br&gt;  **Scopes**: &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;&lt;br&gt;    **Prerequisites**:&lt;br&gt; * Host user type must be **Pro**. * Polling feature should be enabled in the host&#39;s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
    # @param meeting_id The meeting ID.
    # @param body Meeting poll object
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20112, Fixnum, Hash)>] InlineResponse20112 data, response status code and response headers
    def meeting_poll_create_with_http_info(meeting_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.meeting_poll_create ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsApi.meeting_poll_create"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MeetingsApi.meeting_poll_create"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/polls'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20112')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#meeting_poll_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Meeting Poll
    # Polls allow the meeting host to survey attendees. Use this API to delete a meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).<br> **Scopes**: `meeting:write:admin` `meeting:write`<br>   **Prerequisites**:<br> * Host user type must be **Pro**. * Polling feature should be enabled in the host's account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
    # @param meeting_id The meeting ID.
    # @param poll_id The poll ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def meeting_poll_delete(meeting_id, poll_id, opts = {})
      meeting_poll_delete_with_http_info(meeting_id, poll_id, opts)
      nil
    end

    # Delete a Meeting Poll
    # Polls allow the meeting host to survey attendees. Use this API to delete a meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).&lt;br&gt; **Scopes**: &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;&lt;br&gt;   **Prerequisites**:&lt;br&gt; * Host user type must be **Pro**. * Polling feature should be enabled in the host&#39;s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
    # @param meeting_id The meeting ID.
    # @param poll_id The poll ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def meeting_poll_delete_with_http_info(meeting_id, poll_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.meeting_poll_delete ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsApi.meeting_poll_delete"
      end
      # verify the required parameter 'poll_id' is set
      if @api_client.config.client_side_validation && poll_id.nil?
        fail ArgumentError, "Missing the required parameter 'poll_id' when calling MeetingsApi.meeting_poll_delete"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/polls/{pollId}'.sub('{' + 'meetingId' + '}', meeting_id.to_s).sub('{' + 'pollId' + '}', poll_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#meeting_poll_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Meeting Poll
    # Polls allow the meeting host to survey attendees. Use this API to get information about a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).<br><br> **Scopes**: `meeting:read:admin` `meeting:read`<br>
    # @param meeting_id The meeting ID.
    # @param poll_id The poll ID
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20112]
    def meeting_poll_get(meeting_id, poll_id, opts = {})
      data, _status_code, _headers = meeting_poll_get_with_http_info(meeting_id, poll_id, opts)
      data
    end

    # Get a Meeting Poll
    # Polls allow the meeting host to survey attendees. Use this API to get information about a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).&lt;br&gt;&lt;br&gt; **Scopes**: &#x60;meeting:read:admin&#x60; &#x60;meeting:read&#x60;&lt;br&gt;
    # @param meeting_id The meeting ID.
    # @param poll_id The poll ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20112, Fixnum, Hash)>] InlineResponse20112 data, response status code and response headers
    def meeting_poll_get_with_http_info(meeting_id, poll_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.meeting_poll_get ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsApi.meeting_poll_get"
      end
      # verify the required parameter 'poll_id' is set
      if @api_client.config.client_side_validation && poll_id.nil?
        fail ArgumentError, "Missing the required parameter 'poll_id' when calling MeetingsApi.meeting_poll_get"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/polls/{pollId}'.sub('{' + 'meetingId' + '}', meeting_id.to_s).sub('{' + 'pollId' + '}', poll_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20112')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#meeting_poll_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Meeting Poll
    # Polls allow the meeting host to survey attendees. Use this API to update information of a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings)<br><br> **Scopes**: `meeting:write:admin` `meeting:write`
    # @param meeting_id The meeting ID.
    # @param poll_id The poll ID
    # @param body Meeting Poll
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def meeting_poll_update(meeting_id, poll_id, body, opts = {})
      meeting_poll_update_with_http_info(meeting_id, poll_id, body, opts)
      nil
    end

    # Update a Meeting Poll
    # Polls allow the meeting host to survey attendees. Use this API to update information of a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings)&lt;br&gt;&lt;br&gt; **Scopes**: &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;
    # @param meeting_id The meeting ID.
    # @param poll_id The poll ID
    # @param body Meeting Poll
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def meeting_poll_update_with_http_info(meeting_id, poll_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.meeting_poll_update ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsApi.meeting_poll_update"
      end
      # verify the required parameter 'poll_id' is set
      if @api_client.config.client_side_validation && poll_id.nil?
        fail ArgumentError, "Missing the required parameter 'poll_id' when calling MeetingsApi.meeting_poll_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MeetingsApi.meeting_poll_update"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/polls/{pollId}'.sub('{' + 'meetingId' + '}', meeting_id.to_s).sub('{' + 'pollId' + '}', poll_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#meeting_poll_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Meeting Polls
    # Polls allow the meeting host to survey attendees. Use this API to list [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) of a meeting.<br><br>  **Scopes**: `meeting:read:admin` `meeting:read`<br>   **Prerequisites**:<br> * Host user type must be **Pro**. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
    # @param meeting_id The meeting ID.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def meeting_polls(meeting_id, opts = {})
      data, _status_code, _headers = meeting_polls_with_http_info(meeting_id, opts)
      data
    end

    # List Meeting Polls
    # Polls allow the meeting host to survey attendees. Use this API to list [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) of a meeting.&lt;br&gt;&lt;br&gt;  **Scopes**: &#x60;meeting:read:admin&#x60; &#x60;meeting:read&#x60;&lt;br&gt;   **Prerequisites**:&lt;br&gt; * Host user type must be **Pro**. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
    # @param meeting_id The meeting ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def meeting_polls_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.meeting_polls ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsApi.meeting_polls"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/polls'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#meeting_polls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add Meeting Registrant
    # Register a participant for a meeting.<br><br> **Scopes:** `meeting:write:admin` `meeting:write`
    # @param meeting_id The meeting ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_ids Occurrence IDs. You can find these with the meeting get API. Multiple values separated by comma.
    # @return [InlineResponse20111]
    def meeting_registrant_create(meeting_id, body, opts = {})
      data, _status_code, _headers = meeting_registrant_create_with_http_info(meeting_id, body, opts)
      data
    end

    # Add Meeting Registrant
    # Register a participant for a meeting.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;
    # @param meeting_id The meeting ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_ids Occurrence IDs. You can find these with the meeting get API. Multiple values separated by comma.
    # @return [Array<(InlineResponse20111, Fixnum, Hash)>] InlineResponse20111 data, response status code and response headers
    def meeting_registrant_create_with_http_info(meeting_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.meeting_registrant_create ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsApi.meeting_registrant_create"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MeetingsApi.meeting_registrant_create"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/registrants'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'occurrence_ids'] = opts[:'occurrence_ids'] if !opts[:'occurrence_ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20111')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#meeting_registrant_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Registration Questions
    # Update registration questions that will be displayed to users while [registering for a meeeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).<br><br> **Scopes:** `meeting:write`, `meeting:write:admin`<br>
    # @param meeting_id The meeting ID.
    # @param body Meeting Registrant Questions
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def meeting_registrant_question_update(meeting_id, body, opts = {})
      meeting_registrant_question_update_with_http_info(meeting_id, body, opts)
      nil
    end

    # Update Registration Questions
    # Update registration questions that will be displayed to users while [registering for a meeeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:write&#x60;, &#x60;meeting:write:admin&#x60;&lt;br&gt;
    # @param meeting_id The meeting ID.
    # @param body Meeting Registrant Questions
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def meeting_registrant_question_update_with_http_info(meeting_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.meeting_registrant_question_update ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsApi.meeting_registrant_question_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MeetingsApi.meeting_registrant_question_update"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/registrants/questions'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#meeting_registrant_question_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Meeting Registrant Status
    # Update a meeting registrant's status by either approving, cancelling or denying a registrant from joining the meeting.<br><br> **Scopes:** `meeting:write:admin` `meeting:write`
    # @param meeting_id The meeting ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id The meeting occurrence ID.
    # @return [nil]
    def meeting_registrant_status(meeting_id, body, opts = {})
      meeting_registrant_status_with_http_info(meeting_id, body, opts)
      nil
    end

    # Update Meeting Registrant Status
    # Update a meeting registrant&#39;s status by either approving, cancelling or denying a registrant from joining the meeting.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;
    # @param meeting_id The meeting ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id The meeting occurrence ID.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def meeting_registrant_status_with_http_info(meeting_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.meeting_registrant_status ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsApi.meeting_registrant_status"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MeetingsApi.meeting_registrant_status"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/registrants/status'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'occurrence_id'] = opts[:'occurrence_id'] if !opts[:'occurrence_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#meeting_registrant_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Meeting Registrants
    # A host or a user with admin permission can require [registration for a Zoom meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings). Use this API to list users that have registered for a meeting.<br><br> **Scopes**: `meeting:read:admin` `meeting:read`<br>
    # @param meeting_id The meeting ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id The meeting occurrence ID.
    # @option opts [String] :status The registrant status:&lt;br&gt;&#x60;pending&#x60; - Registrant&#39;s status is pending.&lt;br&gt;&#x60;approved&#x60; - Registrant&#39;s status is approved.&lt;br&gt;&#x60;denied&#x60; - Registrant&#39;s status is denied. (default to approved)
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [Integer] :page_number The current page number of returned records. (default to 1)
    # @return [RegistrationList]
    def meeting_registrants(meeting_id, opts = {})
      data, _status_code, _headers = meeting_registrants_with_http_info(meeting_id, opts)
      data
    end

    # List Meeting Registrants
    # A host or a user with admin permission can require [registration for a Zoom meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings). Use this API to list users that have registered for a meeting.&lt;br&gt;&lt;br&gt; **Scopes**: &#x60;meeting:read:admin&#x60; &#x60;meeting:read&#x60;&lt;br&gt;
    # @param meeting_id The meeting ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id The meeting occurrence ID.
    # @option opts [String] :status The registrant status:&lt;br&gt;&#x60;pending&#x60; - Registrant&#39;s status is pending.&lt;br&gt;&#x60;approved&#x60; - Registrant&#39;s status is approved.&lt;br&gt;&#x60;denied&#x60; - Registrant&#39;s status is denied.
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [Integer] :page_number The current page number of returned records.
    # @return [Array<(RegistrationList, Fixnum, Hash)>] RegistrationList data, response status code and response headers
    def meeting_registrants_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.meeting_registrants ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsApi.meeting_registrants"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['pending', 'approved', 'denied'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of pending, approved, denied'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MeetingsApi.meeting_registrants, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/meetings/{meetingId}/registrants'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'occurrence_id'] = opts[:'occurrence_id'] if !opts[:'occurrence_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page_number'] = opts[:'page_number'] if !opts[:'page_number'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#meeting_registrants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Registration Questions
    # List registration questions that will be displayed to users while [registering for a meeeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).<br>  **Scopes:** `meeting:read`, `meeting:read:admin`<br>
    # @param meeting_id The meeting ID.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20025]
    def meeting_registrants_questions_get(meeting_id, opts = {})
      data, _status_code, _headers = meeting_registrants_questions_get_with_http_info(meeting_id, opts)
      data
    end

    # List Registration Questions
    # List registration questions that will be displayed to users while [registering for a meeeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).&lt;br&gt;  **Scopes:** &#x60;meeting:read&#x60;, &#x60;meeting:read:admin&#x60;&lt;br&gt;
    # @param meeting_id The meeting ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20025, Fixnum, Hash)>] InlineResponse20025 data, response status code and response headers
    def meeting_registrants_questions_get_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.meeting_registrants_questions_get ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsApi.meeting_registrants_questions_get"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/registrants/questions'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20025')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#meeting_registrants_questions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Meeting Status
    # End a meeting by updating its status.<br><br> **Scopes:** `meeting:write:admin` `meeting:write`
    # @param meeting_id The meeting ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def meeting_status(meeting_id, body, opts = {})
      meeting_status_with_http_info(meeting_id, body, opts)
      nil
    end

    # Update Meeting Status
    # End a meeting by updating its status.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;
    # @param meeting_id The meeting ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def meeting_status_with_http_info(meeting_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.meeting_status ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsApi.meeting_status"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MeetingsApi.meeting_status"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/status'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#meeting_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Meeting
    # Update the details of a meeting.<br>This API has a rate limit of 100 requests per day. Therefore, a meeting can only be updated for a maximum of 100 times within a 24 hour window.<br> **Scopes:** `meeting:write:admin` `meeting:write`<br>
    # @param meeting_id The meeting ID.
    # @param body Meeting
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id Meeting occurrence id. Support change of agenda, start_time, duration, settings: {host_video, participant_video, join_before_host, mute_upon_entry, waiting_room, watermark, auto_recording}
    # @return [nil]
    def meeting_update(meeting_id, body, opts = {})
      meeting_update_with_http_info(meeting_id, body, opts)
      nil
    end

    # Update a Meeting
    # Update the details of a meeting.&lt;br&gt;This API has a rate limit of 100 requests per day. Therefore, a meeting can only be updated for a maximum of 100 times within a 24 hour window.&lt;br&gt; **Scopes:** &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;&lt;br&gt;
    # @param meeting_id The meeting ID.
    # @param body Meeting
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id Meeting occurrence id. Support change of agenda, start_time, duration, settings: {host_video, participant_video, join_before_host, mute_upon_entry, waiting_room, watermark, auto_recording}
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def meeting_update_with_http_info(meeting_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.meeting_update ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsApi.meeting_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MeetingsApi.meeting_update"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'occurrence_id'] = opts[:'occurrence_id'] if !opts[:'occurrence_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#meeting_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Meetings
    # List all the meetings that were scheduled for a user (meeting host).<br><br> **Scopes:** `meeting:read:admin` `meeting:read`<br>
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The meeting types: &lt;br&gt;&#x60;scheduled&#x60; - All the scheduled meetings.&lt;br&gt;&#x60;live&#x60; - All the live meetings.&lt;br&gt;&#x60;upcoming&#x60; - All the upcoming meetings. (default to live)
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [Integer] :page_number The current page number of returned records. (default to 1)
    # @return [GroupList]
    def meetings(user_id, opts = {})
      data, _status_code, _headers = meetings_with_http_info(user_id, opts)
      data
    end

    # List Meetings
    # List all the meetings that were scheduled for a user (meeting host).&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:read:admin&#x60; &#x60;meeting:read&#x60;&lt;br&gt;
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The meeting types: &lt;br&gt;&#x60;scheduled&#x60; - All the scheduled meetings.&lt;br&gt;&#x60;live&#x60; - All the live meetings.&lt;br&gt;&#x60;upcoming&#x60; - All the upcoming meetings.
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [Integer] :page_number The current page number of returned records.
    # @return [Array<(GroupList, Fixnum, Hash)>] GroupList data, response status code and response headers
    def meetings_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.meetings ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling MeetingsApi.meetings"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['scheduled', 'live', 'upcoming'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of scheduled, live, upcoming'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MeetingsApi.meetings, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/users/{userId}/meetings'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page_number'] = opts[:'page_number'] if !opts[:'page_number'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#meetings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Past Meeting Details
    # Get details on a past meeting. <br><br> **Scopes:** `meeting:read:admin` `meeting:read`  > **Note**: Please double encode your UUID when using this API if the UUID begins with a '/'or contains '//' in it.
    # @param meeting_uuid The meeting UUID. Please double encode your UUID when using it for other API calls if the UUID begins with a &#39;/&#39;or contains &#39;//&#39; in it.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20023]
    def past_meeting_details(meeting_uuid, opts = {})
      data, _status_code, _headers = past_meeting_details_with_http_info(meeting_uuid, opts)
      data
    end

    # Get Past Meeting Details
    # Get details on a past meeting. &lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:read:admin&#x60; &#x60;meeting:read&#x60;  &gt; **Note**: Please double encode your UUID when using this API if the UUID begins with a &#39;/&#39;or contains &#39;//&#39; in it.
    # @param meeting_uuid The meeting UUID. Please double encode your UUID when using it for other API calls if the UUID begins with a &#39;/&#39;or contains &#39;//&#39; in it.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20023, Fixnum, Hash)>] InlineResponse20023 data, response status code and response headers
    def past_meeting_details_with_http_info(meeting_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.past_meeting_details ...'
      end
      # verify the required parameter 'meeting_uuid' is set
      if @api_client.config.client_side_validation && meeting_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_uuid' when calling MeetingsApi.past_meeting_details"
      end
      # resource path
      local_var_path = '/past_meetings/{meetingUUID}'.sub('{' + 'meetingUUID' + '}', meeting_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20023')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#past_meeting_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Past Meeting Participants
    # Retrieve information on participants from a past meeting. <br><br> **Scopes:** `meeting:read:admin` `meeting:read`  **Prerequisites:**<br> * Paid account on a Pro or higher plan.  <br> <br>  **Note**: Please double encode your UUID when using this API if the UUID begins with a '/'or contains '//' in it.
    # @param meeting_uuid The meeting UUID. Please double encode your UUID when using it for other API calls if the UUID begins with a &#39;/&#39;or contains &#39;//&#39; in it.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [InlineResponse20024]
    def past_meeting_participants(meeting_uuid, opts = {})
      data, _status_code, _headers = past_meeting_participants_with_http_info(meeting_uuid, opts)
      data
    end

    # Get Past Meeting Participants
    # Retrieve information on participants from a past meeting. &lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:read:admin&#x60; &#x60;meeting:read&#x60;  **Prerequisites:**&lt;br&gt; * Paid account on a Pro or higher plan.  &lt;br&gt; &lt;br&gt;  **Note**: Please double encode your UUID when using this API if the UUID begins with a &#39;/&#39;or contains &#39;//&#39; in it.
    # @param meeting_uuid The meeting UUID. Please double encode your UUID when using it for other API calls if the UUID begins with a &#39;/&#39;or contains &#39;//&#39; in it.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [Array<(InlineResponse20024, Fixnum, Hash)>] InlineResponse20024 data, response status code and response headers
    def past_meeting_participants_with_http_info(meeting_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.past_meeting_participants ...'
      end
      # verify the required parameter 'meeting_uuid' is set
      if @api_client.config.client_side_validation && meeting_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_uuid' when calling MeetingsApi.past_meeting_participants"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling MeetingsApi.past_meeting_participants, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/past_meetings/{meetingUUID}/participants'.sub('{' + 'meetingUUID' + '}', meeting_uuid.to_s)

      # query parameters
      query_params = {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20024')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#past_meeting_participants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Ended Meeting Instances
    # Get a list of ended meeting instances<br><br> **Scopes:** `meeting:read:admin` `meeting:read`<br>
    # @param meeting_id The meeting ID.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def past_meetings(meeting_id, opts = {})
      data, _status_code, _headers = past_meetings_with_http_info(meeting_id, opts)
      data
    end

    # List Ended Meeting Instances
    # Get a list of ended meeting instances&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:read:admin&#x60; &#x60;meeting:read&#x60;&lt;br&gt;
    # @param meeting_id The meeting ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def past_meetings_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.past_meetings ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling MeetingsApi.past_meetings"
      end
      # resource path
      local_var_path = '/past_meetings/{meetingId}/instances'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#past_meetings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
