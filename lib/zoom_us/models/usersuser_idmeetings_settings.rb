=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'date'

module ZoomUs
  module Models
    # Meeting settings.
    class UsersuserIdmeetingsSettings
      # Start video when the host joins the meeting.
      attr_accessor :host_video

      # Start video when participants join the meeting.
      attr_accessor :participant_video

      # Host meeting in China.
      attr_accessor :cn_meeting

      # Host meeting in India.
      attr_accessor :in_meeting

      # Allow participants to join the meeting before the host starts the meeting. Only used for scheduled or recurring meetings.
      attr_accessor :join_before_host

      # Mute participants upon entry.
      attr_accessor :mute_upon_entry

      # Add watermark when viewing a shared screen.
      attr_accessor :watermark

      # Use Personal Meeting ID instead of an automatically generated meeting ID. It can only be used for scheduled meetings, instant meetings and recurring meetings with no fixed time.
      attr_accessor :use_pmi

      # `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
      attr_accessor :approval_type

      # Registration type. Used for recurring meeting with fixed time only. <br>`1` Attendees register once and can attend any of the occurrences.<br>`2` Attendees need to register for each occurrence to attend.<br>`3` Attendees register once and can choose one or more occurrences to attend.
      attr_accessor :registration_type

      # Determine how participants can join the audio portion of the meeting.<br>`both` - Both Telephony and VoIP.<br>`telephony` - Telephony only.<br>`voip` - VoIP only.
      attr_accessor :audio

      # Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
      attr_accessor :auto_recording

      # Only signed in users can join this meeting.
      attr_accessor :enforce_login

      # Only signed in users with specified domains can join meetings.
      attr_accessor :enforce_login_domains

      # Alternative host's emails or IDs: multiple values separated by a comma.
      attr_accessor :alternative_hosts

      # Close registration after event date
      attr_accessor :close_registration

      # Enable waiting room
      attr_accessor :waiting_room

      # List of global dial-in countries
      attr_accessor :global_dial_in_countries

      # Contact name for registration
      attr_accessor :contact_name

      # Contact email for registration
      attr_accessor :contact_email

      # registrants email notification
      attr_accessor :registrants_email_notification

      # Only [authenticated](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) users can join meeting if the value of this field is set to `true`.
      attr_accessor :meeting_authentication

      # Specify the authentication type for users to join a meeting with`meeting_authentication` setting set to `true`. The value of this field can be retrieved from the `id` field within `authentication_options` array in the response of [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings).
      attr_accessor :authentication_option

      # Meeting authentication domains. This option, allows you to specify the rule so that Zoom users, whose email address contains a certain domain, can join the meeting. You can either provide multiple domains, using a comma in between and/or use a wildcard for listing domains.
      attr_accessor :authentication_domains

      class EnumAttributeValidator
        attr_reader :datatype
        attr_reader :allowable_values

        def initialize(datatype, allowable_values)
          @allowable_values = allowable_values.map do |value|
            case datatype.to_s
            when /Integer/i
              value.to_i
            when /Float/i
              value.to_f
            else
              value
            end
          end
        end

        def valid?(value)
          !value || allowable_values.include?(value)
        end
      end

      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :'host_video' => :'host_video',
          :'participant_video' => :'participant_video',
          :'cn_meeting' => :'cn_meeting',
          :'in_meeting' => :'in_meeting',
          :'join_before_host' => :'join_before_host',
          :'mute_upon_entry' => :'mute_upon_entry',
          :'watermark' => :'watermark',
          :'use_pmi' => :'use_pmi',
          :'approval_type' => :'approval_type',
          :'registration_type' => :'registration_type',
          :'audio' => :'audio',
          :'auto_recording' => :'auto_recording',
          :'enforce_login' => :'enforce_login',
          :'enforce_login_domains' => :'enforce_login_domains',
          :'alternative_hosts' => :'alternative_hosts',
          :'close_registration' => :'close_registration',
          :'waiting_room' => :'waiting_room',
          :'global_dial_in_countries' => :'global_dial_in_countries',
          :'contact_name' => :'contact_name',
          :'contact_email' => :'contact_email',
          :'registrants_email_notification' => :'registrants_email_notification',
          :'meeting_authentication' => :'meeting_authentication',
          :'authentication_option' => :'authentication_option',
          :'authentication_domains' => :'authentication_domains'
        }
      end

      # Attribute type mapping.
      def self.swagger_types
        {
          :'host_video' => :'BOOLEAN',
          :'participant_video' => :'BOOLEAN',
          :'cn_meeting' => :'BOOLEAN',
          :'in_meeting' => :'BOOLEAN',
          :'join_before_host' => :'BOOLEAN',
          :'mute_upon_entry' => :'BOOLEAN',
          :'watermark' => :'BOOLEAN',
          :'use_pmi' => :'BOOLEAN',
          :'approval_type' => :'Integer',
          :'registration_type' => :'Integer',
          :'audio' => :'String',
          :'auto_recording' => :'String',
          :'enforce_login' => :'BOOLEAN',
          :'enforce_login_domains' => :'String',
          :'alternative_hosts' => :'String',
          :'close_registration' => :'BOOLEAN',
          :'waiting_room' => :'BOOLEAN',
          :'global_dial_in_countries' => :'Array<String>',
          :'contact_name' => :'String',
          :'contact_email' => :'String',
          :'registrants_email_notification' => :'BOOLEAN',
          :'meeting_authentication' => :'BOOLEAN',
          :'authentication_option' => :'String',
          :'authentication_domains' => :'String'
        }
      end

      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        return unless attributes.is_a?(Hash)

        # convert string to symbol for hash key
        attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

        if attributes.has_key?(:'host_video')
          self.host_video = attributes[:'host_video']
        end

        if attributes.has_key?(:'participant_video')
          self.participant_video = attributes[:'participant_video']
        end

        if attributes.has_key?(:'cn_meeting')
          self.cn_meeting = attributes[:'cn_meeting']
        else
          self.cn_meeting = false
        end

        if attributes.has_key?(:'in_meeting')
          self.in_meeting = attributes[:'in_meeting']
        else
          self.in_meeting = false
        end

        if attributes.has_key?(:'join_before_host')
          self.join_before_host = attributes[:'join_before_host']
        else
          self.join_before_host = false
        end

        if attributes.has_key?(:'mute_upon_entry')
          self.mute_upon_entry = attributes[:'mute_upon_entry']
        else
          self.mute_upon_entry = false
        end

        if attributes.has_key?(:'watermark')
          self.watermark = attributes[:'watermark']
        else
          self.watermark = false
        end

        if attributes.has_key?(:'use_pmi')
          self.use_pmi = attributes[:'use_pmi']
        else
          self.use_pmi = false
        end

        if attributes.has_key?(:'approval_type')
          self.approval_type = attributes[:'approval_type']
        end

        if attributes.has_key?(:'registration_type')
          self.registration_type = attributes[:'registration_type']
        end

        if attributes.has_key?(:'audio')
          self.audio = attributes[:'audio']
        else
          self.audio = 'both'
        end

        if attributes.has_key?(:'auto_recording')
          self.auto_recording = attributes[:'auto_recording']
        else
          self.auto_recording = 'none'
        end

        if attributes.has_key?(:'enforce_login')
          self.enforce_login = attributes[:'enforce_login']
        end

        if attributes.has_key?(:'enforce_login_domains')
          self.enforce_login_domains = attributes[:'enforce_login_domains']
        end

        if attributes.has_key?(:'alternative_hosts')
          self.alternative_hosts = attributes[:'alternative_hosts']
        end

        if attributes.has_key?(:'close_registration')
          self.close_registration = attributes[:'close_registration']
        else
          self.close_registration = false
        end

        if attributes.has_key?(:'waiting_room')
          self.waiting_room = attributes[:'waiting_room']
        else
          self.waiting_room = false
        end

        if attributes.has_key?(:'global_dial_in_countries')
          if (value = attributes[:'global_dial_in_countries']).is_a?(Array)
            self.global_dial_in_countries = value
          end
        end

        if attributes.has_key?(:'contact_name')
          self.contact_name = attributes[:'contact_name']
        end

        if attributes.has_key?(:'contact_email')
          self.contact_email = attributes[:'contact_email']
        end

        if attributes.has_key?(:'registrants_email_notification')
          self.registrants_email_notification = attributes[:'registrants_email_notification']
        end

        if attributes.has_key?(:'meeting_authentication')
          self.meeting_authentication = attributes[:'meeting_authentication']
        end

        if attributes.has_key?(:'authentication_option')
          self.authentication_option = attributes[:'authentication_option']
        end

        if attributes.has_key?(:'authentication_domains')
          self.authentication_domains = attributes[:'authentication_domains']
        end
      end

      # Show invalid properties with the reasons. Usually used together with valid?
      # @return Array for valid properties with the reasons
      def list_invalid_properties
        invalid_properties = Array.new
        invalid_properties
      end

      # Check to see if the all the properties in the model are valid
      # @return true if the model is valid
      def valid?
        audio_validator = EnumAttributeValidator.new('String', ['both', 'telephony', 'voip'])
        return false unless audio_validator.valid?(@audio)
        auto_recording_validator = EnumAttributeValidator.new('String', ['local', 'cloud', 'none'])
        return false unless auto_recording_validator.valid?(@auto_recording)
        true
      end

      # Custom attribute writer method checking allowed values (enum).
      # @param [Object] audio Object to be assigned
      def audio=(audio)
        validator = EnumAttributeValidator.new('String', ['both', 'telephony', 'voip'])
        unless validator.valid?(audio)
          fail ArgumentError, 'invalid value for "audio", must be one of #{validator.allowable_values}.'
        end
        @audio = audio
      end

      # Custom attribute writer method checking allowed values (enum).
      # @param [Object] auto_recording Object to be assigned
      def auto_recording=(auto_recording)
        validator = EnumAttributeValidator.new('String', ['local', 'cloud', 'none'])
        unless validator.valid?(auto_recording)
          fail ArgumentError, 'invalid value for "auto_recording", must be one of #{validator.allowable_values}.'
        end
        @auto_recording = auto_recording
      end

      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(o)
        return true if self.equal?(o)
        self.class == o.class &&
          host_video == o.host_video &&
          participant_video == o.participant_video &&
          cn_meeting == o.cn_meeting &&
          in_meeting == o.in_meeting &&
          join_before_host == o.join_before_host &&
          mute_upon_entry == o.mute_upon_entry &&
          watermark == o.watermark &&
          use_pmi == o.use_pmi &&
          approval_type == o.approval_type &&
          registration_type == o.registration_type &&
          audio == o.audio &&
          auto_recording == o.auto_recording &&
          enforce_login == o.enforce_login &&
          enforce_login_domains == o.enforce_login_domains &&
          alternative_hosts == o.alternative_hosts &&
          close_registration == o.close_registration &&
          waiting_room == o.waiting_room &&
          global_dial_in_countries == o.global_dial_in_countries &&
          contact_name == o.contact_name &&
          contact_email == o.contact_email &&
          registrants_email_notification == o.registrants_email_notification &&
          meeting_authentication == o.meeting_authentication &&
          authentication_option == o.authentication_option &&
          authentication_domains == o.authentication_domains
      end

      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(o)
        self == o
      end

      # Calculates hash code according to all attributes.
      # @return [Fixnum] Hash code
      def hash
        [host_video, participant_video, cn_meeting, in_meeting, join_before_host, mute_upon_entry, watermark, use_pmi, approval_type, registration_type, audio, auto_recording, enforce_login, enforce_login_domains, alternative_hosts, close_registration, waiting_room, global_dial_in_countries, contact_name, contact_email, registrants_email_notification, meeting_authentication, authentication_option, authentication_domains].hash
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)
        self.class.swagger_types.each_pair do |key, type|
          if type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the the attribute
            # is documented as an array but the input is not
            if attributes[self.class.attribute_map[key]].is_a?(Array)
              self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
            end
          elsif !attributes[self.class.attribute_map[key]].nil?
            self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
          end # or else data not found in attributes(hash), not an issue as the data can be optional
        end

        self
      end

      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def _deserialize(type, value)
        case type.to_sym
        when :DateTime
          ::DateTime.parse(value)
        when :Date
          ::Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :BOOLEAN
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end
        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
        else # model
          temp_model = Models.const_get(type).new
          temp_model.build_from_hash(value)
        end
      end

      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end

      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end

      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = self.send(attr)
          next if value.nil?
          hash[param] = _to_hash(value)
        end
        hash
      end

      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to? :to_hash
          value.to_hash
        else
          value
        end
      end
    end
  end
end
