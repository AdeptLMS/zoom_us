=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'date'

module ZoomUs
  module Models
    # List of TSP accounts.
    class TSP
      # Conference code: numeric value, length is less than 16.
      attr_accessor :conference_code

      # Leader PIN: numeric value, length is less than 16.
      attr_accessor :leader_pin

      # List of dial in numbers.
      attr_accessor :dial_in_numbers

      # Telephony bridge
      attr_accessor :tsp_bridge

      class EnumAttributeValidator
        attr_reader :datatype
        attr_reader :allowable_values

        def initialize(datatype, allowable_values)
          @allowable_values = allowable_values.map do |value|
            case datatype.to_s
            when /Integer/i
              value.to_i
            when /Float/i
              value.to_f
            else
              value
            end
          end
        end

        def valid?(value)
          !value || allowable_values.include?(value)
        end
      end

      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :'conference_code' => :'conference_code',
          :'leader_pin' => :'leader_pin',
          :'dial_in_numbers' => :'dial_in_numbers',
          :'tsp_bridge' => :'tsp_bridge'
        }
      end

      # Attribute type mapping.
      def self.swagger_types
        {
          :'conference_code' => :'String',
          :'leader_pin' => :'String',
          :'dial_in_numbers' => :'Array<UsersuserIdtspDialInNumbers>',
          :'tsp_bridge' => :'String'
        }
      end

      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        return unless attributes.is_a?(Hash)

        # convert string to symbol for hash key
        attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

        if attributes.has_key?(:'conference_code')
          self.conference_code = attributes[:'conference_code']
        end

        if attributes.has_key?(:'leader_pin')
          self.leader_pin = attributes[:'leader_pin']
        end

        if attributes.has_key?(:'dial_in_numbers')
          if (value = attributes[:'dial_in_numbers']).is_a?(Array)
            self.dial_in_numbers = value
          end
        end

        if attributes.has_key?(:'tsp_bridge')
          self.tsp_bridge = attributes[:'tsp_bridge']
        end
      end

      # Show invalid properties with the reasons. Usually used together with valid?
      # @return Array for valid properties with the reasons
      def list_invalid_properties
        invalid_properties = Array.new
        if @conference_code.nil?
          invalid_properties.push('invalid value for "conference_code", conference_code cannot be nil.')
        end

        if @conference_code.to_s.length > 16
          invalid_properties.push('invalid value for "conference_code", the character length must be smaller than or equal to 16.')
        end

        if @conference_code.to_s.length < 1
          invalid_properties.push('invalid value for "conference_code", the character length must be great than or equal to 1.')
        end

        if @leader_pin.nil?
          invalid_properties.push('invalid value for "leader_pin", leader_pin cannot be nil.')
        end

        if @leader_pin.to_s.length > 16
          invalid_properties.push('invalid value for "leader_pin", the character length must be smaller than or equal to 16.')
        end

        if @leader_pin.to_s.length < 1
          invalid_properties.push('invalid value for "leader_pin", the character length must be great than or equal to 1.')
        end

        invalid_properties
      end

      # Check to see if the all the properties in the model are valid
      # @return true if the model is valid
      def valid?
        return false if @conference_code.nil?
        return false if @conference_code.to_s.length > 16
        return false if @conference_code.to_s.length < 1
        return false if @leader_pin.nil?
        return false if @leader_pin.to_s.length > 16
        return false if @leader_pin.to_s.length < 1
        tsp_bridge_validator = EnumAttributeValidator.new('String', ['US_TSP_TB', 'EU_TSP_TB'])
        return false unless tsp_bridge_validator.valid?(@tsp_bridge)
        true
      end

      # Custom attribute writer method with validation
      # @param [Object] conference_code Value to be assigned
      def conference_code=(conference_code)
        if conference_code.nil?
          fail ArgumentError, 'conference_code cannot be nil'
        end

        if conference_code.to_s.length > 16
          fail ArgumentError, 'invalid value for "conference_code", the character length must be smaller than or equal to 16.'
        end

        if conference_code.to_s.length < 1
          fail ArgumentError, 'invalid value for "conference_code", the character length must be great than or equal to 1.'
        end

        @conference_code = conference_code
      end

      # Custom attribute writer method with validation
      # @param [Object] leader_pin Value to be assigned
      def leader_pin=(leader_pin)
        if leader_pin.nil?
          fail ArgumentError, 'leader_pin cannot be nil'
        end

        if leader_pin.to_s.length > 16
          fail ArgumentError, 'invalid value for "leader_pin", the character length must be smaller than or equal to 16.'
        end

        if leader_pin.to_s.length < 1
          fail ArgumentError, 'invalid value for "leader_pin", the character length must be great than or equal to 1.'
        end

        @leader_pin = leader_pin
      end

      # Custom attribute writer method checking allowed values (enum).
      # @param [Object] tsp_bridge Object to be assigned
      def tsp_bridge=(tsp_bridge)
        validator = EnumAttributeValidator.new('String', ['US_TSP_TB', 'EU_TSP_TB'])
        unless validator.valid?(tsp_bridge)
          fail ArgumentError, 'invalid value for "tsp_bridge", must be one of #{validator.allowable_values}.'
        end
        @tsp_bridge = tsp_bridge
      end

      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(o)
        return true if self.equal?(o)
        self.class == o.class &&
          conference_code == o.conference_code &&
          leader_pin == o.leader_pin &&
          dial_in_numbers == o.dial_in_numbers &&
          tsp_bridge == o.tsp_bridge
      end

      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(o)
        self == o
      end

      # Calculates hash code according to all attributes.
      # @return [Fixnum] Hash code
      def hash
        [conference_code, leader_pin, dial_in_numbers, tsp_bridge].hash
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)
        self.class.swagger_types.each_pair do |key, type|
          if type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the the attribute
            # is documented as an array but the input is not
            if attributes[self.class.attribute_map[key]].is_a?(Array)
              self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
            end
          elsif !attributes[self.class.attribute_map[key]].nil?
            self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
          end # or else data not found in attributes(hash), not an issue as the data can be optional
        end

        self
      end

      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def _deserialize(type, value)
        case type.to_sym
        when :DateTime
          ::DateTime.parse(value)
        when :Date
          ::Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :BOOLEAN
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end
        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
        else # model
          temp_model = Models.const_get(type).new
          temp_model.build_from_hash(value)
        end
      end

      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end

      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end

      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = self.send(attr)
          next if value.nil?
          hash[param] = _to_hash(value)
        end
        hash
      end

      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to? :to_hash
          value.to_hash
        else
          value
        end
      end
    end
  end
end
