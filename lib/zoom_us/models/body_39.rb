=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'date'

module ZoomUs
  module Models
    class Body39
      # Robot JID created when enabling chatbot features on your marketplace app.
      attr_accessor :robot_jid

      # Unique JID of reciever. Can be a group or user.
      attr_accessor :to_jid

      # Account ID of the authorized account.
      attr_accessor :account_id

      # JSON template describing how the message should be displayed for the user. For more information please see our [\"Send Message\" templates](https://marketplace.zoom.us/docs/guides/chatbots/sending-messages#example-request).
      attr_accessor :content

      # **Optional**<br>Allow a Chatbot to send a message to a group channel, but have only one designated person in that group channel see the message by providing the person's UserID in this field.
      attr_accessor :visible_to_user

      # **Optional**<br> The UserJID of the user on whose behalf the message is being sent. Use this field to prevent members of a channel from getting notifications that were set up by a user who has left the channel.
      attr_accessor :user_jid

      # **Optional**<br> Applies the markdown parser to your chatbot message if the value of this field is set to `true`.<br> To learn more, refer to the Chatbot message [markdown reference](https://marketplace.zoom.us/docs/guides/chatbots/customizing-messages/message-with-markdown).
      attr_accessor :is_markdown_support

      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :'robot_jid' => :'robot_jid',
          :'to_jid' => :'to_jid',
          :'account_id' => :'account_id',
          :'content' => :'content',
          :'visible_to_user' => :'visible_to_user',
          :'user_jid' => :'user_jid',
          :'is_markdown_support' => :'is_markdown_support'
        }
      end

      # Attribute type mapping.
      def self.swagger_types
        {
          :'robot_jid' => :'String',
          :'to_jid' => :'String',
          :'account_id' => :'String',
          :'content' => :'Object',
          :'visible_to_user' => :'String',
          :'user_jid' => :'String',
          :'is_markdown_support' => :'BOOLEAN'
        }
      end

      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        return unless attributes.is_a?(Hash)

        # convert string to symbol for hash key
        attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

        if attributes.has_key?(:'robot_jid')
          self.robot_jid = attributes[:'robot_jid']
        end

        if attributes.has_key?(:'to_jid')
          self.to_jid = attributes[:'to_jid']
        end

        if attributes.has_key?(:'account_id')
          self.account_id = attributes[:'account_id']
        end

        if attributes.has_key?(:'content')
          self.content = attributes[:'content']
        end

        if attributes.has_key?(:'visible_to_user')
          self.visible_to_user = attributes[:'visible_to_user']
        end

        if attributes.has_key?(:'user_jid')
          self.user_jid = attributes[:'user_jid']
        end

        if attributes.has_key?(:'is_markdown_support')
          self.is_markdown_support = attributes[:'is_markdown_support']
        end
      end

      # Show invalid properties with the reasons. Usually used together with valid?
      # @return Array for valid properties with the reasons
      def list_invalid_properties
        invalid_properties = Array.new
        if @robot_jid.nil?
          invalid_properties.push('invalid value for "robot_jid", robot_jid cannot be nil.')
        end

        if @to_jid.nil?
          invalid_properties.push('invalid value for "to_jid", to_jid cannot be nil.')
        end

        if @account_id.nil?
          invalid_properties.push('invalid value for "account_id", account_id cannot be nil.')
        end

        if @content.nil?
          invalid_properties.push('invalid value for "content", content cannot be nil.')
        end

        invalid_properties
      end

      # Check to see if the all the properties in the model are valid
      # @return true if the model is valid
      def valid?
        return false if @robot_jid.nil?
        return false if @to_jid.nil?
        return false if @account_id.nil?
        return false if @content.nil?
        true
      end

      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(o)
        return true if self.equal?(o)
        self.class == o.class &&
          robot_jid == o.robot_jid &&
          to_jid == o.to_jid &&
          account_id == o.account_id &&
          content == o.content &&
          visible_to_user == o.visible_to_user &&
          user_jid == o.user_jid &&
          is_markdown_support == o.is_markdown_support
      end

      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(o)
        self == o
      end

      # Calculates hash code according to all attributes.
      # @return [Fixnum] Hash code
      def hash
        [robot_jid, to_jid, account_id, content, visible_to_user, user_jid, is_markdown_support].hash
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)
        self.class.swagger_types.each_pair do |key, type|
          if type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the the attribute
            # is documented as an array but the input is not
            if attributes[self.class.attribute_map[key]].is_a?(Array)
              self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
            end
          elsif !attributes[self.class.attribute_map[key]].nil?
            self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
          end # or else data not found in attributes(hash), not an issue as the data can be optional
        end

        self
      end

      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def _deserialize(type, value)
        case type.to_sym
        when :DateTime
          ::DateTime.parse(value)
        when :Date
          ::Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :BOOLEAN
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end
        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
        else # model
          temp_model = Models.const_get(type).new
          temp_model.build_from_hash(value)
        end
      end

      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end

      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end

      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = self.send(attr)
          next if value.nil?
          hash[param] = _to_hash(value)
        end
        hash
      end

      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to? :to_hash
          value.to_hash
        else
          value
        end
      end
    end
  end
end
