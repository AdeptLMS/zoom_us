=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'date'

module ZoomUs
  module Models
    # Account options object.
    class Body11
      # Enable/disable the option for a Sub Account to use shared [Virtual Room Connector(s)](https://support.zoom.us/hc/en-us/articles/202134758-Getting-Started-With-Virtual-Room-Connector) that are set up by the Master Account. Virtual Room Connectors can only be used by On-prem users.
      attr_accessor :share_rc

      # Specify the IP addresses of the Room Connectors that you would like to share with the Sub Account. Multiple values can be separated by comma. If no value is provided in this field, all the Room Connectors of a Master Account will be shared with the Sub Account.   **Note:** This option can only be used if the value of `share_rc` is set to `true`.
      attr_accessor :room_connectors

      # Enable/disable the option for a Sub Account to use shared [Meeting Connector(s)](https://support.zoom.us/hc/en-us/articles/201363093-Getting-Started-with-the-Meeting-Connector) that are set up by the Master Account. Meeting Connectors can only be used by On-prem users.
      attr_accessor :share_mc

      # Specify the IP addresses of the Meeting Connectors that you would like to share with the Sub Account. Multiple values can be separated by comma. If no value is provided in this field, all the Meeting Connectors of a Master Account will be shared with the Sub Account.   **Note:** This option can only be used if the value of `share_mc` is set to `true`.
      attr_accessor :meeting_connectors

      # Payee:<br>`master` - Master account holder pays.<br>`sub` - Sub account holder pays.
      attr_accessor :pay_mode

      class EnumAttributeValidator
        attr_reader :datatype
        attr_reader :allowable_values

        def initialize(datatype, allowable_values)
          @allowable_values = allowable_values.map do |value|
            case datatype.to_s
            when /Integer/i
              value.to_i
            when /Float/i
              value.to_f
            else
              value
            end
          end
        end

        def valid?(value)
          !value || allowable_values.include?(value)
        end
      end

      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :'share_rc' => :'share_rc',
          :'room_connectors' => :'room_connectors',
          :'share_mc' => :'share_mc',
          :'meeting_connectors' => :'meeting_connectors',
          :'pay_mode' => :'pay_mode'
        }
      end

      # Attribute type mapping.
      def self.swagger_types
        {
          :'share_rc' => :'BOOLEAN',
          :'room_connectors' => :'String',
          :'share_mc' => :'BOOLEAN',
          :'meeting_connectors' => :'String',
          :'pay_mode' => :'String'
        }
      end

      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        return unless attributes.is_a?(Hash)

        # convert string to symbol for hash key
        attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

        if attributes.has_key?(:'share_rc')
          self.share_rc = attributes[:'share_rc']
        else
          self.share_rc = false
        end

        if attributes.has_key?(:'room_connectors')
          self.room_connectors = attributes[:'room_connectors']
        end

        if attributes.has_key?(:'share_mc')
          self.share_mc = attributes[:'share_mc']
        else
          self.share_mc = false
        end

        if attributes.has_key?(:'meeting_connectors')
          self.meeting_connectors = attributes[:'meeting_connectors']
        end

        if attributes.has_key?(:'pay_mode')
          self.pay_mode = attributes[:'pay_mode']
        else
          self.pay_mode = 'master'
        end
      end

      # Show invalid properties with the reasons. Usually used together with valid?
      # @return Array for valid properties with the reasons
      def list_invalid_properties
        invalid_properties = Array.new
        invalid_properties
      end

      # Check to see if the all the properties in the model are valid
      # @return true if the model is valid
      def valid?
        pay_mode_validator = EnumAttributeValidator.new('String', ['master', 'sub'])
        return false unless pay_mode_validator.valid?(@pay_mode)
        true
      end

      # Custom attribute writer method checking allowed values (enum).
      # @param [Object] pay_mode Object to be assigned
      def pay_mode=(pay_mode)
        validator = EnumAttributeValidator.new('String', ['master', 'sub'])
        unless validator.valid?(pay_mode)
          fail ArgumentError, 'invalid value for "pay_mode", must be one of #{validator.allowable_values}.'
        end
        @pay_mode = pay_mode
      end

      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(o)
        return true if self.equal?(o)
        self.class == o.class &&
          share_rc == o.share_rc &&
          room_connectors == o.room_connectors &&
          share_mc == o.share_mc &&
          meeting_connectors == o.meeting_connectors &&
          pay_mode == o.pay_mode
      end

      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(o)
        self == o
      end

      # Calculates hash code according to all attributes.
      # @return [Fixnum] Hash code
      def hash
        [share_rc, room_connectors, share_mc, meeting_connectors, pay_mode].hash
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)
        self.class.swagger_types.each_pair do |key, type|
          if type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the the attribute
            # is documented as an array but the input is not
            if attributes[self.class.attribute_map[key]].is_a?(Array)
              self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
            end
          elsif !attributes[self.class.attribute_map[key]].nil?
            self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
          end # or else data not found in attributes(hash), not an issue as the data can be optional
        end

        self
      end

      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def _deserialize(type, value)
        case type.to_sym
        when :DateTime
          ::DateTime.parse(value)
        when :Date
          ::Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :BOOLEAN
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end
        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
        else # model
          temp_model = Models.const_get(type).new
          temp_model.build_from_hash(value)
        end
      end

      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end

      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end

      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = self.send(attr)
          next if value.nil?
          hash[param] = _to_hash(value)
        end
        hash
      end

      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to? :to_hash
          value.to_hash
        else
          value
        end
      end
    end
  end
end
