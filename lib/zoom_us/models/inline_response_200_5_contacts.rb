=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'date'

module ZoomUs
  module Models
    class InlineResponse2005Contacts
      # User ID of the contact.
      attr_accessor :id

      # Email address of the contact.
      attr_accessor :email

      # First name of the contact.
      attr_accessor :first_name

      # Last name of the contact.
      attr_accessor :last_name

      # Presence status of the contact in Zoom Client. The value of this field can be one of the following: `Do_Not_Disturb`<br> `away`<br> `Available`<br> `Offline`
      attr_accessor :presence_status

      # Phone number of the user.
      attr_accessor :phone_number

      # SIP Phone number of the user. Returned only if user has SIP phone enabled.
      attr_accessor :sip_phone_number

      # Direct Number(s) of a user who has Zoom Phone license assigned.
      attr_accessor :direct_numbers

      # Extension Number of a user who has Zoom Phone license assigned.
      attr_accessor :extension_number

      # Unique Identifier of the [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) in which the user has been added. An IM Directory group is not the same as a channel. IM Directory allows administrators to assign users in their account to groups that display within the Contacts list on Zoom clients.
      attr_accessor :im_group_id

      # Name of the [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) in which the user has been added. An IM Directory group is not the same as a channel. IM Directory allows administrators to assign users in their account to groups that display within the Contacts list on Zoom clients.
      attr_accessor :im_group_name

      class EnumAttributeValidator
        attr_reader :datatype
        attr_reader :allowable_values

        def initialize(datatype, allowable_values)
          @allowable_values = allowable_values.map do |value|
            case datatype.to_s
            when /Integer/i
              value.to_i
            when /Float/i
              value.to_f
            else
              value
            end
          end
        end

        def valid?(value)
          !value || allowable_values.include?(value)
        end
      end

      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :'id' => :'id',
          :'email' => :'email',
          :'first_name' => :'first_name',
          :'last_name' => :'last_name',
          :'presence_status' => :'presence_status',
          :'phone_number' => :'phone_number',
          :'sip_phone_number' => :'sip_phone_number',
          :'direct_numbers' => :'direct_numbers',
          :'extension_number' => :'extension_number',
          :'im_group_id' => :'im_group_id',
          :'im_group_name' => :'im_group_name'
        }
      end

      # Attribute type mapping.
      def self.swagger_types
        {
          :'id' => :'String',
          :'email' => :'String',
          :'first_name' => :'String',
          :'last_name' => :'String',
          :'presence_status' => :'String',
          :'phone_number' => :'String',
          :'sip_phone_number' => :'String',
          :'direct_numbers' => :'Array<String>',
          :'extension_number' => :'String',
          :'im_group_id' => :'String',
          :'im_group_name' => :'String'
        }
      end

      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        return unless attributes.is_a?(Hash)

        # convert string to symbol for hash key
        attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

        if attributes.has_key?(:'id')
          self.id = attributes[:'id']
        end

        if attributes.has_key?(:'email')
          self.email = attributes[:'email']
        end

        if attributes.has_key?(:'first_name')
          self.first_name = attributes[:'first_name']
        end

        if attributes.has_key?(:'last_name')
          self.last_name = attributes[:'last_name']
        end

        if attributes.has_key?(:'presence_status')
          self.presence_status = attributes[:'presence_status']
        end

        if attributes.has_key?(:'phone_number')
          self.phone_number = attributes[:'phone_number']
        end

        if attributes.has_key?(:'sip_phone_number')
          self.sip_phone_number = attributes[:'sip_phone_number']
        end

        if attributes.has_key?(:'direct_numbers')
          if (value = attributes[:'direct_numbers']).is_a?(Array)
            self.direct_numbers = value
          end
        end

        if attributes.has_key?(:'extension_number')
          self.extension_number = attributes[:'extension_number']
        end

        if attributes.has_key?(:'im_group_id')
          self.im_group_id = attributes[:'im_group_id']
        end

        if attributes.has_key?(:'im_group_name')
          self.im_group_name = attributes[:'im_group_name']
        end
      end

      # Show invalid properties with the reasons. Usually used together with valid?
      # @return Array for valid properties with the reasons
      def list_invalid_properties
        invalid_properties = Array.new
        invalid_properties
      end

      # Check to see if the all the properties in the model are valid
      # @return true if the model is valid
      def valid?
        presence_status_validator = EnumAttributeValidator.new('String', ['Do_Not_Disturb', 'away', 'Available', 'Offline'])
        return false unless presence_status_validator.valid?(@presence_status)
        true
      end

      # Custom attribute writer method checking allowed values (enum).
      # @param [Object] presence_status Object to be assigned
      def presence_status=(presence_status)
        validator = EnumAttributeValidator.new('String', ['Do_Not_Disturb', 'away', 'Available', 'Offline'])
        unless validator.valid?(presence_status)
          fail ArgumentError, 'invalid value for "presence_status", must be one of #{validator.allowable_values}.'
        end
        @presence_status = presence_status
      end

      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(o)
        return true if self.equal?(o)
        self.class == o.class &&
          id == o.id &&
          email == o.email &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          presence_status == o.presence_status &&
          phone_number == o.phone_number &&
          sip_phone_number == o.sip_phone_number &&
          direct_numbers == o.direct_numbers &&
          extension_number == o.extension_number &&
          im_group_id == o.im_group_id &&
          im_group_name == o.im_group_name
      end

      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(o)
        self == o
      end

      # Calculates hash code according to all attributes.
      # @return [Fixnum] Hash code
      def hash
        [id, email, first_name, last_name, presence_status, phone_number, sip_phone_number, direct_numbers, extension_number, im_group_id, im_group_name].hash
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)
        self.class.swagger_types.each_pair do |key, type|
          if type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the the attribute
            # is documented as an array but the input is not
            if attributes[self.class.attribute_map[key]].is_a?(Array)
              self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
            end
          elsif !attributes[self.class.attribute_map[key]].nil?
            self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
          end # or else data not found in attributes(hash), not an issue as the data can be optional
        end

        self
      end

      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def _deserialize(type, value)
        case type.to_sym
        when :DateTime
          ::DateTime.parse(value)
        when :Date
          ::Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :BOOLEAN
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end
        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
        else # model
          temp_model = Models.const_get(type).new
          temp_model.build_from_hash(value)
        end
      end

      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end

      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end

      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = self.send(attr)
          next if value.nil?
          hash[param] = _to_hash(value)
        end
        hash
      end

      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to? :to_hash
          value.to_hash
        else
          value
        end
      end
    end
  end
end
