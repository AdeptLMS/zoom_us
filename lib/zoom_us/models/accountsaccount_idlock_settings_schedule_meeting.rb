=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'date'

module ZoomUs
  module Models
    class AccountsaccountIdlockSettingsScheduleMeeting
      # Start meetings with host video on.
      attr_accessor :host_video

      # Start meetings with participant video on.
      attr_accessor :participant_video

      # Determine how participants can join the audio portion of the meeting.
      attr_accessor :audio_type

      # Allow participants to join the meeting before the host arrives
      attr_accessor :join_before_host

      # Participants must always sign in before joining the scheduled meeting.
      attr_accessor :enforce_login

      attr_accessor :enforce_login_with_domains

      attr_accessor :enforce_login_domains

      attr_accessor :not_store_meeting_topic

      # This setting applies for regular meetings that do not use PMI. If enabled, a password will be generated while a host schedules a new meeting and participants will be required to enter the password before they can join the meeting.
      attr_accessor :require_password_for_scheduling_new_meetings

      # Require password for instant meetings. If you use PMI for your instant meetings, this option will be disabled.
      attr_accessor :require_password_for_instant_meetings

      # Require participants to enter password for PMI meetings.
      attr_accessor :require_password_for_pmi_meetings

      attr_accessor :meeting_authentication

      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :'host_video' => :'host_video',
          :'participant_video' => :'participant_video',
          :'audio_type' => :'audio_type',
          :'join_before_host' => :'join_before_host',
          :'enforce_login' => :'enforce_login',
          :'enforce_login_with_domains' => :'enforce_login_with_domains',
          :'enforce_login_domains' => :'enforce_login_domains',
          :'not_store_meeting_topic' => :'not_store_meeting_topic',
          :'require_password_for_scheduling_new_meetings' => :'require_password_for_scheduling_new_meetings',
          :'require_password_for_instant_meetings' => :'require_password_for_instant_meetings',
          :'require_password_for_pmi_meetings' => :'require_password_for_pmi_meetings',
          :'meeting_authentication' => :'meeting_authentication'
        }
      end

      # Attribute type mapping.
      def self.swagger_types
        {
          :'host_video' => :'BOOLEAN',
          :'participant_video' => :'BOOLEAN',
          :'audio_type' => :'BOOLEAN',
          :'join_before_host' => :'BOOLEAN',
          :'enforce_login' => :'BOOLEAN',
          :'enforce_login_with_domains' => :'BOOLEAN',
          :'enforce_login_domains' => :'String',
          :'not_store_meeting_topic' => :'BOOLEAN',
          :'require_password_for_scheduling_new_meetings' => :'BOOLEAN',
          :'require_password_for_instant_meetings' => :'BOOLEAN',
          :'require_password_for_pmi_meetings' => :'BOOLEAN',
          :'meeting_authentication' => :'BOOLEAN'
        }
      end

      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        return unless attributes.is_a?(Hash)

        # convert string to symbol for hash key
        attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

        if attributes.has_key?(:'host_video')
          self.host_video = attributes[:'host_video']
        end

        if attributes.has_key?(:'participant_video')
          self.participant_video = attributes[:'participant_video']
        end

        if attributes.has_key?(:'audio_type')
          self.audio_type = attributes[:'audio_type']
        end

        if attributes.has_key?(:'join_before_host')
          self.join_before_host = attributes[:'join_before_host']
        end

        if attributes.has_key?(:'enforce_login')
          self.enforce_login = attributes[:'enforce_login']
        end

        if attributes.has_key?(:'enforce_login_with_domains')
          self.enforce_login_with_domains = attributes[:'enforce_login_with_domains']
        end

        if attributes.has_key?(:'enforce_login_domains')
          self.enforce_login_domains = attributes[:'enforce_login_domains']
        end

        if attributes.has_key?(:'not_store_meeting_topic')
          self.not_store_meeting_topic = attributes[:'not_store_meeting_topic']
        end

        if attributes.has_key?(:'require_password_for_scheduling_new_meetings')
          self.require_password_for_scheduling_new_meetings = attributes[:'require_password_for_scheduling_new_meetings']
        end

        if attributes.has_key?(:'require_password_for_instant_meetings')
          self.require_password_for_instant_meetings = attributes[:'require_password_for_instant_meetings']
        end

        if attributes.has_key?(:'require_password_for_pmi_meetings')
          self.require_password_for_pmi_meetings = attributes[:'require_password_for_pmi_meetings']
        end

        if attributes.has_key?(:'meeting_authentication')
          self.meeting_authentication = attributes[:'meeting_authentication']
        end
      end

      # Show invalid properties with the reasons. Usually used together with valid?
      # @return Array for valid properties with the reasons
      def list_invalid_properties
        invalid_properties = Array.new
        invalid_properties
      end

      # Check to see if the all the properties in the model are valid
      # @return true if the model is valid
      def valid?
        true
      end

      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(o)
        return true if self.equal?(o)
        self.class == o.class &&
          host_video == o.host_video &&
          participant_video == o.participant_video &&
          audio_type == o.audio_type &&
          join_before_host == o.join_before_host &&
          enforce_login == o.enforce_login &&
          enforce_login_with_domains == o.enforce_login_with_domains &&
          enforce_login_domains == o.enforce_login_domains &&
          not_store_meeting_topic == o.not_store_meeting_topic &&
          require_password_for_scheduling_new_meetings == o.require_password_for_scheduling_new_meetings &&
          require_password_for_instant_meetings == o.require_password_for_instant_meetings &&
          require_password_for_pmi_meetings == o.require_password_for_pmi_meetings &&
          meeting_authentication == o.meeting_authentication
      end

      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(o)
        self == o
      end

      # Calculates hash code according to all attributes.
      # @return [Fixnum] Hash code
      def hash
        [host_video, participant_video, audio_type, join_before_host, enforce_login, enforce_login_with_domains, enforce_login_domains, not_store_meeting_topic, require_password_for_scheduling_new_meetings, require_password_for_instant_meetings, require_password_for_pmi_meetings, meeting_authentication].hash
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)
        self.class.swagger_types.each_pair do |key, type|
          if type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the the attribute
            # is documented as an array but the input is not
            if attributes[self.class.attribute_map[key]].is_a?(Array)
              self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
            end
          elsif !attributes[self.class.attribute_map[key]].nil?
            self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
          end # or else data not found in attributes(hash), not an issue as the data can be optional
        end

        self
      end

      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def _deserialize(type, value)
        case type.to_sym
        when :DateTime
          ::DateTime.parse(value)
        when :Date
          ::Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :BOOLEAN
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end
        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
        else # model
          temp_model = Models.const_get(type).new
          temp_model.build_from_hash(value)
        end
      end

      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end

      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end

      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = self.send(attr)
          next if value.nil?
          hash[param] = _to_hash(value)
        end
        hash
      end

      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to? :to_hash
          value.to_hash
        else
          value
        end
      end
    end
  end
end
