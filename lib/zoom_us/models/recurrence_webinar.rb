=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'date'

module ZoomUs
  module Models
    # Recurrence object.
    class RecurrenceWebinar
      # Recurrence webinar types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
      attr_accessor :type

      # At which interval should the webinar repeat? For a daily webinar, there's a maximum of 90 days. For a weekly webinar, there is a maximum of 12 weeks. For a monthly webinar, there is a maximum of 3 months.
      attr_accessor :repeat_interval

      # Days of the week the webinar should repeat.  Note: Multiple values should be separated by a comma. <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
      attr_accessor :weekly_days

      # Day in the month the webinar is to be scheduled. The value range is from 1 to 31.
      attr_accessor :monthly_day

      # The week for a webinar to recur each month.<br>`-1` - Last week.<br>`1` - First week.<br>`2` - Second week.<br>`3` - Third week.<br>`4` - Fourth week.
      attr_accessor :monthly_week

      # The weekday a webinar should recur each month.<br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
      attr_accessor :monthly_week_day

      # Select how many times the webinar will recur before it is canceled. (Cannot be used with \"end_date_time\".)
      attr_accessor :end_times

      # Select a date when the webinar will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with \"end_times\".)
      attr_accessor :end_date_time

      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :'type' => :'type',
          :'repeat_interval' => :'repeat_interval',
          :'weekly_days' => :'weekly_days',
          :'monthly_day' => :'monthly_day',
          :'monthly_week' => :'monthly_week',
          :'monthly_week_day' => :'monthly_week_day',
          :'end_times' => :'end_times',
          :'end_date_time' => :'end_date_time'
        }
      end

      # Attribute type mapping.
      def self.swagger_types
        {
          :'type' => :'Integer',
          :'repeat_interval' => :'Integer',
          :'weekly_days' => :'Integer',
          :'monthly_day' => :'Integer',
          :'monthly_week' => :'Integer',
          :'monthly_week_day' => :'Integer',
          :'end_times' => :'Integer',
          :'end_date_time' => :'DateTime'
        }
      end

      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        return unless attributes.is_a?(Hash)

        # convert string to symbol for hash key
        attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

        if attributes.has_key?(:'type')
          self.type = attributes[:'type']
        end

        if attributes.has_key?(:'repeat_interval')
          self.repeat_interval = attributes[:'repeat_interval']
        end

        if attributes.has_key?(:'weekly_days')
          self.weekly_days = attributes[:'weekly_days']
        end

        if attributes.has_key?(:'monthly_day')
          self.monthly_day = attributes[:'monthly_day']
        end

        if attributes.has_key?(:'monthly_week')
          self.monthly_week = attributes[:'monthly_week']
        end

        if attributes.has_key?(:'monthly_week_day')
          self.monthly_week_day = attributes[:'monthly_week_day']
        end

        if attributes.has_key?(:'end_times')
          self.end_times = attributes[:'end_times']
        end

        if attributes.has_key?(:'end_date_time')
          self.end_date_time = attributes[:'end_date_time']
        end
      end

      # Show invalid properties with the reasons. Usually used together with valid?
      # @return Array for valid properties with the reasons
      def list_invalid_properties
        invalid_properties = Array.new
        if !@end_times.nil? && @end_times > 50
          invalid_properties.push('invalid value for "end_times", must be smaller than or equal to 50.')
        end

        invalid_properties
      end

      # Check to see if the all the properties in the model are valid
      # @return true if the model is valid
      def valid?
        return false if !@end_times.nil? && @end_times > 50
        true
      end

      # Custom attribute writer method with validation
      # @param [Object] end_times Value to be assigned
      def end_times=(end_times)
        if !end_times.nil? && end_times > 50
          fail ArgumentError, 'invalid value for "end_times", must be smaller than or equal to 50.'
        end

        @end_times = end_times
      end

      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(o)
        return true if self.equal?(o)
        self.class == o.class &&
          type == o.type &&
          repeat_interval == o.repeat_interval &&
          weekly_days == o.weekly_days &&
          monthly_day == o.monthly_day &&
          monthly_week == o.monthly_week &&
          monthly_week_day == o.monthly_week_day &&
          end_times == o.end_times &&
          end_date_time == o.end_date_time
      end

      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(o)
        self == o
      end

      # Calculates hash code according to all attributes.
      # @return [Fixnum] Hash code
      def hash
        [type, repeat_interval, weekly_days, monthly_day, monthly_week, monthly_week_day, end_times, end_date_time].hash
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)
        self.class.swagger_types.each_pair do |key, type|
          if type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the the attribute
            # is documented as an array but the input is not
            if attributes[self.class.attribute_map[key]].is_a?(Array)
              self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
            end
          elsif !attributes[self.class.attribute_map[key]].nil?
            self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
          end # or else data not found in attributes(hash), not an issue as the data can be optional
        end

        self
      end

      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def _deserialize(type, value)
        case type.to_sym
        when :DateTime
          ::DateTime.parse(value)
        when :Date
          ::Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :BOOLEAN
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end
        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
        else # model
          temp_model = Models.const_get(type).new
          temp_model.build_from_hash(value)
        end
      end

      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end

      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end

      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = self.send(attr)
          next if value.nil?
          hash[param] = _to_hash(value)
        end
        hash
      end

      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to? :to_hash
          value.to_hash
        else
          value
        end
      end
    end
  end
end
