=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'date'

module ZoomUs
  module Models
    class InlineResponse20047
      # User's account ID.
      attr_accessor :account_id

      # CMS ID of user, only enabled for Kaltura integration.
      attr_accessor :cms_user_id

      # User's company.
      attr_accessor :company

      # User create time.
      attr_accessor :created_at

      # Department.
      attr_accessor :dept

      # User's email address.
      attr_accessor :email

      # User's first name.
      attr_accessor :first_name

      # IDs of the web groups user belongs to.
      attr_accessor :group_ids

      # User's host key.
      attr_accessor :host_key

      # User ID.
      attr_accessor :id

      # IM IDs of the groups user belongs to.
      attr_accessor :im_group_ids

      attr_accessor :jid

      # User's job title.
      attr_accessor :job_title

      # Default language for the Zoom Web Portal.
      attr_accessor :language

      # User last login client version.
      attr_accessor :last_client_version

      # User last login time.
      attr_accessor :last_login_time

      # User's last name.
      attr_accessor :last_name

      # User's location.
      attr_accessor :location

      # User's personal meeting url.
      attr_accessor :personal_meeting_url

      # User's country for Company Phone Number.
      attr_accessor :phone_country

      # User's phone number.
      attr_accessor :phone_number

      # The URL for user's profile picture.
      attr_accessor :pic_url

      # Personal meeting ID.
      attr_accessor :pmi

      # User's [role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) name.
      attr_accessor :role_name

      # Status of user's account.
      attr_accessor :status

      # The time zone of the user.
      attr_accessor :timezone

      # User's plan type:<br>`1` - Basic.<br>`2` - Licensed.<br>`3` - On-prem.
      attr_accessor :type

      # Displays `true` if user has enabled PMI for instant meetinsgs, `false` otherwise.
      attr_accessor :use_pmi

      # Personal meeting room URL, if the user has one.
      attr_accessor :vanity_url

      # Displays whether user is verified or not. <br> `1` - Account verified.<br> `0` - Account not verified.
      attr_accessor :verified

      class EnumAttributeValidator
        attr_reader :datatype
        attr_reader :allowable_values

        def initialize(datatype, allowable_values)
          @allowable_values = allowable_values.map do |value|
            case datatype.to_s
            when /Integer/i
              value.to_i
            when /Float/i
              value.to_f
            else
              value
            end
          end
        end

        def valid?(value)
          !value || allowable_values.include?(value)
        end
      end

      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :'account_id' => :'account_id',
          :'cms_user_id' => :'cms_user_id',
          :'company' => :'company',
          :'created_at' => :'created_at',
          :'dept' => :'dept',
          :'email' => :'email',
          :'first_name' => :'first_name',
          :'group_ids' => :'group_ids',
          :'host_key' => :'host_key',
          :'id' => :'id',
          :'im_group_ids' => :'im_group_ids',
          :'jid' => :'jid',
          :'job_title' => :'job_title',
          :'language' => :'language',
          :'last_client_version' => :'last_client_version',
          :'last_login_time' => :'last_login_time',
          :'last_name' => :'last_name',
          :'location' => :'location',
          :'personal_meeting_url' => :'personal_meeting_url',
          :'phone_country' => :'phone_country',
          :'phone_number' => :'phone_number',
          :'pic_url' => :'pic_url',
          :'pmi' => :'pmi',
          :'role_name' => :'role_name',
          :'status' => :'status',
          :'timezone' => :'timezone',
          :'type' => :'type',
          :'use_pmi' => :'use_pmi',
          :'vanity_url' => :'vanity_url',
          :'verified' => :'verified'
        }
      end

      # Attribute type mapping.
      def self.swagger_types
        {
          :'account_id' => :'String',
          :'cms_user_id' => :'String',
          :'company' => :'String',
          :'created_at' => :'DateTime',
          :'dept' => :'String',
          :'email' => :'String',
          :'first_name' => :'String',
          :'group_ids' => :'Array<String>',
          :'host_key' => :'String',
          :'id' => :'String',
          :'im_group_ids' => :'Array<String>',
          :'jid' => :'String',
          :'job_title' => :'String',
          :'language' => :'String',
          :'last_client_version' => :'String',
          :'last_login_time' => :'DateTime',
          :'last_name' => :'String',
          :'location' => :'String',
          :'personal_meeting_url' => :'String',
          :'phone_country' => :'String',
          :'phone_number' => :'String',
          :'pic_url' => :'String',
          :'pmi' => :'Integer',
          :'role_name' => :'String',
          :'status' => :'String',
          :'timezone' => :'String',
          :'type' => :'Integer',
          :'use_pmi' => :'BOOLEAN',
          :'vanity_url' => :'String',
          :'verified' => :'Integer'
        }
      end

      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        return unless attributes.is_a?(Hash)

        # convert string to symbol for hash key
        attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

        if attributes.has_key?(:'account_id')
          self.account_id = attributes[:'account_id']
        end

        if attributes.has_key?(:'cms_user_id')
          self.cms_user_id = attributes[:'cms_user_id']
        end

        if attributes.has_key?(:'company')
          self.company = attributes[:'company']
        end

        if attributes.has_key?(:'created_at')
          self.created_at = attributes[:'created_at']
        end

        if attributes.has_key?(:'dept')
          self.dept = attributes[:'dept']
        end

        if attributes.has_key?(:'email')
          self.email = attributes[:'email']
        else
          self.email = 'john.doe@email.com'
        end

        if attributes.has_key?(:'first_name')
          self.first_name = attributes[:'first_name']
        end

        if attributes.has_key?(:'group_ids')
          if (value = attributes[:'group_ids']).is_a?(Array)
            self.group_ids = value
          end
        end

        if attributes.has_key?(:'host_key')
          self.host_key = attributes[:'host_key']
        end

        if attributes.has_key?(:'id')
          self.id = attributes[:'id']
        end

        if attributes.has_key?(:'im_group_ids')
          if (value = attributes[:'im_group_ids']).is_a?(Array)
            self.im_group_ids = value
          end
        end

        if attributes.has_key?(:'jid')
          self.jid = attributes[:'jid']
        end

        if attributes.has_key?(:'job_title')
          self.job_title = attributes[:'job_title']
        end

        if attributes.has_key?(:'language')
          self.language = attributes[:'language']
        end

        if attributes.has_key?(:'last_client_version')
          self.last_client_version = attributes[:'last_client_version']
        end

        if attributes.has_key?(:'last_login_time')
          self.last_login_time = attributes[:'last_login_time']
        end

        if attributes.has_key?(:'last_name')
          self.last_name = attributes[:'last_name']
        end

        if attributes.has_key?(:'location')
          self.location = attributes[:'location']
        end

        if attributes.has_key?(:'personal_meeting_url')
          self.personal_meeting_url = attributes[:'personal_meeting_url']
        end

        if attributes.has_key?(:'phone_country')
          self.phone_country = attributes[:'phone_country']
        end

        if attributes.has_key?(:'phone_number')
          self.phone_number = attributes[:'phone_number']
        end

        if attributes.has_key?(:'pic_url')
          self.pic_url = attributes[:'pic_url']
        end

        if attributes.has_key?(:'pmi')
          self.pmi = attributes[:'pmi']
        end

        if attributes.has_key?(:'role_name')
          self.role_name = attributes[:'role_name']
        end

        if attributes.has_key?(:'status')
          self.status = attributes[:'status']
        end

        if attributes.has_key?(:'timezone')
          self.timezone = attributes[:'timezone']
        end

        if attributes.has_key?(:'type')
          self.type = attributes[:'type']
        end

        if attributes.has_key?(:'use_pmi')
          self.use_pmi = attributes[:'use_pmi']
        else
          self.use_pmi = false
        end

        if attributes.has_key?(:'vanity_url')
          self.vanity_url = attributes[:'vanity_url']
        end

        if attributes.has_key?(:'verified')
          self.verified = attributes[:'verified']
        end
      end

      # Show invalid properties with the reasons. Usually used together with valid?
      # @return Array for valid properties with the reasons
      def list_invalid_properties
        invalid_properties = Array.new
        if @email.nil?
          invalid_properties.push('invalid value for "email", email cannot be nil.')
        end

        if !@first_name.nil? && @first_name.to_s.length > 64
          invalid_properties.push('invalid value for "first_name", the character length must be smaller than or equal to 64.')
        end

        if !@last_name.nil? && @last_name.to_s.length > 64
          invalid_properties.push('invalid value for "last_name", the character length must be smaller than or equal to 64.')
        end

        if @type.nil?
          invalid_properties.push('invalid value for "type", type cannot be nil.')
        end

        invalid_properties
      end

      # Check to see if the all the properties in the model are valid
      # @return true if the model is valid
      def valid?
        return false if @email.nil?
        return false if !@first_name.nil? && @first_name.to_s.length > 64
        return false if !@last_name.nil? && @last_name.to_s.length > 64
        status_validator = EnumAttributeValidator.new('String', ['pending', 'active', 'inactive'])
        return false unless status_validator.valid?(@status)
        return false if @type.nil?
        true
      end

      # Custom attribute writer method with validation
      # @param [Object] first_name Value to be assigned
      def first_name=(first_name)
        if !first_name.nil? && first_name.to_s.length > 64
          fail ArgumentError, 'invalid value for "first_name", the character length must be smaller than or equal to 64.'
        end

        @first_name = first_name
      end

      # Custom attribute writer method with validation
      # @param [Object] last_name Value to be assigned
      def last_name=(last_name)
        if !last_name.nil? && last_name.to_s.length > 64
          fail ArgumentError, 'invalid value for "last_name", the character length must be smaller than or equal to 64.'
        end

        @last_name = last_name
      end

      # Custom attribute writer method checking allowed values (enum).
      # @param [Object] status Object to be assigned
      def status=(status)
        validator = EnumAttributeValidator.new('String', ['pending', 'active', 'inactive'])
        unless validator.valid?(status)
          fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
        end
        @status = status
      end

      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(o)
        return true if self.equal?(o)
        self.class == o.class &&
          account_id == o.account_id &&
          cms_user_id == o.cms_user_id &&
          company == o.company &&
          created_at == o.created_at &&
          dept == o.dept &&
          email == o.email &&
          first_name == o.first_name &&
          group_ids == o.group_ids &&
          host_key == o.host_key &&
          id == o.id &&
          im_group_ids == o.im_group_ids &&
          jid == o.jid &&
          job_title == o.job_title &&
          language == o.language &&
          last_client_version == o.last_client_version &&
          last_login_time == o.last_login_time &&
          last_name == o.last_name &&
          location == o.location &&
          personal_meeting_url == o.personal_meeting_url &&
          phone_country == o.phone_country &&
          phone_number == o.phone_number &&
          pic_url == o.pic_url &&
          pmi == o.pmi &&
          role_name == o.role_name &&
          status == o.status &&
          timezone == o.timezone &&
          type == o.type &&
          use_pmi == o.use_pmi &&
          vanity_url == o.vanity_url &&
          verified == o.verified
      end

      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(o)
        self == o
      end

      # Calculates hash code according to all attributes.
      # @return [Fixnum] Hash code
      def hash
        [account_id, cms_user_id, company, created_at, dept, email, first_name, group_ids, host_key, id, im_group_ids, jid, job_title, language, last_client_version, last_login_time, last_name, location, personal_meeting_url, phone_country, phone_number, pic_url, pmi, role_name, status, timezone, type, use_pmi, vanity_url, verified].hash
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)
        self.class.swagger_types.each_pair do |key, type|
          if type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the the attribute
            # is documented as an array but the input is not
            if attributes[self.class.attribute_map[key]].is_a?(Array)
              self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
            end
          elsif !attributes[self.class.attribute_map[key]].nil?
            self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
          end # or else data not found in attributes(hash), not an issue as the data can be optional
        end

        self
      end

      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def _deserialize(type, value)
        case type.to_sym
        when :DateTime
          ::DateTime.parse(value)
        when :Date
          ::Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :BOOLEAN
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end
        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
        else # model
          temp_model = Models.const_get(type).new
          temp_model.build_from_hash(value)
        end
      end

      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end

      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end

      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = self.send(attr)
          next if value.nil?
          hash[param] = _to_hash(value)
        end
        hash
      end

      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to? :to_hash
          value.to_hash
        else
          value
        end
      end
    end
  end
end
