=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'date'

module ZoomUs
  module Models
    class Body66
      # Required only if [multiple sites](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites) have been enabled. This can be retrieved from the [List Phone Sites]() API.
      attr_accessor :site_id

      # Name of the Call Queue.
      attr_accessor :name

      # Phone extension number for the site.<br>  If a site code has been [assigned](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_79ca9c8f-c97b-4486-aa59-d0d9d31a525b) to the site, provide the short extension number instead of the original extension number..
      attr_accessor :extension_number

      # Description for the Call Queue.
      attr_accessor :description

      attr_accessor :members

      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :'site_id' => :'site_id',
          :'name' => :'name',
          :'extension_number' => :'extension_number',
          :'description' => :'description',
          :'members' => :'members'
        }
      end

      # Attribute type mapping.
      def self.swagger_types
        {
          :'site_id' => :'String',
          :'name' => :'String',
          :'extension_number' => :'Integer',
          :'description' => :'String',
          :'members' => :'PhonecallQueuesMembers'
        }
      end

      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        return unless attributes.is_a?(Hash)

        # convert string to symbol for hash key
        attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

        if attributes.has_key?(:'site_id')
          self.site_id = attributes[:'site_id']
        end

        if attributes.has_key?(:'name')
          self.name = attributes[:'name']
        end

        if attributes.has_key?(:'extension_number')
          self.extension_number = attributes[:'extension_number']
        end

        if attributes.has_key?(:'description')
          self.description = attributes[:'description']
        end

        if attributes.has_key?(:'members')
          self.members = attributes[:'members']
        end
      end

      # Show invalid properties with the reasons. Usually used together with valid?
      # @return Array for valid properties with the reasons
      def list_invalid_properties
        invalid_properties = Array.new
        if @site_id.nil?
          invalid_properties.push('invalid value for "site_id", site_id cannot be nil.')
        end

        if @name.nil?
          invalid_properties.push('invalid value for "name", name cannot be nil.')
        end

        if @name.to_s.length > 32
          invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 32.')
        end

        if @name.to_s.length < 1
          invalid_properties.push('invalid value for "name", the character length must be great than or equal to 1.')
        end

        if !@description.nil? && @description.to_s.length > 32
          invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 32.')
        end

        invalid_properties
      end

      # Check to see if the all the properties in the model are valid
      # @return true if the model is valid
      def valid?
        return false if @site_id.nil?
        return false if @name.nil?
        return false if @name.to_s.length > 32
        return false if @name.to_s.length < 1
        return false if !@description.nil? && @description.to_s.length > 32
        true
      end

      # Custom attribute writer method with validation
      # @param [Object] name Value to be assigned
      def name=(name)
        if name.nil?
          fail ArgumentError, 'name cannot be nil'
        end

        if name.to_s.length > 32
          fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 32.'
        end

        if name.to_s.length < 1
          fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 1.'
        end

        @name = name
      end

      # Custom attribute writer method with validation
      # @param [Object] description Value to be assigned
      def description=(description)
        if !description.nil? && description.to_s.length > 32
          fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 32.'
        end

        @description = description
      end

      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(o)
        return true if self.equal?(o)
        self.class == o.class &&
          site_id == o.site_id &&
          name == o.name &&
          extension_number == o.extension_number &&
          description == o.description &&
          members == o.members
      end

      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(o)
        self == o
      end

      # Calculates hash code according to all attributes.
      # @return [Fixnum] Hash code
      def hash
        [site_id, name, extension_number, description, members].hash
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)
        self.class.swagger_types.each_pair do |key, type|
          if type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the the attribute
            # is documented as an array but the input is not
            if attributes[self.class.attribute_map[key]].is_a?(Array)
              self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
            end
          elsif !attributes[self.class.attribute_map[key]].nil?
            self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
          end # or else data not found in attributes(hash), not an issue as the data can be optional
        end

        self
      end

      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def _deserialize(type, value)
        case type.to_sym
        when :DateTime
          ::DateTime.parse(value)
        when :Date
          ::Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :BOOLEAN
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end
        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
        else # model
          temp_model = Models.const_get(type).new
          temp_model.build_from_hash(value)
        end
      end

      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end

      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end

      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = self.send(attr)
          next if value.nil?
          hash[param] = _to_hash(value)
        end
        hash
      end

      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to? :to_hash
          value.to_hash
        else
          value
        end
      end
    end
  end
end
