=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'date'

module ZoomUs
  module Models
    # Registrant base object.
    class Registrant
      # A valid email address of the registrant.
      attr_accessor :email

      # Registrant's first name.
      attr_accessor :first_name

      # Registrant's last name.
      attr_accessor :last_name

      # Registrant's address.
      attr_accessor :address

      # Registrant's city.
      attr_accessor :city

      # Registrant's country.
      attr_accessor :country

      # Registrant's Zip/Postal Code.
      attr_accessor :zip

      # Registrant's State/Province.
      attr_accessor :state

      # Registrant's Phone number.
      attr_accessor :phone

      # Registrant's Industry.
      attr_accessor :industry

      # Registrant's Organization.
      attr_accessor :org

      # Registrant's job title.
      attr_accessor :job_title

      # This field can be included to gauge interest of webinar attendees towards buying your product or service.  Purchasing Time Frame:<br>`Within a month`<br>`1-3 months`<br>`4-6 months`<br>`More than 6 months`<br>`No timeframe`
      attr_accessor :purchasing_time_frame

      # Role in Purchase Process:<br>`Decision Maker`<br>`Evaluator/Recommender`<br>`Influencer`<br>`Not involved`
      attr_accessor :role_in_purchase_process

      # Number of Employees:<br>`1-20`<br>`21-50`<br>`51-100`<br>`101-500`<br>`500-1,000`<br>`1,001-5,000`<br>`5,001-10,000`<br>`More than 10,000`
      attr_accessor :no_of_employees

      # A field that allows registrants to provide any questions or comments that they might have.
      attr_accessor :comments

      # Custom questions.
      attr_accessor :custom_questions

      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :'email' => :'email',
          :'first_name' => :'first_name',
          :'last_name' => :'last_name',
          :'address' => :'address',
          :'city' => :'city',
          :'country' => :'country',
          :'zip' => :'zip',
          :'state' => :'state',
          :'phone' => :'phone',
          :'industry' => :'industry',
          :'org' => :'org',
          :'job_title' => :'job_title',
          :'purchasing_time_frame' => :'purchasing_time_frame',
          :'role_in_purchase_process' => :'role_in_purchase_process',
          :'no_of_employees' => :'no_of_employees',
          :'comments' => :'comments',
          :'custom_questions' => :'custom_questions'
        }
      end

      # Attribute type mapping.
      def self.swagger_types
        {
          :'email' => :'String',
          :'first_name' => :'String',
          :'last_name' => :'String',
          :'address' => :'String',
          :'city' => :'String',
          :'country' => :'String',
          :'zip' => :'String',
          :'state' => :'String',
          :'phone' => :'String',
          :'industry' => :'String',
          :'org' => :'String',
          :'job_title' => :'String',
          :'purchasing_time_frame' => :'String',
          :'role_in_purchase_process' => :'String',
          :'no_of_employees' => :'String',
          :'comments' => :'String',
          :'custom_questions' => :'Array<WebianrRegistrantCustomQuestions>'
        }
      end

      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        return unless attributes.is_a?(Hash)

        # convert string to symbol for hash key
        attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

        if attributes.has_key?(:'email')
          self.email = attributes[:'email']
        end

        if attributes.has_key?(:'first_name')
          self.first_name = attributes[:'first_name']
        end

        if attributes.has_key?(:'last_name')
          self.last_name = attributes[:'last_name']
        end

        if attributes.has_key?(:'address')
          self.address = attributes[:'address']
        end

        if attributes.has_key?(:'city')
          self.city = attributes[:'city']
        end

        if attributes.has_key?(:'country')
          self.country = attributes[:'country']
        end

        if attributes.has_key?(:'zip')
          self.zip = attributes[:'zip']
        end

        if attributes.has_key?(:'state')
          self.state = attributes[:'state']
        end

        if attributes.has_key?(:'phone')
          self.phone = attributes[:'phone']
        end

        if attributes.has_key?(:'industry')
          self.industry = attributes[:'industry']
        end

        if attributes.has_key?(:'org')
          self.org = attributes[:'org']
        end

        if attributes.has_key?(:'job_title')
          self.job_title = attributes[:'job_title']
        end

        if attributes.has_key?(:'purchasing_time_frame')
          self.purchasing_time_frame = attributes[:'purchasing_time_frame']
        end

        if attributes.has_key?(:'role_in_purchase_process')
          self.role_in_purchase_process = attributes[:'role_in_purchase_process']
        end

        if attributes.has_key?(:'no_of_employees')
          self.no_of_employees = attributes[:'no_of_employees']
        end

        if attributes.has_key?(:'comments')
          self.comments = attributes[:'comments']
        end

        if attributes.has_key?(:'custom_questions')
          if (value = attributes[:'custom_questions']).is_a?(Array)
            self.custom_questions = value
          end
        end
      end

      # Show invalid properties with the reasons. Usually used together with valid?
      # @return Array for valid properties with the reasons
      def list_invalid_properties
        invalid_properties = Array.new
        if @email.nil?
          invalid_properties.push('invalid value for "email", email cannot be nil.')
        end

        if @first_name.nil?
          invalid_properties.push('invalid value for "first_name", first_name cannot be nil.')
        end

        if @last_name.nil?
          invalid_properties.push('invalid value for "last_name", last_name cannot be nil.')
        end

        invalid_properties
      end

      # Check to see if the all the properties in the model are valid
      # @return true if the model is valid
      def valid?
        return false if @email.nil?
        return false if @first_name.nil?
        return false if @last_name.nil?
        true
      end

      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(o)
        return true if self.equal?(o)
        self.class == o.class &&
          email == o.email &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          address == o.address &&
          city == o.city &&
          country == o.country &&
          zip == o.zip &&
          state == o.state &&
          phone == o.phone &&
          industry == o.industry &&
          org == o.org &&
          job_title == o.job_title &&
          purchasing_time_frame == o.purchasing_time_frame &&
          role_in_purchase_process == o.role_in_purchase_process &&
          no_of_employees == o.no_of_employees &&
          comments == o.comments &&
          custom_questions == o.custom_questions
      end

      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(o)
        self == o
      end

      # Calculates hash code according to all attributes.
      # @return [Fixnum] Hash code
      def hash
        [email, first_name, last_name, address, city, country, zip, state, phone, industry, org, job_title, purchasing_time_frame, role_in_purchase_process, no_of_employees, comments, custom_questions].hash
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)
        self.class.swagger_types.each_pair do |key, type|
          if type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the the attribute
            # is documented as an array but the input is not
            if attributes[self.class.attribute_map[key]].is_a?(Array)
              self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
            end
          elsif !attributes[self.class.attribute_map[key]].nil?
            self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
          end # or else data not found in attributes(hash), not an issue as the data can be optional
        end

        self
      end

      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def _deserialize(type, value)
        case type.to_sym
        when :DateTime
          ::DateTime.parse(value)
        when :Date
          ::Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :BOOLEAN
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end
        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
        else # model
          temp_model = Models.const_get(type).new
          temp_model.build_from_hash(value)
        end
      end

      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end

      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end

      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = self.send(attr)
          next if value.nil?
          hash[param] = _to_hash(value)
        end
        hash
      end

      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to? :to_hash
          value.to_hash
        else
          value
        end
      end
    end
  end
end
