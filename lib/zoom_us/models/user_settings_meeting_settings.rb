=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'date'

module ZoomUs
  module Models
    #
    class UserSettingsMeetingSettings
      # Start meetings with host video on.
      attr_accessor :host_video

      # Start meetings with participants video on.
      attr_accessor :participants_video

      # Determine how participants can join the audio portion of the meeting:<br>`both` - Telephony and VoIP.<br>`telephony` - Audio PSTN telephony only.<br>`voip` - VoIP only.<br>`thirdParty` - Third party audio conference.
      attr_accessor :audio_type

      # Join the meeting before host arrives.
      attr_accessor :join_before_host

      # Require a password for personal meetings if attendees can join before host.
      attr_accessor :force_pmi_jbh_password

      # Generate and require password for participants joining by phone.
      attr_accessor :pstn_password_protected

      # Use Personal Meeting ID (PMI) when scheduling a meeting
      attr_accessor :use_pmi_for_scheduled_meetings

      # Use Personal Meeting ID (PMI) when starting an instant meeting
      attr_accessor :use_pmi_for_instant_meetings

      # Require a password when scheduling new meetings
      attr_accessor :require_password_for_scheduling_new_meetings

      # Require a password for meetings which have already been scheduled
      attr_accessor :require_password_for_scheduled_meetings

      # Password for already scheduled meetings
      attr_accessor :default_password_for_scheduled_meetings

      # Require a password for instant meetings. If you use PMI for your instant meetings, this option will be disabled.
      attr_accessor :require_password_for_instant_meetings

      # Require a password for Personal Meeting ID (PMI)
      attr_accessor :require_password_for_pmi_meetings

      # PMI password
      attr_accessor :pmi_password

      class EnumAttributeValidator
        attr_reader :datatype
        attr_reader :allowable_values

        def initialize(datatype, allowable_values)
          @allowable_values = allowable_values.map do |value|
            case datatype.to_s
            when /Integer/i
              value.to_i
            when /Float/i
              value.to_f
            else
              value
            end
          end
        end

        def valid?(value)
          !value || allowable_values.include?(value)
        end
      end

      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :'host_video' => :'host_video',
          :'participants_video' => :'participants_video',
          :'audio_type' => :'audio_type',
          :'join_before_host' => :'join_before_host',
          :'force_pmi_jbh_password' => :'force_pmi_jbh_password',
          :'pstn_password_protected' => :'pstn_password_protected',
          :'use_pmi_for_scheduled_meetings' => :'use_pmi_for_scheduled_meetings',
          :'use_pmi_for_instant_meetings' => :'use_pmi_for_instant_meetings',
          :'require_password_for_scheduling_new_meetings' => :'require_password_for_scheduling_new_meetings',
          :'require_password_for_scheduled_meetings' => :'require_password_for_scheduled_meetings',
          :'default_password_for_scheduled_meetings' => :'default_password_for_scheduled_meetings',
          :'require_password_for_instant_meetings' => :'require_password_for_instant_meetings',
          :'require_password_for_pmi_meetings' => :'require_password_for_pmi_meetings',
          :'pmi_password' => :'pmi_password'
        }
      end

      # Attribute type mapping.
      def self.swagger_types
        {
          :'host_video' => :'BOOLEAN',
          :'participants_video' => :'BOOLEAN',
          :'audio_type' => :'String',
          :'join_before_host' => :'BOOLEAN',
          :'force_pmi_jbh_password' => :'BOOLEAN',
          :'pstn_password_protected' => :'BOOLEAN',
          :'use_pmi_for_scheduled_meetings' => :'BOOLEAN',
          :'use_pmi_for_instant_meetings' => :'BOOLEAN',
          :'require_password_for_scheduling_new_meetings' => :'BOOLEAN',
          :'require_password_for_scheduled_meetings' => :'BOOLEAN',
          :'default_password_for_scheduled_meetings' => :'String',
          :'require_password_for_instant_meetings' => :'BOOLEAN',
          :'require_password_for_pmi_meetings' => :'String',
          :'pmi_password' => :'String'
        }
      end

      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        return unless attributes.is_a?(Hash)

        # convert string to symbol for hash key
        attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

        if attributes.has_key?(:'host_video')
          self.host_video = attributes[:'host_video']
        end

        if attributes.has_key?(:'participants_video')
          self.participants_video = attributes[:'participants_video']
        end

        if attributes.has_key?(:'audio_type')
          self.audio_type = attributes[:'audio_type']
        else
          self.audio_type = 'voip'
        end

        if attributes.has_key?(:'join_before_host')
          self.join_before_host = attributes[:'join_before_host']
        end

        if attributes.has_key?(:'force_pmi_jbh_password')
          self.force_pmi_jbh_password = attributes[:'force_pmi_jbh_password']
        end

        if attributes.has_key?(:'pstn_password_protected')
          self.pstn_password_protected = attributes[:'pstn_password_protected']
        end

        if attributes.has_key?(:'use_pmi_for_scheduled_meetings')
          self.use_pmi_for_scheduled_meetings = attributes[:'use_pmi_for_scheduled_meetings']
        end

        if attributes.has_key?(:'use_pmi_for_instant_meetings')
          self.use_pmi_for_instant_meetings = attributes[:'use_pmi_for_instant_meetings']
        end

        if attributes.has_key?(:'require_password_for_scheduling_new_meetings')
          self.require_password_for_scheduling_new_meetings = attributes[:'require_password_for_scheduling_new_meetings']
        end

        if attributes.has_key?(:'require_password_for_scheduled_meetings')
          self.require_password_for_scheduled_meetings = attributes[:'require_password_for_scheduled_meetings']
        end

        if attributes.has_key?(:'default_password_for_scheduled_meetings')
          self.default_password_for_scheduled_meetings = attributes[:'default_password_for_scheduled_meetings']
        end

        if attributes.has_key?(:'require_password_for_instant_meetings')
          self.require_password_for_instant_meetings = attributes[:'require_password_for_instant_meetings']
        end

        if attributes.has_key?(:'require_password_for_pmi_meetings')
          self.require_password_for_pmi_meetings = attributes[:'require_password_for_pmi_meetings']
        end

        if attributes.has_key?(:'pmi_password')
          self.pmi_password = attributes[:'pmi_password']
        end
      end

      # Show invalid properties with the reasons. Usually used together with valid?
      # @return Array for valid properties with the reasons
      def list_invalid_properties
        invalid_properties = Array.new
        invalid_properties
      end

      # Check to see if the all the properties in the model are valid
      # @return true if the model is valid
      def valid?
        audio_type_validator = EnumAttributeValidator.new('String', ['both', 'telephony', 'voip', 'thirdParty'])
        return false unless audio_type_validator.valid?(@audio_type)
        require_password_for_pmi_meetings_validator = EnumAttributeValidator.new('String', ['jbh_only', 'all', 'none'])
        return false unless require_password_for_pmi_meetings_validator.valid?(@require_password_for_pmi_meetings)
        true
      end

      # Custom attribute writer method checking allowed values (enum).
      # @param [Object] audio_type Object to be assigned
      def audio_type=(audio_type)
        validator = EnumAttributeValidator.new('String', ['both', 'telephony', 'voip', 'thirdParty'])
        unless validator.valid?(audio_type)
          fail ArgumentError, 'invalid value for "audio_type", must be one of #{validator.allowable_values}.'
        end
        @audio_type = audio_type
      end

      # Custom attribute writer method checking allowed values (enum).
      # @param [Object] require_password_for_pmi_meetings Object to be assigned
      def require_password_for_pmi_meetings=(require_password_for_pmi_meetings)
        validator = EnumAttributeValidator.new('String', ['jbh_only', 'all', 'none'])
        unless validator.valid?(require_password_for_pmi_meetings)
          fail ArgumentError, 'invalid value for "require_password_for_pmi_meetings", must be one of #{validator.allowable_values}.'
        end
        @require_password_for_pmi_meetings = require_password_for_pmi_meetings
      end

      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(o)
        return true if self.equal?(o)
        self.class == o.class &&
          host_video == o.host_video &&
          participants_video == o.participants_video &&
          audio_type == o.audio_type &&
          join_before_host == o.join_before_host &&
          force_pmi_jbh_password == o.force_pmi_jbh_password &&
          pstn_password_protected == o.pstn_password_protected &&
          use_pmi_for_scheduled_meetings == o.use_pmi_for_scheduled_meetings &&
          use_pmi_for_instant_meetings == o.use_pmi_for_instant_meetings &&
          require_password_for_scheduling_new_meetings == o.require_password_for_scheduling_new_meetings &&
          require_password_for_scheduled_meetings == o.require_password_for_scheduled_meetings &&
          default_password_for_scheduled_meetings == o.default_password_for_scheduled_meetings &&
          require_password_for_instant_meetings == o.require_password_for_instant_meetings &&
          require_password_for_pmi_meetings == o.require_password_for_pmi_meetings &&
          pmi_password == o.pmi_password
      end

      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(o)
        self == o
      end

      # Calculates hash code according to all attributes.
      # @return [Fixnum] Hash code
      def hash
        [host_video, participants_video, audio_type, join_before_host, force_pmi_jbh_password, pstn_password_protected, use_pmi_for_scheduled_meetings, use_pmi_for_instant_meetings, require_password_for_scheduling_new_meetings, require_password_for_scheduled_meetings, default_password_for_scheduled_meetings, require_password_for_instant_meetings, require_password_for_pmi_meetings, pmi_password].hash
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)
        self.class.swagger_types.each_pair do |key, type|
          if type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the the attribute
            # is documented as an array but the input is not
            if attributes[self.class.attribute_map[key]].is_a?(Array)
              self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
            end
          elsif !attributes[self.class.attribute_map[key]].nil?
            self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
          end # or else data not found in attributes(hash), not an issue as the data can be optional
        end

        self
      end

      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def _deserialize(type, value)
        case type.to_sym
        when :DateTime
          ::DateTime.parse(value)
        when :Date
          ::Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :BOOLEAN
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end
        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
        else # model
          temp_model = Models.const_get(type).new
          temp_model.build_from_hash(value)
        end
      end

      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end

      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end

      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = self.send(attr)
          next if value.nil?
          hash[param] = _to_hash(value)
        end
        hash
      end

      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to? :to_hash
          value.to_hash
        else
          value
        end
      end
    end
  end
end
