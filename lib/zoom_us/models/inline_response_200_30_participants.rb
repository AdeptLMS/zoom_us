=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'date'

module ZoomUs
  module Models
    class InlineResponse20030Participants
      # Participant UUID.
      attr_accessor :id

      # Participant ID.
      attr_accessor :user_id

      # Participant display name.
      attr_accessor :user_name

      # Participant device.
      attr_accessor :device

      # Participant IP address.
      attr_accessor :ip_address

      # Participant location.
      attr_accessor :location

      # Participant network type.
      attr_accessor :network_type

      # Participant microphone.
      attr_accessor :microphone

      # Participant speaker.
      attr_accessor :speaker

      # Participant data center.
      attr_accessor :data_center

      # Participant connection type.
      attr_accessor :connection_type

      # Participant join time.
      attr_accessor :join_time

      # Participant leave time.
      attr_accessor :leave_time

      # Did the participant share an application?
      attr_accessor :share_application

      # Did the participant share their desktop?
      attr_accessor :share_desktop

      # Did the participant share their whiteboard?
      attr_accessor :share_whiteboard

      # Participant record?
      attr_accessor :recording

      # Participant PC name.
      attr_accessor :pc_name

      # Participant domain.
      attr_accessor :domain

      # Participant MAC address.
      attr_accessor :mac_addr

      # Participant hard disk ID.
      attr_accessor :harddisk_id

      # Participant version.
      attr_accessor :version

      # Possible reasons for why a participant left the Webinar.
      attr_accessor :leave_reason

      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :'id' => :'id',
          :'user_id' => :'user_id',
          :'user_name' => :'user_name',
          :'device' => :'device',
          :'ip_address' => :'ip_address',
          :'location' => :'location',
          :'network_type' => :'network_type',
          :'microphone' => :'microphone',
          :'speaker' => :'speaker',
          :'data_center' => :'data_center',
          :'connection_type' => :'connection_type',
          :'join_time' => :'join_time',
          :'leave_time' => :'leave_time',
          :'share_application' => :'share_application',
          :'share_desktop' => :'share_desktop',
          :'share_whiteboard' => :'share_whiteboard',
          :'recording' => :'recording',
          :'pc_name' => :'pc_name',
          :'domain' => :'domain',
          :'mac_addr' => :'mac_addr',
          :'harddisk_id' => :'harddisk_id',
          :'version' => :'version',
          :'leave_reason' => :'leave_reason'
        }
      end

      # Attribute type mapping.
      def self.swagger_types
        {
          :'id' => :'String',
          :'user_id' => :'String',
          :'user_name' => :'String',
          :'device' => :'String',
          :'ip_address' => :'String',
          :'location' => :'String',
          :'network_type' => :'String',
          :'microphone' => :'String',
          :'speaker' => :'String',
          :'data_center' => :'String',
          :'connection_type' => :'String',
          :'join_time' => :'DateTime',
          :'leave_time' => :'DateTime',
          :'share_application' => :'BOOLEAN',
          :'share_desktop' => :'BOOLEAN',
          :'share_whiteboard' => :'BOOLEAN',
          :'recording' => :'BOOLEAN',
          :'pc_name' => :'String',
          :'domain' => :'String',
          :'mac_addr' => :'String',
          :'harddisk_id' => :'String',
          :'version' => :'String',
          :'leave_reason' => :'String'
        }
      end

      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        return unless attributes.is_a?(Hash)

        # convert string to symbol for hash key
        attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

        if attributes.has_key?(:'id')
          self.id = attributes[:'id']
        end

        if attributes.has_key?(:'user_id')
          self.user_id = attributes[:'user_id']
        end

        if attributes.has_key?(:'user_name')
          self.user_name = attributes[:'user_name']
        end

        if attributes.has_key?(:'device')
          self.device = attributes[:'device']
        end

        if attributes.has_key?(:'ip_address')
          self.ip_address = attributes[:'ip_address']
        end

        if attributes.has_key?(:'location')
          self.location = attributes[:'location']
        end

        if attributes.has_key?(:'network_type')
          self.network_type = attributes[:'network_type']
        end

        if attributes.has_key?(:'microphone')
          self.microphone = attributes[:'microphone']
        end

        if attributes.has_key?(:'speaker')
          self.speaker = attributes[:'speaker']
        end

        if attributes.has_key?(:'data_center')
          self.data_center = attributes[:'data_center']
        end

        if attributes.has_key?(:'connection_type')
          self.connection_type = attributes[:'connection_type']
        end

        if attributes.has_key?(:'join_time')
          self.join_time = attributes[:'join_time']
        end

        if attributes.has_key?(:'leave_time')
          self.leave_time = attributes[:'leave_time']
        end

        if attributes.has_key?(:'share_application')
          self.share_application = attributes[:'share_application']
        end

        if attributes.has_key?(:'share_desktop')
          self.share_desktop = attributes[:'share_desktop']
        end

        if attributes.has_key?(:'share_whiteboard')
          self.share_whiteboard = attributes[:'share_whiteboard']
        end

        if attributes.has_key?(:'recording')
          self.recording = attributes[:'recording']
        end

        if attributes.has_key?(:'pc_name')
          self.pc_name = attributes[:'pc_name']
        end

        if attributes.has_key?(:'domain')
          self.domain = attributes[:'domain']
        end

        if attributes.has_key?(:'mac_addr')
          self.mac_addr = attributes[:'mac_addr']
        end

        if attributes.has_key?(:'harddisk_id')
          self.harddisk_id = attributes[:'harddisk_id']
        end

        if attributes.has_key?(:'version')
          self.version = attributes[:'version']
        end

        if attributes.has_key?(:'leave_reason')
          self.leave_reason = attributes[:'leave_reason']
        end
      end

      # Show invalid properties with the reasons. Usually used together with valid?
      # @return Array for valid properties with the reasons
      def list_invalid_properties
        invalid_properties = Array.new
        invalid_properties
      end

      # Check to see if the all the properties in the model are valid
      # @return true if the model is valid
      def valid?
        true
      end

      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(o)
        return true if self.equal?(o)
        self.class == o.class &&
          id == o.id &&
          user_id == o.user_id &&
          user_name == o.user_name &&
          device == o.device &&
          ip_address == o.ip_address &&
          location == o.location &&
          network_type == o.network_type &&
          microphone == o.microphone &&
          speaker == o.speaker &&
          data_center == o.data_center &&
          connection_type == o.connection_type &&
          join_time == o.join_time &&
          leave_time == o.leave_time &&
          share_application == o.share_application &&
          share_desktop == o.share_desktop &&
          share_whiteboard == o.share_whiteboard &&
          recording == o.recording &&
          pc_name == o.pc_name &&
          domain == o.domain &&
          mac_addr == o.mac_addr &&
          harddisk_id == o.harddisk_id &&
          version == o.version &&
          leave_reason == o.leave_reason
      end

      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(o)
        self == o
      end

      # Calculates hash code according to all attributes.
      # @return [Fixnum] Hash code
      def hash
        [id, user_id, user_name, device, ip_address, location, network_type, microphone, speaker, data_center, connection_type, join_time, leave_time, share_application, share_desktop, share_whiteboard, recording, pc_name, domain, mac_addr, harddisk_id, version, leave_reason].hash
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)
        self.class.swagger_types.each_pair do |key, type|
          if type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the the attribute
            # is documented as an array but the input is not
            if attributes[self.class.attribute_map[key]].is_a?(Array)
              self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
            end
          elsif !attributes[self.class.attribute_map[key]].nil?
            self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
          end # or else data not found in attributes(hash), not an issue as the data can be optional
        end

        self
      end

      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def _deserialize(type, value)
        case type.to_sym
        when :DateTime
          ::DateTime.parse(value)
        when :Date
          ::Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :BOOLEAN
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end
        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
        else # model
          temp_model = Models.const_get(type).new
          temp_model.build_from_hash(value)
        end
      end

      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end

      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end

      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = self.send(attr)
          next if value.nil?
          hash[param] = _to_hash(value)
        end
        hash
      end

      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to? :to_hash
          value.to_hash
        else
          value
        end
      end
    end
  end
end
