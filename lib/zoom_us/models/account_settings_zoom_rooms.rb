=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'date'

module ZoomUs
  module Models
    # Account Settings: Zoom Rooms.
    class AccountSettingsZoomRooms
      # Upcoming meeting alert.
      attr_accessor :upcoming_meeting_alert

      # Start AirPlay service manually.
      attr_accessor :start_airplay_manually

      # Weekly system restart.
      attr_accessor :weekly_system_restart

      # Display meeting list with calendar integration.
      attr_accessor :list_meetings_with_calendar

      # Zoom Room post meeting feedback.
      attr_accessor :zr_post_meeting_feedback

      # Automatic direct sharing using an ultrasonic proximity signal.
      attr_accessor :ultrasonic

      # Shift all meetings to private.
      attr_accessor :force_private_meeting

      # Hide host and meeting ID from private meetings.
      attr_accessor :hide_host_information

      # Cloud recording for instant meetings.
      attr_accessor :cmr_for_instant_meeting

      # Automatic start and stop for scheduled meetings.
      attr_accessor :auto_start_stop_scheduled_meetings

      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :'upcoming_meeting_alert' => :'upcoming_meeting_alert',
          :'start_airplay_manually' => :'start_airplay_manually',
          :'weekly_system_restart' => :'weekly_system_restart',
          :'list_meetings_with_calendar' => :'list_meetings_with_calendar',
          :'zr_post_meeting_feedback' => :'zr_post_meeting_feedback',
          :'ultrasonic' => :'ultrasonic',
          :'force_private_meeting' => :'force_private_meeting',
          :'hide_host_information' => :'hide_host_information',
          :'cmr_for_instant_meeting' => :'cmr_for_instant_meeting',
          :'auto_start_stop_scheduled_meetings' => :'auto_start_stop_scheduled_meetings'
        }
      end

      # Attribute type mapping.
      def self.swagger_types
        {
          :'upcoming_meeting_alert' => :'BOOLEAN',
          :'start_airplay_manually' => :'BOOLEAN',
          :'weekly_system_restart' => :'BOOLEAN',
          :'list_meetings_with_calendar' => :'BOOLEAN',
          :'zr_post_meeting_feedback' => :'BOOLEAN',
          :'ultrasonic' => :'BOOLEAN',
          :'force_private_meeting' => :'BOOLEAN',
          :'hide_host_information' => :'BOOLEAN',
          :'cmr_for_instant_meeting' => :'BOOLEAN',
          :'auto_start_stop_scheduled_meetings' => :'BOOLEAN'
        }
      end

      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        return unless attributes.is_a?(Hash)

        # convert string to symbol for hash key
        attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

        if attributes.has_key?(:'upcoming_meeting_alert')
          self.upcoming_meeting_alert = attributes[:'upcoming_meeting_alert']
        end

        if attributes.has_key?(:'start_airplay_manually')
          self.start_airplay_manually = attributes[:'start_airplay_manually']
        end

        if attributes.has_key?(:'weekly_system_restart')
          self.weekly_system_restart = attributes[:'weekly_system_restart']
        end

        if attributes.has_key?(:'list_meetings_with_calendar')
          self.list_meetings_with_calendar = attributes[:'list_meetings_with_calendar']
        end

        if attributes.has_key?(:'zr_post_meeting_feedback')
          self.zr_post_meeting_feedback = attributes[:'zr_post_meeting_feedback']
        end

        if attributes.has_key?(:'ultrasonic')
          self.ultrasonic = attributes[:'ultrasonic']
        end

        if attributes.has_key?(:'force_private_meeting')
          self.force_private_meeting = attributes[:'force_private_meeting']
        end

        if attributes.has_key?(:'hide_host_information')
          self.hide_host_information = attributes[:'hide_host_information']
        end

        if attributes.has_key?(:'cmr_for_instant_meeting')
          self.cmr_for_instant_meeting = attributes[:'cmr_for_instant_meeting']
        end

        if attributes.has_key?(:'auto_start_stop_scheduled_meetings')
          self.auto_start_stop_scheduled_meetings = attributes[:'auto_start_stop_scheduled_meetings']
        end
      end

      # Show invalid properties with the reasons. Usually used together with valid?
      # @return Array for valid properties with the reasons
      def list_invalid_properties
        invalid_properties = Array.new
        invalid_properties
      end

      # Check to see if the all the properties in the model are valid
      # @return true if the model is valid
      def valid?
        true
      end

      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(o)
        return true if self.equal?(o)
        self.class == o.class &&
          upcoming_meeting_alert == o.upcoming_meeting_alert &&
          start_airplay_manually == o.start_airplay_manually &&
          weekly_system_restart == o.weekly_system_restart &&
          list_meetings_with_calendar == o.list_meetings_with_calendar &&
          zr_post_meeting_feedback == o.zr_post_meeting_feedback &&
          ultrasonic == o.ultrasonic &&
          force_private_meeting == o.force_private_meeting &&
          hide_host_information == o.hide_host_information &&
          cmr_for_instant_meeting == o.cmr_for_instant_meeting &&
          auto_start_stop_scheduled_meetings == o.auto_start_stop_scheduled_meetings
      end

      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(o)
        self == o
      end

      # Calculates hash code according to all attributes.
      # @return [Fixnum] Hash code
      def hash
        [upcoming_meeting_alert, start_airplay_manually, weekly_system_restart, list_meetings_with_calendar, zr_post_meeting_feedback, ultrasonic, force_private_meeting, hide_host_information, cmr_for_instant_meeting, auto_start_stop_scheduled_meetings].hash
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)
        self.class.swagger_types.each_pair do |key, type|
          if type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the the attribute
            # is documented as an array but the input is not
            if attributes[self.class.attribute_map[key]].is_a?(Array)
              self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
            end
          elsif !attributes[self.class.attribute_map[key]].nil?
            self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
          end # or else data not found in attributes(hash), not an issue as the data can be optional
        end

        self
      end

      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def _deserialize(type, value)
        case type.to_sym
        when :DateTime
          ::DateTime.parse(value)
        when :Date
          ::Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :BOOLEAN
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end
        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
        else # model
          temp_model = Models.const_get(type).new
          temp_model.build_from_hash(value)
        end
      end

      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end

      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end

      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = self.send(attr)
          next if value.nil?
          hash[param] = _to_hash(value)
        end
        hash
      end

      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to? :to_hash
          value.to_hash
        else
          value
        end
      end
    end
  end
end
