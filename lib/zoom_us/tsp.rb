=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module ZoomUs
  class TSP
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Account's TSP Information
    # Get information on Telephony Service Provider on an account level.<br><br> **Scopes:** `tsp:read:admin` `tsp:read`<br>    **Prerequisites:**<br> * A Pro or a higher plan.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20045]
    def tsp(opts = {})
      data, _status_code, _headers = tsp_with_http_info(opts)
      data
    end

    # Get Account&#39;s TSP Information
    # Get information on Telephony Service Provider on an account level.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;tsp:read:admin&#x60; &#x60;tsp:read&#x60;&lt;br&gt;    **Prerequisites:**&lt;br&gt; * A Pro or a higher plan.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20045, Fixnum, Hash)>] InlineResponse20045 data, response status code and response headers
    def tsp_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TSPApi.tsp ...'
      end
      # resource path
      local_var_path = '/tsp'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20045')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TSPApi#tsp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update account's TSP information
    # Update information of the Telephony Service Provider set up on an account.<br> **Prerequisites**:<br> TSP account option should be enabled.<br> **Scopes:** `tsp:write:admin` `tsp:write`<br>
    # @param body TSP Account
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def tsp_update(body, opts = {})
      tsp_update_with_http_info(body, opts)
      nil
    end

    # Update account&#39;s TSP information
    # Update information of the Telephony Service Provider set up on an account.&lt;br&gt; **Prerequisites**:&lt;br&gt; TSP account option should be enabled.&lt;br&gt; **Scopes:** &#x60;tsp:write:admin&#x60; &#x60;tsp:write&#x60;&lt;br&gt;
    # @param body TSP Account
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def tsp_update_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TSPApi.tsp_update ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TSPApi.tsp_update"
      end
      # resource path
      local_var_path = '/tsp'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TSPApi#tsp_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set Global Dial-in URL for a TSP User
    # A global dial-in page can provide a list of global access numbers using which audio conferencing can be conducted. By calling this API, you can set the url for the global dial-in page of a user whose Zoom account has TSP and special TSP with third-party audio conferencing options enabled. <p></p> **Scopes:**`tsp:write:admin` `tsp:write`<br>
    # @param user_id The userId or email address of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [TSPGlobalDialInURLSetting] :body Global dial-in URL of the user.
    # @return [nil]
    def tsp_url_update(user_id, opts = {})
      tsp_url_update_with_http_info(user_id, opts)
      nil
    end

    # Set Global Dial-in URL for a TSP User
    # A global dial-in page can provide a list of global access numbers using which audio conferencing can be conducted. By calling this API, you can set the url for the global dial-in page of a user whose Zoom account has TSP and special TSP with third-party audio conferencing options enabled. &lt;p&gt;&lt;/p&gt; **Scopes:**&#x60;tsp:write:admin&#x60; &#x60;tsp:write&#x60;&lt;br&gt;
    # @param user_id The userId or email address of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [TSPGlobalDialInURLSetting] :body Global dial-in URL of the user.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def tsp_url_update_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TSPApi.tsp_url_update ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TSPApi.tsp_url_update"
      end
      # resource path
      local_var_path = '/users/{userId}/tsp/settings'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TSPApi#tsp_url_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List User's TSP accounts
    # A user can have a maximum of two TSP accounts. Use this API to list all TSP accounts of a user.<br><br> **Scopes:** `tsp:read:admin` `tsp:read`<br>
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20050]
    def user_ts_ps(user_id, opts = {})
      data, _status_code, _headers = user_ts_ps_with_http_info(user_id, opts)
      data
    end

    # List User&#39;s TSP accounts
    # A user can have a maximum of two TSP accounts. Use this API to list all TSP accounts of a user.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;tsp:read:admin&#x60; &#x60;tsp:read&#x60;&lt;br&gt;
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20050, Fixnum, Hash)>] InlineResponse20050 data, response status code and response headers
    def user_ts_ps_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TSPApi.user_ts_ps ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TSPApi.user_ts_ps"
      end
      # resource path
      local_var_path = '/users/{userId}/tsp'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20050')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TSPApi#user_ts_ps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a User's TSP Account
    # Each user can have a maximum of two TSP accounts. Use this API to retrieve details of a specific TSP account enabled for a specific user.<br><br> **Scopes:** `tsp:read:admin` `tsp:read`<br>
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param tsp_id TSP account ID.
    # @param [Hash] opts the optional parameters
    # @return [TSPAccount]
    def user_tsp(user_id, tsp_id, opts = {})
      data, _status_code, _headers = user_tsp_with_http_info(user_id, tsp_id, opts)
      data
    end

    # Get a User&#39;s TSP Account
    # Each user can have a maximum of two TSP accounts. Use this API to retrieve details of a specific TSP account enabled for a specific user.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;tsp:read:admin&#x60; &#x60;tsp:read&#x60;&lt;br&gt;
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param tsp_id TSP account ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TSPAccount, Fixnum, Hash)>] TSPAccount data, response status code and response headers
    def user_tsp_with_http_info(user_id, tsp_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TSPApi.user_tsp ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TSPApi.user_tsp"
      end
      # verify the required parameter 'tsp_id' is set
      if @api_client.config.client_side_validation && tsp_id.nil?
        fail ArgumentError, "Missing the required parameter 'tsp_id' when calling TSPApi.user_tsp"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['1', '2'].include?(tsp_id)
        fail ArgumentError, "invalid value for 'tsp_id', must be one of 1, 2"
      end
      # resource path
      local_var_path = '/users/{userId}/tsp/{tspId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'tspId' + '}', tsp_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TSPAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TSPApi#user_tsp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a User's TSP Account
    # Add a user's TSP account.<br><br> **Scopes:** `tsp:write:admin` `tsp:write`<br>
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param body TSP account.
    # @param [Hash] opts the optional parameters
    # @return [TSPAccountsList2]
    def user_tsp_create(user_id, body, opts = {})
      data, _status_code, _headers = user_tsp_create_with_http_info(user_id, body, opts)
      data
    end

    # Add a User&#39;s TSP Account
    # Add a user&#39;s TSP account.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;tsp:write:admin&#x60; &#x60;tsp:write&#x60;&lt;br&gt;
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param body TSP account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TSPAccountsList2, Fixnum, Hash)>] TSPAccountsList2 data, response status code and response headers
    def user_tsp_create_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TSPApi.user_tsp_create ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TSPApi.user_tsp_create"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TSPApi.user_tsp_create"
      end
      # resource path
      local_var_path = '/users/{userId}/tsp'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TSPAccountsList2')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TSPApi#user_tsp_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a User's TSP Account
    # Delete a user's TSP account.<br><br> **Scopes:** `tsp:write:admin` `tsp:write`<br>
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param tsp_id TSP account ID.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_tsp_delete(user_id, tsp_id, opts = {})
      user_tsp_delete_with_http_info(user_id, tsp_id, opts)
      nil
    end

    # Delete a User&#39;s TSP Account
    # Delete a user&#39;s TSP account.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;tsp:write:admin&#x60; &#x60;tsp:write&#x60;&lt;br&gt;
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param tsp_id TSP account ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_tsp_delete_with_http_info(user_id, tsp_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TSPApi.user_tsp_delete ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TSPApi.user_tsp_delete"
      end
      # verify the required parameter 'tsp_id' is set
      if @api_client.config.client_side_validation && tsp_id.nil?
        fail ArgumentError, "Missing the required parameter 'tsp_id' when calling TSPApi.user_tsp_delete"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['1', '2'].include?(tsp_id)
        fail ArgumentError, "invalid value for 'tsp_id', must be one of 1, 2"
      end
      # resource path
      local_var_path = '/users/{userId}/tsp/{tspId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'tspId' + '}', tsp_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TSPApi#user_tsp_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a TSP Account
    # Update a user's TSP account.<br><br> **Scopes:** `tsp:write:admin` `tsp:write`<br>
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param tsp_id TSP account ID.
    # @param body TSP account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_tsp_update(user_id, tsp_id, body, opts = {})
      user_tsp_update_with_http_info(user_id, tsp_id, body, opts)
      nil
    end

    # Update a TSP Account
    # Update a user&#39;s TSP account.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;tsp:write:admin&#x60; &#x60;tsp:write&#x60;&lt;br&gt;
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param tsp_id TSP account ID.
    # @param body TSP account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def user_tsp_update_with_http_info(user_id, tsp_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TSPApi.user_tsp_update ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TSPApi.user_tsp_update"
      end
      # verify the required parameter 'tsp_id' is set
      if @api_client.config.client_side_validation && tsp_id.nil?
        fail ArgumentError, "Missing the required parameter 'tsp_id' when calling TSPApi.user_tsp_update"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['1', '2'].include?(tsp_id)
        fail ArgumentError, "invalid value for 'tsp_id', must be one of 1, 2"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TSPApi.user_tsp_update"
      end
      # resource path
      local_var_path = '/users/{userId}/tsp/{tspId}'.sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'tspId' + '}', tsp_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TSPApi#user_tsp_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
