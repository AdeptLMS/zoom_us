=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module ZoomUs
  class Dashboards
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List Zoom Meetings Client Feedbacks
    # Retrieve survey results from [Zoom meetings client feedback](https://support.zoom.us/hc/en-us/articles/115005855266-End-of-Meeting-Feedback-Survey#h_e30d552b-6d8e-4e0a-a588-9ca8180c4dbf). <br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.  **Prerequisites:** * Business or higher account * [Feedback to Zoom](https://support.zoom.us/hc/en-us/articles/115005838023) enabled.  **Scope:** `account:read:admin`<br>
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20032]
    def dashboard_client_feedback(from, to, opts = {})
      data, _status_code, _headers = dashboard_client_feedback_with_http_info(from, to, opts)
      data
    end

    # List Zoom Meetings Client Feedbacks
    # Retrieve survey results from [Zoom meetings client feedback](https://support.zoom.us/hc/en-us/articles/115005855266-End-of-Meeting-Feedback-Survey#h_e30d552b-6d8e-4e0a-a588-9ca8180c4dbf). &lt;br&gt; You can specify a monthly date range for the dashboard data using the &#x60;from&#x60; and &#x60;to&#x60; query parameters. The month should fall within the last six months.  **Prerequisites:** * Business or higher account * [Feedback to Zoom](https://support.zoom.us/hc/en-us/articles/115005838023) enabled.  **Scope:** &#x60;account:read:admin&#x60;&lt;br&gt;
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20032, Fixnum, Hash)>] InlineResponse20032 data, response status code and response headers
    def dashboard_client_feedback_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.dashboard_client_feedback ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DashboardsApi.dashboard_client_feedback"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling DashboardsApi.dashboard_client_feedback"
      end
      # resource path
      local_var_path = '/metrics/client/feedback'

      # query parameters
      query_params = {}
      query_params[:'from'] = from
      query_params[:'to'] = to

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20032')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#dashboard_client_feedback\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Zoom Meetings Client Feedback
    # Retrieve detailed information on a [Zoom meetings client feedback](https://support.zoom.us/hc/en-us/articles/115005855266-End-of-Meeting-Feedback-Survey#h_e30d552b-6d8e-4e0a-a588-9ca8180c4dbf). <br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.  **Prerequisites:** * Business or higher account * [Feedback to Zoom](https://support.zoom.us/hc/en-us/articles/115005838023) enabled.  **Scope:** `dashboard_home:read:admin`<br>   `
    # @param feedback_id Feedback Detail Id
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :from
    # @option opts [Date] :to
    # @option opts [Integer] :page_size  (default to 30)
    # @option opts [String] :next_page_token
    # @return [InlineResponse20059]
    def dashboard_client_feedback_detail(feedback_id, opts = {})
      data, _status_code, _headers = dashboard_client_feedback_detail_with_http_info(feedback_id, opts)
      data
    end

    # Get Zoom Meetings Client Feedback
    # Retrieve detailed information on a [Zoom meetings client feedback](https://support.zoom.us/hc/en-us/articles/115005855266-End-of-Meeting-Feedback-Survey#h_e30d552b-6d8e-4e0a-a588-9ca8180c4dbf). &lt;br&gt; You can specify a monthly date range for the dashboard data using the &#x60;from&#x60; and &#x60;to&#x60; query parameters. The month should fall within the last six months.  **Prerequisites:** * Business or higher account * [Feedback to Zoom](https://support.zoom.us/hc/en-us/articles/115005838023) enabled.  **Scope:** &#x60;dashboard_home:read:admin&#x60;&lt;br&gt;   &#x60;
    # @param feedback_id Feedback Detail Id
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :from
    # @option opts [Date] :to
    # @option opts [Integer] :page_size
    # @option opts [String] :next_page_token
    # @return [Array<(InlineResponse20059, Fixnum, Hash)>] InlineResponse20059 data, response status code and response headers
    def dashboard_client_feedback_detail_with_http_info(feedback_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.dashboard_client_feedback_detail ...'
      end
      # verify the required parameter 'feedback_id' is set
      if @api_client.config.client_side_validation && feedback_id.nil?
        fail ArgumentError, "Missing the required parameter 'feedback_id' when calling DashboardsApi.dashboard_client_feedback_detail"
      end
      # resource path
      local_var_path = '/metrics/client/feedback/{feedbackId}'.sub('{' + 'feedbackId' + '}', feedback_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20059')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#dashboard_client_feedback_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get CRC Port Usage
    # A Cloud Room Connector allows H.323/SIP endpoints to connect to a Zoom meeting.   Use this API to get the hour by hour CRC Port usage for a specified period of time. <aside class='notice'>We will provide the report for a maximum of one month. For example, if \"from\" is set to \"2017-08-05\" and \"to\" is set to \"2017-10-10\", we will adjust \"from\" to \"2017-09-10\".</aside><br><br> **Prerequisites:**<br> * Business, Education or API Plan. * Room Connector must be enabled on the account.<br><br> **Scopes:** `dashboard_crc:read:admin`<br>
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def dashboard_crc(from, to, opts = {})
      data, _status_code, _headers = dashboard_crc_with_http_info(from, to, opts)
      data
    end

    # Get CRC Port Usage
    # A Cloud Room Connector allows H.323/SIP endpoints to connect to a Zoom meeting.   Use this API to get the hour by hour CRC Port usage for a specified period of time. &lt;aside class&#x3D;&#39;notice&#39;&gt;We will provide the report for a maximum of one month. For example, if \&quot;from\&quot; is set to \&quot;2017-08-05\&quot; and \&quot;to\&quot; is set to \&quot;2017-10-10\&quot;, we will adjust \&quot;from\&quot; to \&quot;2017-09-10\&quot;.&lt;/aside&gt;&lt;br&gt;&lt;br&gt; **Prerequisites:**&lt;br&gt; * Business, Education or API Plan. * Room Connector must be enabled on the account.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;dashboard_crc:read:admin&#x60;&lt;br&gt;
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def dashboard_crc_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.dashboard_crc ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DashboardsApi.dashboard_crc"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling DashboardsApi.dashboard_crc"
      end
      # resource path
      local_var_path = '/metrics/crc'

      # query parameters
      query_params = {}
      query_params[:'from'] = from
      query_params[:'to'] = to

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#dashboard_crc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IM Metrics
    # Get [metrics](https://support.zoom.us/hc/en-us/articles/204654719-Dashboard#h_cc7e9749-1c70-4afb-a9a2-9680654821e4) on how users are utilizing the Zoom Chat Client.<br><br> <br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months. **Scope:** `dashboard_im:read:admin`<br> **Prerequisites:**<br> * Business or a higher plan.
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [InlineResponse20031]
    def dashboard_im(from, to, opts = {})
      data, _status_code, _headers = dashboard_im_with_http_info(from, to, opts)
      data
    end

    # Get IM Metrics
    # Get [metrics](https://support.zoom.us/hc/en-us/articles/204654719-Dashboard#h_cc7e9749-1c70-4afb-a9a2-9680654821e4) on how users are utilizing the Zoom Chat Client.&lt;br&gt;&lt;br&gt; &lt;br&gt; You can specify a monthly date range for the dashboard data using the &#x60;from&#x60; and &#x60;to&#x60; query parameters. The month should fall within the last six months. **Scope:** &#x60;dashboard_im:read:admin&#x60;&lt;br&gt; **Prerequisites:**&lt;br&gt; * Business or a higher plan.
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [Array<(InlineResponse20031, Fixnum, Hash)>] InlineResponse20031 data, response status code and response headers
    def dashboard_im_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.dashboard_im ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DashboardsApi.dashboard_im"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling DashboardsApi.dashboard_im"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardsApi.dashboard_im, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/metrics/im'

      # query parameters
      query_params = {}
      query_params[:'from'] = from
      query_params[:'to'] = to
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20031')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#dashboard_im\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Issues of Zoom Rooms
    # Get information about the issues that occured on the Top 25 **Zoom Rooms with issues** in an acount. <br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.  **Scope:** `dashboard_home:read:admin`<br> <br> **Prerequisites:** <br> * Business or a higher plan. * Zoom Room must be enabled in the account.
    # @param zoomroom_id The Zoom room ID.
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [InlineResponse20033]
    def dashboard_issue_detail_zoom_room(zoomroom_id, from, to, opts = {})
      data, _status_code, _headers = dashboard_issue_detail_zoom_room_with_http_info(zoomroom_id, from, to, opts)
      data
    end

    # Get Issues of Zoom Rooms
    # Get information about the issues that occured on the Top 25 **Zoom Rooms with issues** in an acount. &lt;br&gt; You can specify a monthly date range for the dashboard data using the &#x60;from&#x60; and &#x60;to&#x60; query parameters. The month should fall within the last six months.  **Scope:** &#x60;dashboard_home:read:admin&#x60;&lt;br&gt; &lt;br&gt; **Prerequisites:** &lt;br&gt; * Business or a higher plan. * Zoom Room must be enabled in the account.
    # @param zoomroom_id The Zoom room ID.
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [Array<(InlineResponse20033, Fixnum, Hash)>] InlineResponse20033 data, response status code and response headers
    def dashboard_issue_detail_zoom_room_with_http_info(zoomroom_id, from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.dashboard_issue_detail_zoom_room ...'
      end
      # verify the required parameter 'zoomroom_id' is set
      if @api_client.config.client_side_validation && zoomroom_id.nil?
        fail ArgumentError, "Missing the required parameter 'zoomroom_id' when calling DashboardsApi.dashboard_issue_detail_zoom_room"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DashboardsApi.dashboard_issue_detail_zoom_room"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling DashboardsApi.dashboard_issue_detail_zoom_room"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardsApi.dashboard_issue_detail_zoom_room, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/metrics/issues/zoomrooms/{zoomroomId}'.sub('{' + 'zoomroomId' + '}', zoomroom_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = from
      query_params[:'to'] = to
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20033')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#dashboard_issue_detail_zoom_room\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Top 25 Zoom Rooms with Issues
    # Get information on top 25 Zoom Rooms with issues in a month. The month specified with the \"from\" and \"to\" range should fall within the last six months.<br> **Scope:** `dashboard_home:read:admin`<br> <br> **Prerequisites:**<br> * Business or a higher plan. * Zoom Room must be enabled in the account.
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def dashboard_issue_zoom_room(from, to, opts = {})
      data, _status_code, _headers = dashboard_issue_zoom_room_with_http_info(from, to, opts)
      data
    end

    # Get Top 25 Zoom Rooms with Issues
    # Get information on top 25 Zoom Rooms with issues in a month. The month specified with the \&quot;from\&quot; and \&quot;to\&quot; range should fall within the last six months.&lt;br&gt; **Scope:** &#x60;dashboard_home:read:admin&#x60;&lt;br&gt; &lt;br&gt; **Prerequisites:**&lt;br&gt; * Business or a higher plan. * Zoom Room must be enabled in the account.
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def dashboard_issue_zoom_room_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.dashboard_issue_zoom_room ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DashboardsApi.dashboard_issue_zoom_room"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling DashboardsApi.dashboard_issue_zoom_room"
      end
      # resource path
      local_var_path = '/metrics/issues/zoomrooms'

      # query parameters
      query_params = {}
      query_params[:'from'] = from
      query_params[:'to'] = to

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#dashboard_issue_zoom_room\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Meeting Details
    # Get details on live or past meetings. This overview will show if features such as audio, video, screen sharing, and recording were being used in the meeting. You can also see the license types of each user on your account.<br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.  <br> **Scopes:** `dashboard_meetings:read:admin`<br> <br> **Prerequisites:** <br> * Business or a higher plan.
    # @param meeting_id The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The meeting types: &lt;br&gt;&#x60;past&#x60; - Past meetings.&lt;br&gt;&#x60;pastOne&#x60; - Past one user meetings.&lt;br&gt;&#x60;live&#x60; - Live meetings. (default to live)
    # @return [MeetingMetrics]
    def dashboard_meeting_detail(meeting_id, opts = {})
      data, _status_code, _headers = dashboard_meeting_detail_with_http_info(meeting_id, opts)
      data
    end

    # Get Meeting Details
    # Get details on live or past meetings. This overview will show if features such as audio, video, screen sharing, and recording were being used in the meeting. You can also see the license types of each user on your account.&lt;br&gt; You can specify a monthly date range for the dashboard data using the &#x60;from&#x60; and &#x60;to&#x60; query parameters. The month should fall within the last six months.  &lt;br&gt; **Scopes:** &#x60;dashboard_meetings:read:admin&#x60;&lt;br&gt; &lt;br&gt; **Prerequisites:** &lt;br&gt; * Business or a higher plan.
    # @param meeting_id The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The meeting types: &lt;br&gt;&#x60;past&#x60; - Past meetings.&lt;br&gt;&#x60;pastOne&#x60; - Past one user meetings.&lt;br&gt;&#x60;live&#x60; - Live meetings.
    # @return [Array<(MeetingMetrics, Fixnum, Hash)>] MeetingMetrics data, response status code and response headers
    def dashboard_meeting_detail_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.dashboard_meeting_detail ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling DashboardsApi.dashboard_meeting_detail"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['past', 'pastOne', 'live'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of past, pastOne, live'
      end
      # resource path
      local_var_path = '/metrics/meetings/{meetingId}'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MeetingMetrics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#dashboard_meeting_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Meeting Participant QOS
    # Retrieve the quality of service for participants from live or past meetings. This data indicates the connection quality for sending/receiving video, audio, and shared content. If nothing is being sent or received at that time, no information will be shown in the fields. <br><br> **Scopes:** `dashboard:read:admin`<br>
    # @param meeting_id The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
    # @param participant_id Participant ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The meeting types: &lt;br&gt;&#x60;past&#x60; - Past meetings.&lt;br&gt;&#x60;live&#x60; - Live Meetings. (default to live)
    # @return [ParticipantQOS]
    def dashboard_meeting_participant_qos(meeting_id, participant_id, opts = {})
      data, _status_code, _headers = dashboard_meeting_participant_qos_with_http_info(meeting_id, participant_id, opts)
      data
    end

    # Get Meeting Participant QOS
    # Retrieve the quality of service for participants from live or past meetings. This data indicates the connection quality for sending/receiving video, audio, and shared content. If nothing is being sent or received at that time, no information will be shown in the fields. &lt;br&gt;&lt;br&gt; **Scopes:** &#x60;dashboard:read:admin&#x60;&lt;br&gt;
    # @param meeting_id The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
    # @param participant_id Participant ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The meeting types: &lt;br&gt;&#x60;past&#x60; - Past meetings.&lt;br&gt;&#x60;live&#x60; - Live Meetings.
    # @return [Array<(ParticipantQOS, Fixnum, Hash)>] ParticipantQOS data, response status code and response headers
    def dashboard_meeting_participant_qos_with_http_info(meeting_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.dashboard_meeting_participant_qos ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling DashboardsApi.dashboard_meeting_participant_qos"
      end
      # verify the required parameter 'participant_id' is set
      if @api_client.config.client_side_validation && participant_id.nil?
        fail ArgumentError, "Missing the required parameter 'participant_id' when calling DashboardsApi.dashboard_meeting_participant_qos"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['past', 'pastOne', 'live'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of past, pastOne, live'
      end
      # resource path
      local_var_path = '/metrics/meetings/{meetingId}/participants/{participantId}/qos'.sub('{' + 'meetingId' + '}', meeting_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ParticipantQOS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#dashboard_meeting_participant_qos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Sharing/Recording Details of Meeting Participants
    # Retrieve the sharing and recording details of participants from live or past meetings.<br><br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.<br> **Scopes:** `dashboard:read:admin`<br> <br> **Prerequisites:** <br> * Business or a higher plan.
    # @param meeting_id The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The meeting types: &lt;br&gt;&#x60;past&#x60; - Past meetings.&lt;br&gt;&#x60;live&#x60; - Live Meetings. (default to live)
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.
    # @return [InlineResponse20028]
    def dashboard_meeting_participant_share(meeting_id, opts = {})
      data, _status_code, _headers = dashboard_meeting_participant_share_with_http_info(meeting_id, opts)
      data
    end

    # Get Sharing/Recording Details of Meeting Participants
    # Retrieve the sharing and recording details of participants from live or past meetings.&lt;br&gt;&lt;br&gt; You can specify a monthly date range for the dashboard data using the &#x60;from&#x60; and &#x60;to&#x60; query parameters. The month should fall within the last six months.&lt;br&gt; **Scopes:** &#x60;dashboard:read:admin&#x60;&lt;br&gt; &lt;br&gt; **Prerequisites:** &lt;br&gt; * Business or a higher plan.
    # @param meeting_id The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The meeting types: &lt;br&gt;&#x60;past&#x60; - Past meetings.&lt;br&gt;&#x60;live&#x60; - Live Meetings.
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.
    # @return [Array<(InlineResponse20028, Fixnum, Hash)>] InlineResponse20028 data, response status code and response headers
    def dashboard_meeting_participant_share_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.dashboard_meeting_participant_share ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling DashboardsApi.dashboard_meeting_participant_share"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['past', 'pastOne', 'live'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of past, pastOne, live'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardsApi.dashboard_meeting_participant_share, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/metrics/meetings/{meetingId}/participants/sharing'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20028')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#dashboard_meeting_participant_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Meeting Participants
    # Get a list of participants from live or past meetings.<br><br> If you do not provide the `type` query parameter, the default value will be set to `live` and thus, you will only see metrics for participants in a live meeting, if any meeting is currently being conducted. To view metrics on past meeting participants, provide the appropriate value for `type`. <br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.  **Scopes:** `dashboard_meetings:read:admin`<br> <br> **Prerequisites:** Business or a higher plan.
    # @param meeting_id The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The meeting types: &lt;br&gt;&#x60;past&#x60; - Past meetings.&lt;br&gt;&#x60;pastOne&#x60; - Past one user meetings.&lt;br&gt;&#x60;live&#x60; - Live meetings. (default to live)
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [InlineResponse20027]
    def dashboard_meeting_participants(meeting_id, opts = {})
      data, _status_code, _headers = dashboard_meeting_participants_with_http_info(meeting_id, opts)
      data
    end

    # List Meeting Participants
    # Get a list of participants from live or past meetings.&lt;br&gt;&lt;br&gt; If you do not provide the &#x60;type&#x60; query parameter, the default value will be set to &#x60;live&#x60; and thus, you will only see metrics for participants in a live meeting, if any meeting is currently being conducted. To view metrics on past meeting participants, provide the appropriate value for &#x60;type&#x60;. &lt;br&gt; You can specify a monthly date range for the dashboard data using the &#x60;from&#x60; and &#x60;to&#x60; query parameters. The month should fall within the last six months.  **Scopes:** &#x60;dashboard_meetings:read:admin&#x60;&lt;br&gt; &lt;br&gt; **Prerequisites:** Business or a higher plan.
    # @param meeting_id The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The meeting types: &lt;br&gt;&#x60;past&#x60; - Past meetings.&lt;br&gt;&#x60;pastOne&#x60; - Past one user meetings.&lt;br&gt;&#x60;live&#x60; - Live meetings.
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [Array<(InlineResponse20027, Fixnum, Hash)>] InlineResponse20027 data, response status code and response headers
    def dashboard_meeting_participants_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.dashboard_meeting_participants ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling DashboardsApi.dashboard_meeting_participants"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['past', 'pastOne', 'live'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of past, pastOne, live'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardsApi.dashboard_meeting_participants, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/metrics/meetings/{meetingId}/participants'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20027')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#dashboard_meeting_participants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Meeting Participants QOS
    # Get a list of meeting participants from live or past meetings along with the quality of service they recieve during the meeting such as connection quality for sending/receiving video, audio, and shared content.<br>If you do not provide the `type` query parameter, the default value will be set to `live` and thus, you will only see metrics for participants in a live meeting, if any meeting is currently being conducted. To view metrics on past meeting participants, provide the appropriate value for `type`.<br> <br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months. **Scopes:** `dashboard_meetings:read:admin`<br> <br> **Prerequisites:** <br> * Business or a higher plan.
    # @param meeting_id The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The meeting types: &lt;br&gt;&#x60;past&#x60; - Past meetings.&lt;br&gt;&#x60;live&#x60; - Live Meetings. (default to live)
    # @option opts [Integer] :page_size The number of items returned per page. (default to 1)
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [ParticipantQOSList]
    def dashboard_meeting_participants_qos(meeting_id, opts = {})
      data, _status_code, _headers = dashboard_meeting_participants_qos_with_http_info(meeting_id, opts)
      data
    end

    # List Meeting Participants QOS
    # Get a list of meeting participants from live or past meetings along with the quality of service they recieve during the meeting such as connection quality for sending/receiving video, audio, and shared content.&lt;br&gt;If you do not provide the &#x60;type&#x60; query parameter, the default value will be set to &#x60;live&#x60; and thus, you will only see metrics for participants in a live meeting, if any meeting is currently being conducted. To view metrics on past meeting participants, provide the appropriate value for &#x60;type&#x60;.&lt;br&gt; &lt;br&gt; You can specify a monthly date range for the dashboard data using the &#x60;from&#x60; and &#x60;to&#x60; query parameters. The month should fall within the last six months. **Scopes:** &#x60;dashboard_meetings:read:admin&#x60;&lt;br&gt; &lt;br&gt; **Prerequisites:** &lt;br&gt; * Business or a higher plan.
    # @param meeting_id The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The meeting types: &lt;br&gt;&#x60;past&#x60; - Past meetings.&lt;br&gt;&#x60;live&#x60; - Live Meetings.
    # @option opts [Integer] :page_size The number of items returned per page.
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [Array<(ParticipantQOSList, Fixnum, Hash)>] ParticipantQOSList data, response status code and response headers
    def dashboard_meeting_participants_qos_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.dashboard_meeting_participants_qos ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling DashboardsApi.dashboard_meeting_participants_qos"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['past', 'pastOne', 'live'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of past, pastOne, live'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 10
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardsApi.dashboard_meeting_participants_qos, must be smaller than or equal to 10.'
      end

      # resource path
      local_var_path = '/metrics/meetings/{meetingId}/participants/qos'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ParticipantQOSList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#dashboard_meeting_participants_qos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Meetings
    # List total live or past meetings that occurred during a specified period of time. This overview will show if features such as audio, video, screen sharing, and recording were being used in the meeting. You can also see the license types of each user on your account.<br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.<br> **Scopes:** `dashboard_meetings:read:admin`<br> **Prerequisites:** <br> * Business or a higher plan.<br><br>
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The meeting types: &lt;br&gt;&#x60;past&#x60; - Past meetings.&lt;br&gt;&#x60;pastOne&#x60; - Past one user meetings. &lt;br&gt;&#x60;live&#x60; - Live meetings. (default to live)
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [InlineResponse20026]
    def dashboard_meetings(from, to, opts = {})
      data, _status_code, _headers = dashboard_meetings_with_http_info(from, to, opts)
      data
    end

    # List Meetings
    # List total live or past meetings that occurred during a specified period of time. This overview will show if features such as audio, video, screen sharing, and recording were being used in the meeting. You can also see the license types of each user on your account.&lt;br&gt; You can specify a monthly date range for the dashboard data using the &#x60;from&#x60; and &#x60;to&#x60; query parameters. The month should fall within the last six months.&lt;br&gt; **Scopes:** &#x60;dashboard_meetings:read:admin&#x60;&lt;br&gt; **Prerequisites:** &lt;br&gt; * Business or a higher plan.&lt;br&gt;&lt;br&gt;
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The meeting types: &lt;br&gt;&#x60;past&#x60; - Past meetings.&lt;br&gt;&#x60;pastOne&#x60; - Past one user meetings. &lt;br&gt;&#x60;live&#x60; - Live meetings.
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [Array<(InlineResponse20026, Fixnum, Hash)>] InlineResponse20026 data, response status code and response headers
    def dashboard_meetings_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.dashboard_meetings ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DashboardsApi.dashboard_meetings"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling DashboardsApi.dashboard_meetings"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['past', 'pastOne', 'live'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of past, pastOne, live'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardsApi.dashboard_meetings, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/metrics/meetings'

      # query parameters
      query_params = {}
      query_params[:'from'] = from
      query_params[:'to'] = to
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20026')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#dashboard_meetings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Webinar Details
    # Retrieve details from live or past webinars.<br><br> **Scopes:** `dashboard:read:admin`<br> <br> **Prerequisites:**<br> * Business, Education or API Plan with Webinar add-on.
    # @param webinar_id The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The webinar type. (default to live)
    # @return [WebinarMetrics]
    def dashboard_webinar_detail(webinar_id, opts = {})
      data, _status_code, _headers = dashboard_webinar_detail_with_http_info(webinar_id, opts)
      data
    end

    # Get Webinar Details
    # Retrieve details from live or past webinars.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;dashboard:read:admin&#x60;&lt;br&gt; &lt;br&gt; **Prerequisites:**&lt;br&gt; * Business, Education or API Plan with Webinar add-on.
    # @param webinar_id The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The webinar type.
    # @return [Array<(WebinarMetrics, Fixnum, Hash)>] WebinarMetrics data, response status code and response headers
    def dashboard_webinar_detail_with_http_info(webinar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.dashboard_webinar_detail ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling DashboardsApi.dashboard_webinar_detail"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['past', 'live'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of past, live'
      end
      # resource path
      local_var_path = '/metrics/webinars/{webinarId}'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebinarMetrics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#dashboard_webinar_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Webinar Participant QOS
    # Retrieve details on the quality of service that participants from live or past webinars recieved.<br>This data indicates the connection quality for sending/receiving video, audio, and shared content. If nothing is being sent or received at that time, no information will be shown in the fields.<br> **Scopes:** `dashboard:read:admin`<br> <br> **Prerequisites:** <br> * Business, Education or API Plan with Zoom Rooms set up.
    # @param webinar_id The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance.
    # @param participant_id Participant ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The webinar type. (default to live)
    # @return [ParticipantQOS]
    def dashboard_webinar_participant_qos(webinar_id, participant_id, opts = {})
      data, _status_code, _headers = dashboard_webinar_participant_qos_with_http_info(webinar_id, participant_id, opts)
      data
    end

    # Get Webinar Participant QOS
    # Retrieve details on the quality of service that participants from live or past webinars recieved.&lt;br&gt;This data indicates the connection quality for sending/receiving video, audio, and shared content. If nothing is being sent or received at that time, no information will be shown in the fields.&lt;br&gt; **Scopes:** &#x60;dashboard:read:admin&#x60;&lt;br&gt; &lt;br&gt; **Prerequisites:** &lt;br&gt; * Business, Education or API Plan with Zoom Rooms set up.
    # @param webinar_id The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance.
    # @param participant_id Participant ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The webinar type.
    # @return [Array<(ParticipantQOS, Fixnum, Hash)>] ParticipantQOS data, response status code and response headers
    def dashboard_webinar_participant_qos_with_http_info(webinar_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.dashboard_webinar_participant_qos ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling DashboardsApi.dashboard_webinar_participant_qos"
      end
      # verify the required parameter 'participant_id' is set
      if @api_client.config.client_side_validation && participant_id.nil?
        fail ArgumentError, "Missing the required parameter 'participant_id' when calling DashboardsApi.dashboard_webinar_participant_qos"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['past', 'live'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of past, live'
      end
      # resource path
      local_var_path = '/metrics/webinars/{webinarId}/participants/{participantId}/qos'.sub('{' + 'webinarId' + '}', webinar_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ParticipantQOS')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#dashboard_webinar_participant_qos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Sharing/Recording Details of Webinar Participants
    # Retrieve the sharing and recording details of participants from live or past webinars. <br><br> **Scopes:** `dashboard:read:admin`<br> <br> **Prerequisites:**<br> * Business, Education or API Plan with Webinar add-on.
    # @param webinar_id The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The webinar type. (default to live)
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.
    # @return [InlineResponse20028]
    def dashboard_webinar_participant_share(webinar_id, opts = {})
      data, _status_code, _headers = dashboard_webinar_participant_share_with_http_info(webinar_id, opts)
      data
    end

    # Get Sharing/Recording Details of Webinar Participants
    # Retrieve the sharing and recording details of participants from live or past webinars. &lt;br&gt;&lt;br&gt; **Scopes:** &#x60;dashboard:read:admin&#x60;&lt;br&gt; &lt;br&gt; **Prerequisites:**&lt;br&gt; * Business, Education or API Plan with Webinar add-on.
    # @param webinar_id The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The webinar type.
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.
    # @return [Array<(InlineResponse20028, Fixnum, Hash)>] InlineResponse20028 data, response status code and response headers
    def dashboard_webinar_participant_share_with_http_info(webinar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.dashboard_webinar_participant_share ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling DashboardsApi.dashboard_webinar_participant_share"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['past', 'live'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of past, live'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardsApi.dashboard_webinar_participant_share, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/metrics/webinars/{webinarId}/participants/sharing'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20028')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#dashboard_webinar_participant_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Webinar Participants
    # Retrieve details on participants from live or past webinars.<br><br> **Scopes:** `dashboard:read:admin`<br> <br> **Prerequisites:**<br> * Business, Education or API Plan with Webinar add-on.
    # @param webinar_id The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The webinar type. (default to live)
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [InlineResponse20030]
    def dashboard_webinar_participants(webinar_id, opts = {})
      data, _status_code, _headers = dashboard_webinar_participants_with_http_info(webinar_id, opts)
      data
    end

    # Get Webinar Participants
    # Retrieve details on participants from live or past webinars.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;dashboard:read:admin&#x60;&lt;br&gt; &lt;br&gt; **Prerequisites:**&lt;br&gt; * Business, Education or API Plan with Webinar add-on.
    # @param webinar_id The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The webinar type.
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [Array<(InlineResponse20030, Fixnum, Hash)>] InlineResponse20030 data, response status code and response headers
    def dashboard_webinar_participants_with_http_info(webinar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.dashboard_webinar_participants ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling DashboardsApi.dashboard_webinar_participants"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['past', 'live'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of past, live'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardsApi.dashboard_webinar_participants, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/metrics/webinars/{webinarId}/participants'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20030')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#dashboard_webinar_participants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Webinar Participant QOS
    # Retrieve a list of participants from live or past webinars and the quality of service they received.<br>This data indicates the connection quality for sending/receiving video, audio, and shared content. If nothing is being sent or received at that time, no information will be shown in the fields.<br> **Scopes:** `dashboard:read:admin`<br> <br> **Prerequisites:** * Business, Education or API Plan with Webinar add-on.
    # @param webinar_id The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The webinar type. (default to live)
    # @option opts [Integer] :page_size The number of items returned per page. (default to 1)
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [ParticipantQOSList]
    def dashboard_webinar_participants_qos(webinar_id, opts = {})
      data, _status_code, _headers = dashboard_webinar_participants_qos_with_http_info(webinar_id, opts)
      data
    end

    # List Webinar Participant QOS
    # Retrieve a list of participants from live or past webinars and the quality of service they received.&lt;br&gt;This data indicates the connection quality for sending/receiving video, audio, and shared content. If nothing is being sent or received at that time, no information will be shown in the fields.&lt;br&gt; **Scopes:** &#x60;dashboard:read:admin&#x60;&lt;br&gt; &lt;br&gt; **Prerequisites:** * Business, Education or API Plan with Webinar add-on.
    # @param webinar_id The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The webinar type.
    # @option opts [Integer] :page_size The number of items returned per page.
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [Array<(ParticipantQOSList, Fixnum, Hash)>] ParticipantQOSList data, response status code and response headers
    def dashboard_webinar_participants_qos_with_http_info(webinar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.dashboard_webinar_participants_qos ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling DashboardsApi.dashboard_webinar_participants_qos"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['past', 'live'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of past, live'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 10
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardsApi.dashboard_webinar_participants_qos, must be smaller than or equal to 10.'
      end

      # resource path
      local_var_path = '/metrics/webinars/{webinarId}/participants/qos'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ParticipantQOSList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#dashboard_webinar_participants_qos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Webinars
    # List all the live or past webinars from a specified period of time. <br><br> **Scopes:** `dashboard:read:admin`<br> **Prerequisites:**<br> * Business, Education or API Plan with Webinar add-on.
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The webinar type. (default to live)
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [InlineResponse20029]
    def dashboard_webinars(from, to, opts = {})
      data, _status_code, _headers = dashboard_webinars_with_http_info(from, to, opts)
      data
    end

    # List Webinars
    # List all the live or past webinars from a specified period of time. &lt;br&gt;&lt;br&gt; **Scopes:** &#x60;dashboard:read:admin&#x60;&lt;br&gt; **Prerequisites:**&lt;br&gt; * Business, Education or API Plan with Webinar add-on.
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The webinar type.
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [Array<(InlineResponse20029, Fixnum, Hash)>] InlineResponse20029 data, response status code and response headers
    def dashboard_webinars_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.dashboard_webinars ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DashboardsApi.dashboard_webinars"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling DashboardsApi.dashboard_webinars"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['past', 'live'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of past, live'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardsApi.dashboard_webinars, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/metrics/webinars'

      # query parameters
      query_params = {}
      query_params[:'from'] = from
      query_params[:'to'] = to
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20029')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#dashboard_webinars\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Zoom Rooms Details
    # The Zoom Rooms dashboard metrics lets you know the type of configuration a Zoom room has and details on the meetings held in that room.   Use this API to retrieve information on a specific room.<br><br> **Scopes:** `dashboard_zr:read:admin`<br> <br> **Prerequisites:**<br> * Business, Education or API Plan with Zoom Rooms set up.
    # @param zoomroom_id The Zoom room ID.
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [Integer] :page_number The current page number of returned records. (default to 1)
    # @return [Object]
    def dashboard_zoom_room(zoomroom_id, from, to, opts = {})
      data, _status_code, _headers = dashboard_zoom_room_with_http_info(zoomroom_id, from, to, opts)
      data
    end

    # Get Zoom Rooms Details
    # The Zoom Rooms dashboard metrics lets you know the type of configuration a Zoom room has and details on the meetings held in that room.   Use this API to retrieve information on a specific room.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;dashboard_zr:read:admin&#x60;&lt;br&gt; &lt;br&gt; **Prerequisites:**&lt;br&gt; * Business, Education or API Plan with Zoom Rooms set up.
    # @param zoomroom_id The Zoom room ID.
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [Integer] :page_number The current page number of returned records.
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def dashboard_zoom_room_with_http_info(zoomroom_id, from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.dashboard_zoom_room ...'
      end
      # verify the required parameter 'zoomroom_id' is set
      if @api_client.config.client_side_validation && zoomroom_id.nil?
        fail ArgumentError, "Missing the required parameter 'zoomroom_id' when calling DashboardsApi.dashboard_zoom_room"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DashboardsApi.dashboard_zoom_room"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling DashboardsApi.dashboard_zoom_room"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardsApi.dashboard_zoom_room, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/metrics/zoomrooms/{zoomroomId}'.sub('{' + 'zoomroomId' + '}', zoomroom_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = from
      query_params[:'to'] = to
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page_number'] = opts[:'page_number'] if !opts[:'page_number'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#dashboard_zoom_room\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Top 25 issues of Zoom Rooms
    # Get Top 25 issues of Zoom Rooms.<br> **Scopes:** `dashboard_zr:read:admin`<br> <br> **Prerequisites:**<br> * Business, Education or API Plan with Zoom Rooms set up.
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def dashboard_zoom_room_issue(from, to, opts = {})
      data, _status_code, _headers = dashboard_zoom_room_issue_with_http_info(from, to, opts)
      data
    end

    # Get Top 25 issues of Zoom Rooms
    # Get Top 25 issues of Zoom Rooms.&lt;br&gt; **Scopes:** &#x60;dashboard_zr:read:admin&#x60;&lt;br&gt; &lt;br&gt; **Prerequisites:**&lt;br&gt; * Business, Education or API Plan with Zoom Rooms set up.
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def dashboard_zoom_room_issue_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.dashboard_zoom_room_issue ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DashboardsApi.dashboard_zoom_room_issue"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling DashboardsApi.dashboard_zoom_room_issue"
      end
      # resource path
      local_var_path = '/metrics/zoomrooms/issues'

      # query parameters
      query_params = {}
      query_params[:'from'] = from
      query_params[:'to'] = to

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#dashboard_zoom_room_issue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Zoom Rooms
    # List information on all Zoom Rooms in an account.<br><br> **Scopes:** `dashboard_zr:read:admin` **Prerequisites:**<br> * Business, Education or API Plan with Zoom Rooms set up.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [Integer] :page_number The current page number of returned records. (default to 1)
    # @return [ZoomRoomList]
    def dashboard_zoom_rooms(opts = {})
      data, _status_code, _headers = dashboard_zoom_rooms_with_http_info(opts)
      data
    end

    # List Zoom Rooms
    # List information on all Zoom Rooms in an account.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;dashboard_zr:read:admin&#x60; **Prerequisites:**&lt;br&gt; * Business, Education or API Plan with Zoom Rooms set up.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [Integer] :page_number The current page number of returned records.
    # @return [Array<(ZoomRoomList, Fixnum, Hash)>] ZoomRoomList data, response status code and response headers
    def dashboard_zoom_rooms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.dashboard_zoom_rooms ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling DashboardsApi.dashboard_zoom_rooms, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/metrics/zoomrooms'

      # query parameters
      query_params = {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page_number'] = opts[:'page_number'] if !opts[:'page_number'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ZoomRoomList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#dashboard_zoom_rooms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Client Meeting Satisfaction
    # If the [End of Meeting Feedback Survey](https://support.zoom.us/hc/en-us/articles/115005855266) option is enabled, attendees will be prompted with a survey window where they can tap either the **Thumbs Up** or **Thumbs Down** button that indicates their Zoom meeting experience. With this API, you can get information on the attendees' meeting satisfaction. Specify a monthly date range for the query using the from and to query parameters. The month should fall within the last six months.  To get information on the survey results with negative experiences (indicated by **Thumbs Down**), use the [Get Zoom Meetings Client Feedback API](https://marketplace.zoom.us/docs/api-reference/zoom-api/dashboards/dashboardclientfeedbackdetail).<br> **Scopes:** `dashboard:read:admin`<br>
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :from The start date for the query in “yyyy-mm-dd” format.
    # @option opts [Date] :to The end date for the query in “yyyy-mm-dd” format.
    # @return [InlineResponse20087]
    def list_meeting_satisfaction(opts = {})
      data, _status_code, _headers = list_meeting_satisfaction_with_http_info(opts)
      data
    end

    # List Client Meeting Satisfaction
    # If the [End of Meeting Feedback Survey](https://support.zoom.us/hc/en-us/articles/115005855266) option is enabled, attendees will be prompted with a survey window where they can tap either the **Thumbs Up** or **Thumbs Down** button that indicates their Zoom meeting experience. With this API, you can get information on the attendees&#39; meeting satisfaction. Specify a monthly date range for the query using the from and to query parameters. The month should fall within the last six months.  To get information on the survey results with negative experiences (indicated by **Thumbs Down**), use the [Get Zoom Meetings Client Feedback API](https://marketplace.zoom.us/docs/api-reference/zoom-api/dashboards/dashboardclientfeedbackdetail).&lt;br&gt; **Scopes:** &#x60;dashboard:read:admin&#x60;&lt;br&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :from The start date for the query in “yyyy-mm-dd” format.
    # @option opts [Date] :to The end date for the query in “yyyy-mm-dd” format.
    # @return [Array<(InlineResponse20087, Fixnum, Hash)>] InlineResponse20087 data, response status code and response headers
    def list_meeting_satisfaction_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardsApi.list_meeting_satisfaction ...'
      end
      # resource path
      local_var_path = '/metrics/client/satisfaction'

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20087')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardsApi#list_meeting_satisfaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
