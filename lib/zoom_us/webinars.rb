=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module ZoomUs
  class Webinars
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Webinar Tracking Sources
    # [Webinar Registration Tracking Sources](https://support.zoom.us/hc/en-us/articles/360000315683-Webinar-Registration-Source-Tracking) allow you to see where your registrants are coming from if you share the webinar registration page in multiple platforms. You can then use the source tracking to see the number of registrants generated from each platform.<br> Use this API to list information on all the tracking sources of a Webinar.<br> **Scopes:** `webinar:read:admin`, `webinar:read`<br>  <br> **Prerequisites**:<br> * [Webinar license](https://zoom.us/webinar). * Registration must be required for the Webinar.
    # @param webinar_id The webinar ID.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20074]
    def get_tracking_sources(webinar_id, opts = {})
      data, _status_code, _headers = get_tracking_sources_with_http_info(webinar_id, opts)
      data
    end

    # Get Webinar Tracking Sources
    # [Webinar Registration Tracking Sources](https://support.zoom.us/hc/en-us/articles/360000315683-Webinar-Registration-Source-Tracking) allow you to see where your registrants are coming from if you share the webinar registration page in multiple platforms. You can then use the source tracking to see the number of registrants generated from each platform.&lt;br&gt; Use this API to list information on all the tracking sources of a Webinar.&lt;br&gt; **Scopes:** &#x60;webinar:read:admin&#x60;, &#x60;webinar:read&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites**:&lt;br&gt; * [Webinar license](https://zoom.us/webinar). * Registration must be required for the Webinar.
    # @param webinar_id The webinar ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20074, Fixnum, Hash)>] InlineResponse20074 data, response status code and response headers
    def get_tracking_sources_with_http_info(webinar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.get_tracking_sources ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.get_tracking_sources"
      end
      # resource path
      local_var_path = '/webinars/{webinarId}/tracking_sources'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20074')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#get_tracking_sources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Past Webinar Files
    # List files sent via in-meeting chat during a meeting. The in-meeting files are deleted after 24 hours of the meeting completion time.  <br><br> **Scope:** `webinar:read`, `webinar:read:admin`<br>  <br>
    # @param webinar_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20084]
    def list_past_webinar_files(webinar_id, opts = {})
      data, _status_code, _headers = list_past_webinar_files_with_http_info(webinar_id, opts)
      data
    end

    # List Past Webinar Files
    # List files sent via in-meeting chat during a meeting. The in-meeting files are deleted after 24 hours of the meeting completion time.  &lt;br&gt;&lt;br&gt; **Scope:** &#x60;webinar:read&#x60;, &#x60;webinar:read:admin&#x60;&lt;br&gt;  &lt;br&gt;
    # @param webinar_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20084, Fixnum, Hash)>] InlineResponse20084 data, response status code and response headers
    def list_past_webinar_files_with_http_info(webinar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.list_past_webinar_files ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.list_past_webinar_files"
      end
      # resource path
      local_var_path = '/past_webinars/{webinarId}/files'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20084')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#list_past_webinar_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Past Webinar Poll Results
    # The polling feature for webinar allows you to create single choice or multiple choice polling questions for your webinars. Use this API to retrieve the results for Webinar Polls of a specific Webinar.  **Prerequisites:**<br> * [Webinar license](https://zoom.us/webinar)<br> **Scopes**: `webinar:read:admin`, `webinar:read`<br>  <br>
    # @param webinar_id The Webinar ID or Webinar UUID. If the webinar ID is passed, it will take the last webinar instance.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20085]
    def list_past_webinar_poll_results(webinar_id, opts = {})
      data, _status_code, _headers = list_past_webinar_poll_results_with_http_info(webinar_id, opts)
      data
    end

    # List Past Webinar Poll Results
    # The polling feature for webinar allows you to create single choice or multiple choice polling questions for your webinars. Use this API to retrieve the results for Webinar Polls of a specific Webinar.  **Prerequisites:**&lt;br&gt; * [Webinar license](https://zoom.us/webinar)&lt;br&gt; **Scopes**: &#x60;webinar:read:admin&#x60;, &#x60;webinar:read&#x60;&lt;br&gt;  &lt;br&gt;
    # @param webinar_id The Webinar ID or Webinar UUID. If the webinar ID is passed, it will take the last webinar instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20085, Fixnum, Hash)>] InlineResponse20085 data, response status code and response headers
    def list_past_webinar_poll_results_with_http_info(webinar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.list_past_webinar_poll_results ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.list_past_webinar_poll_results"
      end
      # resource path
      local_var_path = '/past_webinars/{webinarId}/polls'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20085')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#list_past_webinar_poll_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Q&A of Past Webinar
    # The [Question & Answer (Q&A)](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) feature for Webinars allows attendees to ask questions during the Webinar and for the panelists, co-hosts and host to answer their questions.<br> Use this API to list Q&A of a specific Webinar.  **Prerequisites:**<br> * [Webinar license](https://zoom.us/webinar)<br> **Scopes**: `webinar:read:admin`, `webinar:read`<br>  <br>
    # @param webinar_id The Webinar ID or Webinar UUID. If the webinar ID is passed, it will take the last webinar instance.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20086]
    def list_past_webinar_qa(webinar_id, opts = {})
      data, _status_code, _headers = list_past_webinar_qa_with_http_info(webinar_id, opts)
      data
    end

    # List Q&amp;A of Past Webinar
    # The [Question &amp; Answer (Q&amp;A)](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) feature for Webinars allows attendees to ask questions during the Webinar and for the panelists, co-hosts and host to answer their questions.&lt;br&gt; Use this API to list Q&amp;A of a specific Webinar.  **Prerequisites:**&lt;br&gt; * [Webinar license](https://zoom.us/webinar)&lt;br&gt; **Scopes**: &#x60;webinar:read:admin&#x60;, &#x60;webinar:read&#x60;&lt;br&gt;  &lt;br&gt;
    # @param webinar_id The Webinar ID or Webinar UUID. If the webinar ID is passed, it will take the last webinar instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20086, Fixnum, Hash)>] InlineResponse20086 data, response status code and response headers
    def list_past_webinar_qa_with_http_info(webinar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.list_past_webinar_qa ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.list_past_webinar_qa"
      end
      # resource path
      local_var_path = '/past_webinars/{webinarId}/qa'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20086')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#list_past_webinar_qa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Past Webinar Instances
    # List past webinar instances.<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br>  <br>
    # @param webinar_id The webinar ID.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def past_webinars(webinar_id, opts = {})
      data, _status_code, _headers = past_webinars_with_http_info(webinar_id, opts)
      data
    end

    # List Past Webinar Instances
    # List past webinar instances.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;webinar:read:admin&#x60; &#x60;webinar:read&#x60;&lt;br&gt;  &lt;br&gt;
    # @param webinar_id The webinar ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def past_webinars_with_http_info(webinar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.past_webinars ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.past_webinars"
      end
      # resource path
      local_var_path = '/past_webinars/{webinarId}/instances'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#past_webinars\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Webinar
    # Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.<br>Use this API to get details of a scheduled webinar.<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br> <br>**Prerequisites:** * Pro or higher plan with a Webinar Add-on.
    # @param webinar_id The webinar ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences. When you create a recurring Webinar using [Create a Webinar API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate), you can retrieve the Occurrence ID from the response of the API call.
    # @return [InlineResponse20054]
    def webinar(webinar_id, opts = {})
      data, _status_code, _headers = webinar_with_http_info(webinar_id, opts)
      data
    end

    # Get a Webinar
    # Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.&lt;br&gt;Use this API to get details of a scheduled webinar.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;webinar:read:admin&#x60; &#x60;webinar:read&#x60;&lt;br&gt; &lt;br&gt;**Prerequisites:** * Pro or higher plan with a Webinar Add-on.
    # @param webinar_id The webinar ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences. When you create a recurring Webinar using [Create a Webinar API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate), you can retrieve the Occurrence ID from the response of the API call.
    # @return [Array<(InlineResponse20054, Fixnum, Hash)>] InlineResponse20054 data, response status code and response headers
    def webinar_with_http_info(webinar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinar ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.webinar"
      end
      # resource path
      local_var_path = '/webinars/{webinarId}'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'occurrence_id'] = opts[:'occurrence_id'] if !opts[:'occurrence_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20054')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinar\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Webinar Absentees
    # List absentees of a webinar.<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br>
    # @param webinar_uuid The webinar UUID. Please double encode your UUID when using it for API calls if the UUID begins with a &#39;/&#39;or contains &#39;//&#39; in it.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id The meeting occurrence ID.
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [RegistrationList]
    def webinar_absentees(webinar_uuid, opts = {})
      data, _status_code, _headers = webinar_absentees_with_http_info(webinar_uuid, opts)
      data
    end

    # Get Webinar Absentees
    # List absentees of a webinar.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;webinar:read:admin&#x60; &#x60;webinar:read&#x60;&lt;br&gt;
    # @param webinar_uuid The webinar UUID. Please double encode your UUID when using it for API calls if the UUID begins with a &#39;/&#39;or contains &#39;//&#39; in it.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id The meeting occurrence ID.
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [Array<(RegistrationList, Fixnum, Hash)>] RegistrationList data, response status code and response headers
    def webinar_absentees_with_http_info(webinar_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinar_absentees ...'
      end
      # verify the required parameter 'webinar_uuid' is set
      if @api_client.config.client_side_validation && webinar_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_uuid' when calling WebinarsApi.webinar_absentees"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling WebinarsApi.webinar_absentees, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/past_webinars/{WebinarUUID}/absentees'.sub('{' + 'WebinarUUID' + '}', webinar_uuid.to_s)

      # query parameters
      query_params = {}
      query_params[:'occurrence_id'] = opts[:'occurrence_id'] if !opts[:'occurrence_id'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinar_absentees\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Webinar
    # Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.<br>Use this API to schedule a Webinar for a user (host).<br><br>  **Scopes:** `webinar:write:admin` `webinar:write`<br>  <br> **Prerequisites:** * Pro or higher plan with a Webinar Add-on.
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20118]
    def webinar_create(user_id, body, opts = {})
      data, _status_code, _headers = webinar_create_with_http_info(user_id, body, opts)
      data
    end

    # Create a Webinar
    # Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.&lt;br&gt;Use this API to schedule a Webinar for a user (host).&lt;br&gt;&lt;br&gt;  **Scopes:** &#x60;webinar:write:admin&#x60; &#x60;webinar:write&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:** * Pro or higher plan with a Webinar Add-on.
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20118, Fixnum, Hash)>] InlineResponse20118 data, response status code and response headers
    def webinar_create_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinar_create ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling WebinarsApi.webinar_create"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling WebinarsApi.webinar_create"
      end
      # resource path
      local_var_path = '/users/{userId}/webinars'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20118')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinar_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Webinar
    # Delete a Webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>  <br> **Prerequisites:**<br> * Pro or higher plan with a Webinar Add-on.
    # @param webinar_id The webinar ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id The meeting occurrence ID.
    # @return [nil]
    def webinar_delete(webinar_id, opts = {})
      webinar_delete_with_http_info(webinar_id, opts)
      nil
    end

    # Delete a Webinar
    # Delete a Webinar.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;webinar:write:admin&#x60; &#x60;webinar:write&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:**&lt;br&gt; * Pro or higher plan with a Webinar Add-on.
    # @param webinar_id The webinar ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id The meeting occurrence ID.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def webinar_delete_with_http_info(webinar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinar_delete ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.webinar_delete"
      end
      # resource path
      local_var_path = '/webinars/{webinarId}'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'occurrence_id'] = opts[:'occurrence_id'] if !opts[:'occurrence_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinar_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add Panelists
    # Panelists in a Webinar can view and send video, screen share, annotate, etc and do much more compared to attendees in a webinar.<br>Use this API to [add panelists](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_7550d59e-23f5-4703-9e22-e76bded1ed70) to a scheduled webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br> <br>   **Prerequisites:** * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br>
    # @param webinar_id The webinar ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def webinar_panelist_create(webinar_id, body, opts = {})
      webinar_panelist_create_with_http_info(webinar_id, body, opts)
      nil
    end

    # Add Panelists
    # Panelists in a Webinar can view and send video, screen share, annotate, etc and do much more compared to attendees in a webinar.&lt;br&gt;Use this API to [add panelists](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_7550d59e-23f5-4703-9e22-e76bded1ed70) to a scheduled webinar.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;webinar:write:admin&#x60; &#x60;webinar:write&#x60;&lt;br&gt; &lt;br&gt;   **Prerequisites:** * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).&lt;br&gt;
    # @param webinar_id The webinar ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def webinar_panelist_create_with_http_info(webinar_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinar_panelist_create ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.webinar_panelist_create"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling WebinarsApi.webinar_panelist_create"
      end
      # resource path
      local_var_path = '/webinars/{webinarId}/panelists'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinar_panelist_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove a Panelist
    # [Remove](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_de31f237-a91c-4fb2-912b-ecfba8ec5ffb) a single panelist from a webinar.<br> You can retrieve the `panelistId` by calling **List Panelists API**.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>  <br>   **Prerequisites:**<br> * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br>
    # @param webinar_id The webinar ID.
    # @param panelist_id The panelist ID or panelist email.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def webinar_panelist_delete(webinar_id, panelist_id, opts = {})
      webinar_panelist_delete_with_http_info(webinar_id, panelist_id, opts)
      nil
    end

    # Remove a Panelist
    # [Remove](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_de31f237-a91c-4fb2-912b-ecfba8ec5ffb) a single panelist from a webinar.&lt;br&gt; You can retrieve the &#x60;panelistId&#x60; by calling **List Panelists API**.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;webinar:write:admin&#x60; &#x60;webinar:write&#x60;&lt;br&gt;  &lt;br&gt;   **Prerequisites:**&lt;br&gt; * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).&lt;br&gt;
    # @param webinar_id The webinar ID.
    # @param panelist_id The panelist ID or panelist email.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def webinar_panelist_delete_with_http_info(webinar_id, panelist_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinar_panelist_delete ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.webinar_panelist_delete"
      end
      # verify the required parameter 'panelist_id' is set
      if @api_client.config.client_side_validation && panelist_id.nil?
        fail ArgumentError, "Missing the required parameter 'panelist_id' when calling WebinarsApi.webinar_panelist_delete"
      end
      # resource path
      local_var_path = '/webinars/{webinarId}/panelists/{panelistId}'.sub('{' + 'webinarId' + '}', webinar_id.to_s).sub('{' + 'panelistId' + '}', panelist_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinar_panelist_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Panelists
    # Panelists in a Webinar can view and send video, screen share, annotate, etc and do much more compared to attendees in a Webinar.   Use this API to list all the panelists of a Webinar.<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br>  <br> **Prerequisites:**<br> * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br>
    # @param webinar_id The webinar ID.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20055]
    def webinar_panelists(webinar_id, opts = {})
      data, _status_code, _headers = webinar_panelists_with_http_info(webinar_id, opts)
      data
    end

    # List Panelists
    # Panelists in a Webinar can view and send video, screen share, annotate, etc and do much more compared to attendees in a Webinar.   Use this API to list all the panelists of a Webinar.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;webinar:read:admin&#x60; &#x60;webinar:read&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:**&lt;br&gt; * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).&lt;br&gt;
    # @param webinar_id The webinar ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20055, Fixnum, Hash)>] InlineResponse20055 data, response status code and response headers
    def webinar_panelists_with_http_info(webinar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinar_panelists ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.webinar_panelists"
      end
      # resource path
      local_var_path = '/webinars/{webinarId}/panelists'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20055')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinar_panelists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove Panelists
    # Remove all the panelists from a Webinar.<br> **Scopes:** `webinar:write:admin` `webinar:write`<br>  <br> **Prerequisites:**<br> * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br>
    # @param webinar_id The webinar ID.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def webinar_panelists_delete(webinar_id, opts = {})
      webinar_panelists_delete_with_http_info(webinar_id, opts)
      nil
    end

    # Remove Panelists
    # Remove all the panelists from a Webinar.&lt;br&gt; **Scopes:** &#x60;webinar:write:admin&#x60; &#x60;webinar:write&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:**&lt;br&gt; * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).&lt;br&gt;
    # @param webinar_id The webinar ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def webinar_panelists_delete_with_http_info(webinar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinar_panelists_delete ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.webinar_panelists_delete"
      end
      # resource path
      local_var_path = '/webinars/{webinarId}/panelists'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinar_panelists_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Webinar's Poll
    # Create a [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) for a webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>  <br>
    # @param webinar_id The webinar ID.
    # @param body Webinar poll object
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20121]
    def webinar_poll_create(webinar_id, body, opts = {})
      data, _status_code, _headers = webinar_poll_create_with_http_info(webinar_id, body, opts)
      data
    end

    # Create a Webinar&#39;s Poll
    # Create a [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) for a webinar.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;webinar:write:admin&#x60; &#x60;webinar:write&#x60;&lt;br&gt;  &lt;br&gt;
    # @param webinar_id The webinar ID.
    # @param body Webinar poll object
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20121, Fixnum, Hash)>] InlineResponse20121 data, response status code and response headers
    def webinar_poll_create_with_http_info(webinar_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinar_poll_create ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.webinar_poll_create"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling WebinarsApi.webinar_poll_create"
      end
      # resource path
      local_var_path = '/webinars/{webinarId}/polls'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20121')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinar_poll_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Webinar Poll
    # Delete a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>  <br>
    # @param webinar_id The webinar ID.
    # @param poll_id The poll ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def webinar_poll_delete(webinar_id, poll_id, opts = {})
      webinar_poll_delete_with_http_info(webinar_id, poll_id, opts)
      nil
    end

    # Delete a Webinar Poll
    # Delete a webinar&#39;s [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;webinar:write:admin&#x60; &#x60;webinar:write&#x60;&lt;br&gt;  &lt;br&gt;
    # @param webinar_id The webinar ID.
    # @param poll_id The poll ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def webinar_poll_delete_with_http_info(webinar_id, poll_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinar_poll_delete ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.webinar_poll_delete"
      end
      # verify the required parameter 'poll_id' is set
      if @api_client.config.client_side_validation && poll_id.nil?
        fail ArgumentError, "Missing the required parameter 'poll_id' when calling WebinarsApi.webinar_poll_delete"
      end
      # resource path
      local_var_path = '/webinars/{webinarId}/polls/{pollId}'.sub('{' + 'webinarId' + '}', webinar_id.to_s).sub('{' + 'pollId' + '}', poll_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinar_poll_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Webinar Poll
    # Get a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) details.<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br>  <br>
    # @param webinar_id The webinar ID.
    # @param poll_id The poll ID
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20121]
    def webinar_poll_get(webinar_id, poll_id, opts = {})
      data, _status_code, _headers = webinar_poll_get_with_http_info(webinar_id, poll_id, opts)
      data
    end

    # Get a Webinar Poll
    # Get a webinar&#39;s [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) details.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;webinar:read:admin&#x60; &#x60;webinar:read&#x60;&lt;br&gt;  &lt;br&gt;
    # @param webinar_id The webinar ID.
    # @param poll_id The poll ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20121, Fixnum, Hash)>] InlineResponse20121 data, response status code and response headers
    def webinar_poll_get_with_http_info(webinar_id, poll_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinar_poll_get ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.webinar_poll_get"
      end
      # verify the required parameter 'poll_id' is set
      if @api_client.config.client_side_validation && poll_id.nil?
        fail ArgumentError, "Missing the required parameter 'poll_id' when calling WebinarsApi.webinar_poll_get"
      end
      # resource path
      local_var_path = '/webinars/{webinarId}/polls/{pollId}'.sub('{' + 'webinarId' + '}', webinar_id.to_s).sub('{' + 'pollId' + '}', poll_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20121')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinar_poll_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Webinar Poll
    # Update a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>  <br>
    # @param webinar_id The webinar ID.
    # @param poll_id The poll ID
    # @param body Webinar Poll
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def webinar_poll_update(webinar_id, poll_id, body, opts = {})
      webinar_poll_update_with_http_info(webinar_id, poll_id, body, opts)
      nil
    end

    # Update a Webinar Poll
    # Update a webinar&#39;s [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;webinar:write:admin&#x60; &#x60;webinar:write&#x60;&lt;br&gt;  &lt;br&gt;
    # @param webinar_id The webinar ID.
    # @param poll_id The poll ID
    # @param body Webinar Poll
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def webinar_poll_update_with_http_info(webinar_id, poll_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinar_poll_update ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.webinar_poll_update"
      end
      # verify the required parameter 'poll_id' is set
      if @api_client.config.client_side_validation && poll_id.nil?
        fail ArgumentError, "Missing the required parameter 'poll_id' when calling WebinarsApi.webinar_poll_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling WebinarsApi.webinar_poll_update"
      end
      # resource path
      local_var_path = '/webinars/{webinarId}/polls/{pollId}'.sub('{' + 'webinarId' + '}', webinar_id.to_s).sub('{' + 'pollId' + '}', poll_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinar_poll_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List a Webinar's Polls
    # List all the [polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) of a Webinar.<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br>  <br>
    # @param webinar_id The webinar ID.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def webinar_polls(webinar_id, opts = {})
      data, _status_code, _headers = webinar_polls_with_http_info(webinar_id, opts)
      data
    end

    # List a Webinar&#39;s Polls
    # List all the [polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) of a Webinar.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;webinar:read:admin&#x60; &#x60;webinar:read&#x60;&lt;br&gt;  &lt;br&gt;
    # @param webinar_id The webinar ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def webinar_polls_with_http_info(webinar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinar_polls ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.webinar_polls"
      end
      # resource path
      local_var_path = '/webinars/{webinarId}/polls'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinar_polls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a Webinar Registrant
    # Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the Webinar.<br>Use this API to create and submit the registration of a user for a webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>  <br> **Prerequisites:** * Pro or higher plan with a Webinar Add-on.
    # @param webinar_id The webinar ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_ids Occurrence ID. Get this value from the webinar get API. Multiple values separated by a comma.
    # @return [InlineResponse20120]
    def webinar_registrant_create(webinar_id, body, opts = {})
      data, _status_code, _headers = webinar_registrant_create_with_http_info(webinar_id, body, opts)
      data
    end

    # Add a Webinar Registrant
    # Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the Webinar.&lt;br&gt;Use this API to create and submit the registration of a user for a webinar.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;webinar:write:admin&#x60; &#x60;webinar:write&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:** * Pro or higher plan with a Webinar Add-on.
    # @param webinar_id The webinar ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_ids Occurrence ID. Get this value from the webinar get API. Multiple values separated by a comma.
    # @return [Array<(InlineResponse20120, Fixnum, Hash)>] InlineResponse20120 data, response status code and response headers
    def webinar_registrant_create_with_http_info(webinar_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinar_registrant_create ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.webinar_registrant_create"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling WebinarsApi.webinar_registrant_create"
      end
      # resource path
      local_var_path = '/webinars/{webinarId}/registrants'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'occurrence_ids'] = opts[:'occurrence_ids'] if !opts[:'occurrence_ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20120')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinar_registrant_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Webinar Registrant
    # Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the Webinar.<br>Use this API to get details on a specific user who has registered for the Webinar.<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br>  <br> **Prerequisites:**<br> * The account must have a Webinar plan.
    # @param webinar_id The webinar ID.
    # @param registrant_id The registrant ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id The meeting occurrence ID.
    # @return [WebianrRegistrant]
    def webinar_registrant_get(webinar_id, registrant_id, opts = {})
      data, _status_code, _headers = webinar_registrant_get_with_http_info(webinar_id, registrant_id, opts)
      data
    end

    # Get a Webinar Registrant
    # Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the Webinar.&lt;br&gt;Use this API to get details on a specific user who has registered for the Webinar.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;webinar:read:admin&#x60; &#x60;webinar:read&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:**&lt;br&gt; * The account must have a Webinar plan.
    # @param webinar_id The webinar ID.
    # @param registrant_id The registrant ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id The meeting occurrence ID.
    # @return [Array<(WebianrRegistrant, Fixnum, Hash)>] WebianrRegistrant data, response status code and response headers
    def webinar_registrant_get_with_http_info(webinar_id, registrant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinar_registrant_get ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.webinar_registrant_get"
      end
      # verify the required parameter 'registrant_id' is set
      if @api_client.config.client_side_validation && registrant_id.nil?
        fail ArgumentError, "Missing the required parameter 'registrant_id' when calling WebinarsApi.webinar_registrant_get"
      end
      # resource path
      local_var_path = '/webinars/{webinarId}/registrants/{registrantId}'.sub('{' + 'webinarId' + '}', webinar_id.to_s).sub('{' + 'registrantId' + '}', registrant_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'occurrence_id'] = opts[:'occurrence_id'] if !opts[:'occurrence_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebianrRegistrant')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinar_registrant_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Registration Questions
    # Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the Webinar.<br>Use this API to update registration questions and fields of a scheduled Webinar that are to be answered by users while registering for a Webinar.<br><br> **Prerequisites:**<br>   * Pro or higher plan with a Webinar Add-on. * Registration option for Webinar should be set as required to use this API.  **Scopes:** `webinar:write:admin` `webinar:write`<br>
    # @param webinar_id The webinar ID.
    # @param body Webinar Registrant Questions
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def webinar_registrant_question_update(webinar_id, body, opts = {})
      webinar_registrant_question_update_with_http_info(webinar_id, body, opts)
      nil
    end

    # Update Registration Questions
    # Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the Webinar.&lt;br&gt;Use this API to update registration questions and fields of a scheduled Webinar that are to be answered by users while registering for a Webinar.&lt;br&gt;&lt;br&gt; **Prerequisites:**&lt;br&gt;   * Pro or higher plan with a Webinar Add-on. * Registration option for Webinar should be set as required to use this API.  **Scopes:** &#x60;webinar:write:admin&#x60; &#x60;webinar:write&#x60;&lt;br&gt;
    # @param webinar_id The webinar ID.
    # @param body Webinar Registrant Questions
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def webinar_registrant_question_update_with_http_info(webinar_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinar_registrant_question_update ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.webinar_registrant_question_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling WebinarsApi.webinar_registrant_question_update"
      end
      # resource path
      local_var_path = '/webinars/{webinarId}/registrants/questions'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinar_registrant_question_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Webinar Registrant Status
    # Update a webinar registrant's status.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>  <br>
    # @param webinar_id The webinar ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id The meeting occurrence ID.
    # @return [nil]
    def webinar_registrant_status(webinar_id, body, opts = {})
      webinar_registrant_status_with_http_info(webinar_id, body, opts)
      nil
    end

    # Update Webinar Registrant Status
    # Update a webinar registrant&#39;s status.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;webinar:write:admin&#x60; &#x60;webinar:write&#x60;&lt;br&gt;  &lt;br&gt;
    # @param webinar_id The webinar ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id The meeting occurrence ID.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def webinar_registrant_status_with_http_info(webinar_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinar_registrant_status ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.webinar_registrant_status"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling WebinarsApi.webinar_registrant_status"
      end
      # resource path
      local_var_path = '/webinars/{webinarId}/registrants/status'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'occurrence_id'] = opts[:'occurrence_id'] if !opts[:'occurrence_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinar_registrant_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Webinar Registrants
    # Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the Webinar.<br> Use this API to list all the users that have registered for a webinar.<br><br> **Prerequisites:** * Pro or higher plan with a Webinar Add-on.<br> **Scopes:** `webinar:read:admin` `webinar:read`<br> <br>
    # @param webinar_id The webinar ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id The meeting occurrence ID.
    # @option opts [String] :status The registrant status:&lt;br&gt;&#x60;pending&#x60; - Registrant&#39;s status is pending.&lt;br&gt;&#x60;approved&#x60; - Registrant&#39;s status is approved.&lt;br&gt;&#x60;denied&#x60; - Registrant&#39;s status is denied. (default to approved)
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [Integer] :page_number The current page number of returned records. (default to 1)
    # @return [RegistrationList]
    def webinar_registrants(webinar_id, opts = {})
      data, _status_code, _headers = webinar_registrants_with_http_info(webinar_id, opts)
      data
    end

    # List Webinar Registrants
    # Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the Webinar.&lt;br&gt; Use this API to list all the users that have registered for a webinar.&lt;br&gt;&lt;br&gt; **Prerequisites:** * Pro or higher plan with a Webinar Add-on.&lt;br&gt; **Scopes:** &#x60;webinar:read:admin&#x60; &#x60;webinar:read&#x60;&lt;br&gt; &lt;br&gt;
    # @param webinar_id The webinar ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id The meeting occurrence ID.
    # @option opts [String] :status The registrant status:&lt;br&gt;&#x60;pending&#x60; - Registrant&#39;s status is pending.&lt;br&gt;&#x60;approved&#x60; - Registrant&#39;s status is approved.&lt;br&gt;&#x60;denied&#x60; - Registrant&#39;s status is denied.
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [Integer] :page_number The current page number of returned records.
    # @return [Array<(RegistrationList, Fixnum, Hash)>] RegistrationList data, response status code and response headers
    def webinar_registrants_with_http_info(webinar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinar_registrants ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.webinar_registrants"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['pending', 'approved', 'denied'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of pending, approved, denied'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling WebinarsApi.webinar_registrants, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/webinars/{webinarId}/registrants'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'occurrence_id'] = opts[:'occurrence_id'] if !opts[:'occurrence_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page_number'] = opts[:'page_number'] if !opts[:'page_number'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinar_registrants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Registration Questions
    # Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the Webinar.<br>Use this API to list registration questions and fields that are to be answered by users while registering for a Webinar.<br> **Prerequisites:**<br>   * Pro or higher plan with a Webinar Add-on. **Scopes:** `webinar:read:admin` `webinar:read`<br>  <br>
    # @param webinar_id The webinar ID.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20056]
    def webinar_registrants_questions_get(webinar_id, opts = {})
      data, _status_code, _headers = webinar_registrants_questions_get_with_http_info(webinar_id, opts)
      data
    end

    # List Registration Questions
    # Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the Webinar.&lt;br&gt;Use this API to list registration questions and fields that are to be answered by users while registering for a Webinar.&lt;br&gt; **Prerequisites:**&lt;br&gt;   * Pro or higher plan with a Webinar Add-on. **Scopes:** &#x60;webinar:read:admin&#x60; &#x60;webinar:read&#x60;&lt;br&gt;  &lt;br&gt;
    # @param webinar_id The webinar ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20056, Fixnum, Hash)>] InlineResponse20056 data, response status code and response headers
    def webinar_registrants_questions_get_with_http_info(webinar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinar_registrants_questions_get ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.webinar_registrants_questions_get"
      end
      # resource path
      local_var_path = '/webinars/{webinarId}/registrants/questions'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20056')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinar_registrants_questions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Webinar Status
    # Update a webinar's status. Use this API to end an ongoing webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>  <br> **Prerequisites:**<br> * The account must hold a valid [Webinar plan](https://zoom.us/webinar).
    # @param webinar_id The webinar ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def webinar_status(webinar_id, body, opts = {})
      webinar_status_with_http_info(webinar_id, body, opts)
      nil
    end

    # Update Webinar Status
    # Update a webinar&#39;s status. Use this API to end an ongoing webinar.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;webinar:write:admin&#x60; &#x60;webinar:write&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:**&lt;br&gt; * The account must hold a valid [Webinar plan](https://zoom.us/webinar).
    # @param webinar_id The webinar ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def webinar_status_with_http_info(webinar_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinar_status ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.webinar_status"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling WebinarsApi.webinar_status"
      end
      # resource path
      local_var_path = '/webinars/{webinarId}/status'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinar_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Webinar
    # Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.<br> Use this API to make updates to a scheduled Webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>  <br> **Prerequisites:**<br> * Pro or higher plan with a Webinar Add-on.
    # @param webinar_id The webinar ID.
    # @param body Webinar.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id Webinar occurrence id. Support change of agenda, start_time, duration, settings: {host_video, panelist_video, hd_video, watermark, auto_recording}
    # @return [nil]
    def webinar_update(webinar_id, body, opts = {})
      webinar_update_with_http_info(webinar_id, body, opts)
      nil
    end

    # Update a Webinar
    # Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.&lt;br&gt; Use this API to make updates to a scheduled Webinar.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;webinar:write:admin&#x60; &#x60;webinar:write&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:**&lt;br&gt; * Pro or higher plan with a Webinar Add-on.
    # @param webinar_id The webinar ID.
    # @param body Webinar.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :occurrence_id Webinar occurrence id. Support change of agenda, start_time, duration, settings: {host_video, panelist_video, hd_video, watermark, auto_recording}
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def webinar_update_with_http_info(webinar_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinar_update ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling WebinarsApi.webinar_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling WebinarsApi.webinar_update"
      end
      # resource path
      local_var_path = '/webinars/{webinarId}'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'occurrence_id'] = opts[:'occurrence_id'] if !opts[:'occurrence_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinar_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Webinars
    # Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.<br> Use this API to list all the webinars that are scheduled by or on-behalf a user (Webinar host).<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br> <br> **Prerequisites:** * Pro or higher plan with a Webinar Add-on.
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [Integer] :page_number The current page number of returned records. (default to 1)
    # @return [UserList]
    def webinars(user_id, opts = {})
      data, _status_code, _headers = webinars_with_http_info(user_id, opts)
      data
    end

    # List Webinars
    # Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.&lt;br&gt; Use this API to list all the webinars that are scheduled by or on-behalf a user (Webinar host).&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;webinar:read:admin&#x60; &#x60;webinar:read&#x60;&lt;br&gt; &lt;br&gt; **Prerequisites:** * Pro or higher plan with a Webinar Add-on.
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [Integer] :page_number The current page number of returned records.
    # @return [Array<(UserList, Fixnum, Hash)>] UserList data, response status code and response headers
    def webinars_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebinarsApi.webinars ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling WebinarsApi.webinars"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling WebinarsApi.webinars, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/users/{userId}/webinars'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page_number'] = opts[:'page_number'] if !opts[:'page_number'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebinarsApi#webinars\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
