=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module ZoomUs
  class Reports
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Billing Invoice Reports
    # Get billing invoices reports for a specific billing period. Provide the `billing_id` of the billing period for which you would like to retrieve the invoices for. This ID can be retrieved from **Get Billing Reports** API.   **Prerequisites:**<br> * Pro or a higher account with **Billing Report** option enabled.  **Scopes:** `report:read:admin`, `report:master`
    # @param [Hash] opts the optional parameters
    # @option opts [String] :billing_id Unique Identifier of the Billing Report. Retrieve this ID from the response of **Get Billing Reports** API request.
    # @return [InlineResponse200100]
    def get_billing_invoices_reports(opts = {})
      data, _status_code, _headers = get_billing_invoices_reports_with_http_info(opts)
      data
    end

    # Get Billing Invoice Reports
    # Get billing invoices reports for a specific billing period. Provide the &#x60;billing_id&#x60; of the billing period for which you would like to retrieve the invoices for. This ID can be retrieved from **Get Billing Reports** API.   **Prerequisites:**&lt;br&gt; * Pro or a higher account with **Billing Report** option enabled.  **Scopes:** &#x60;report:read:admin&#x60;, &#x60;report:master&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :billing_id Unique Identifier of the Billing Report. Retrieve this ID from the response of **Get Billing Reports** API request.
    # @return [Array<(InlineResponse200100, Fixnum, Hash)>] InlineResponse200100 data, response status code and response headers
    def get_billing_invoices_reports_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.get_billing_invoices_reports ...'
      end
      # resource path
      local_var_path = '/report/billing/invoices'

      # query parameters
      query_params = {}
      query_params[:'billing_id'] = opts[:'billing_id'] if !opts[:'billing_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200100')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#get_billing_invoices_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Billing Reports
    # Get billing reports of a Zoom account.  **Prerequisites:**<br> * Pro or a higher account with Billing Report option enabled.  **Scopes:** `report:read:admin`, `report:master`
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20099]
    def get_billing_report(opts = {})
      data, _status_code, _headers = get_billing_report_with_http_info(opts)
      data
    end

    # Get Billing Reports
    # Get billing reports of a Zoom account.  **Prerequisites:**&lt;br&gt; * Pro or a higher account with Billing Report option enabled.  **Scopes:** &#x60;report:read:admin&#x60;, &#x60;report:master&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20099, Fixnum, Hash)>] InlineResponse20099 data, response status code and response headers
    def get_billing_report_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.get_billing_report ...'
      end
      # resource path
      local_var_path = '/report/billing'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20099')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#get_billing_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Cloud Recording Usage Report
    # Retrieve cloud recording usage report for a specified period. You can only get cloud recording reports that is one day ealier than the current date and for the most recent period of 6 months. The date gap between from and to dates should be smaller or equal to 30 days. <br> **Prerequisites**<br> * Pro or higher plan.<br> **Scopes:** `report:read:admin`<br>
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def report_cloud_recording(from, to, opts = {})
      data, _status_code, _headers = report_cloud_recording_with_http_info(from, to, opts)
      data
    end

    # Get Cloud Recording Usage Report
    # Retrieve cloud recording usage report for a specified period. You can only get cloud recording reports that is one day ealier than the current date and for the most recent period of 6 months. The date gap between from and to dates should be smaller or equal to 30 days. &lt;br&gt; **Prerequisites**&lt;br&gt; * Pro or higher plan.&lt;br&gt; **Scopes:** &#x60;report:read:admin&#x60;&lt;br&gt;
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def report_cloud_recording_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_cloud_recording ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling ReportsApi.report_cloud_recording"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling ReportsApi.report_cloud_recording"
      end
      # resource path
      local_var_path = '/report/cloud_recording'

      # query parameters
      query_params = {}
      query_params[:'from'] = from
      query_params[:'to'] = to

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_cloud_recording\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Daily Usage Report
    # Retrieve daily report to access the account-wide usage of Zoom services for each day in a given month. It lists the number of new users, meetings, participants, and meeting minutes.<br> **Prerequisites**<br> * Pro or higher plan.<br> **Scopes:** `report:read:admin`<br>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Year for this report
    # @option opts [Integer] :month Month for this report
    # @return [Object]
    def report_daily(opts = {})
      data, _status_code, _headers = report_daily_with_http_info(opts)
      data
    end

    # Get Daily Usage Report
    # Retrieve daily report to access the account-wide usage of Zoom services for each day in a given month. It lists the number of new users, meetings, participants, and meeting minutes.&lt;br&gt; **Prerequisites**&lt;br&gt; * Pro or higher plan.&lt;br&gt; **Scopes:** &#x60;report:read:admin&#x60;&lt;br&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :year Year for this report
    # @option opts [Integer] :month Month for this report
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def report_daily_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_daily ...'
      end
      # resource path
      local_var_path = '/report/daily'

      # query parameters
      query_params = {}
      query_params[:'year'] = opts[:'year'] if !opts[:'year'].nil?
      query_params[:'month'] = opts[:'month'] if !opts[:'month'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_daily\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Meeting Detail Reports
    # Get a detailed report for a past meeting. <br> **Scopes:** `report:read:admin`<br> **Prerequisites:**<br> * Pro or a higher plan.<br>
    # @param meeting_id The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20036]
    def report_meeting_details(meeting_id, opts = {})
      data, _status_code, _headers = report_meeting_details_with_http_info(meeting_id, opts)
      data
    end

    # Get Meeting Detail Reports
    # Get a detailed report for a past meeting. &lt;br&gt; **Scopes:** &#x60;report:read:admin&#x60;&lt;br&gt; **Prerequisites:**&lt;br&gt; * Pro or a higher plan.&lt;br&gt;
    # @param meeting_id The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20036, Fixnum, Hash)>] InlineResponse20036 data, response status code and response headers
    def report_meeting_details_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_meeting_details ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling ReportsApi.report_meeting_details"
      end
      # resource path
      local_var_path = '/report/meetings/{meetingId}'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20036')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_meeting_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Meeting Participant Reports
    # Get participant report for a past meeting.<br><br> **Scopes:** `report:read:admin`<br> **Prerequisites:**<br> * Pro or a higher plan.<br>
    # @param meeting_id The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [InlineResponse20037]
    def report_meeting_participants(meeting_id, opts = {})
      data, _status_code, _headers = report_meeting_participants_with_http_info(meeting_id, opts)
      data
    end

    # Get Meeting Participant Reports
    # Get participant report for a past meeting.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;report:read:admin&#x60;&lt;br&gt; **Prerequisites:**&lt;br&gt; * Pro or a higher plan.&lt;br&gt;
    # @param meeting_id The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [Array<(InlineResponse20037, Fixnum, Hash)>] InlineResponse20037 data, response status code and response headers
    def report_meeting_participants_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_meeting_participants ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling ReportsApi.report_meeting_participants"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ReportsApi.report_meeting_participants, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/report/meetings/{meetingId}/participants'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20037')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_meeting_participants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Meeting Poll Reports
    # Retrieve a report of [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) results for a past meeting. <br><br> **Scopes:** `report:read:admin`<br> **Prerequisites:**<br> * Pro or a higher plan.<br>
    # @param meeting_id The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20038]
    def report_meeting_polls(meeting_id, opts = {})
      data, _status_code, _headers = report_meeting_polls_with_http_info(meeting_id, opts)
      data
    end

    # Get Meeting Poll Reports
    # Retrieve a report of [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) results for a past meeting. &lt;br&gt;&lt;br&gt; **Scopes:** &#x60;report:read:admin&#x60;&lt;br&gt; **Prerequisites:**&lt;br&gt; * Pro or a higher plan.&lt;br&gt;
    # @param meeting_id The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20038, Fixnum, Hash)>] InlineResponse20038 data, response status code and response headers
    def report_meeting_polls_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_meeting_polls ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling ReportsApi.report_meeting_polls"
      end
      # resource path
      local_var_path = '/report/meetings/{meetingId}/polls'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20038')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_meeting_polls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Meeting Reports
    # Retrieve [report](https://support.zoom.us/hc/en-us/articles/216378603-Meeting-Reporting) on a past meeting for a specified period of time. The time range for the report is limited to a month and the month should fall under the past six months.  Meetings will only be returned in the response if the meeting has two or more unique participants.  <br><br> **Scopes:** `report:read:admin`<br>  <br> **Prerequisites:**<br> * Pro or higher plan.
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @option opts [String] :type The meeting types: &lt;br&gt;&#x60;past&#x60; - Past meetings.&lt;br&gt;&#x60;pastOne&#x60; - Past one user meetings.  (default to past)
    # @return [InlineResponse20035]
    def report_meetings(user_id, from, to, opts = {})
      data, _status_code, _headers = report_meetings_with_http_info(user_id, from, to, opts)
      data
    end

    # Get Meeting Reports
    # Retrieve [report](https://support.zoom.us/hc/en-us/articles/216378603-Meeting-Reporting) on a past meeting for a specified period of time. The time range for the report is limited to a month and the month should fall under the past six months.  Meetings will only be returned in the response if the meeting has two or more unique participants.  &lt;br&gt;&lt;br&gt; **Scopes:** &#x60;report:read:admin&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:**&lt;br&gt; * Pro or higher plan.
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @option opts [String] :type The meeting types: &lt;br&gt;&#x60;past&#x60; - Past meetings.&lt;br&gt;&#x60;pastOne&#x60; - Past one user meetings.
    # @return [Array<(InlineResponse20035, Fixnum, Hash)>] InlineResponse20035 data, response status code and response headers
    def report_meetings_with_http_info(user_id, from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_meetings ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling ReportsApi.report_meetings"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling ReportsApi.report_meetings"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling ReportsApi.report_meetings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ReportsApi.report_meetings, must be smaller than or equal to 300.'
      end

      if @api_client.config.client_side_validation && opts[:'type'] && !['past', 'pastOne'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of past, pastOne'
      end
      # resource path
      local_var_path = '/report/users/{userId}/meetings'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = from
      query_params[:'to'] = to
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20035')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_meetings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Operation Logs Report
    # The [Operations Logs](https://support.zoom.us/hc/en-us/articles/360032748331-Operation-Logs) report allows you to audit admin and user activity, such as adding a new user, changing account settings, and deleting recordings.<br> Use this API to retrieve operation logs report for a specified period of time.<br> **Scopes:** `report:read:admin`<br>  <br> **Prerequisites:**<br> * Pro or higher plan.
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [InlineResponse20044]
    def report_operation_logs(from, to, opts = {})
      data, _status_code, _headers = report_operation_logs_with_http_info(from, to, opts)
      data
    end

    # Get Operation Logs Report
    # The [Operations Logs](https://support.zoom.us/hc/en-us/articles/360032748331-Operation-Logs) report allows you to audit admin and user activity, such as adding a new user, changing account settings, and deleting recordings.&lt;br&gt; Use this API to retrieve operation logs report for a specified period of time.&lt;br&gt; **Scopes:** &#x60;report:read:admin&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:**&lt;br&gt; * Pro or higher plan.
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [Array<(InlineResponse20044, Fixnum, Hash)>] InlineResponse20044 data, response status code and response headers
    def report_operation_logs_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_operation_logs ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling ReportsApi.report_operation_logs"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling ReportsApi.report_operation_logs"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ReportsApi.report_operation_logs, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/report/operationlogs'

      # query parameters
      query_params = {}
      query_params[:'from'] = from
      query_params[:'to'] = to
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20044')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_operation_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Sign In / Sign Out Activity Report
    # Retrieve a list of sign in / sign out activity logs [report](https://support.zoom.us/hc/en-us/articles/201363213-Getting-Started-with-Reports) of users under a Zoom account.<br> **Prerequisites**<br> * Pro or higher plan.<br> **Scopes:** `report:read:admin`<br>
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :from Start date for which you would like to view the activity logs report.
    # @option opts [DateTime] :to End date up to which you would like to view the activity logs report.
    # @option opts [Integer] :page_size The number of records to be returned within a single API call
    # @option opts [String] :next_page_token Next page token is used to paginate through large result sets
    # @return [InlineResponse20068]
    def report_sign_in_sign_out_activities(opts = {})
      data, _status_code, _headers = report_sign_in_sign_out_activities_with_http_info(opts)
      data
    end

    # Get Sign In / Sign Out Activity Report
    # Retrieve a list of sign in / sign out activity logs [report](https://support.zoom.us/hc/en-us/articles/201363213-Getting-Started-with-Reports) of users under a Zoom account.&lt;br&gt; **Prerequisites**&lt;br&gt; * Pro or higher plan.&lt;br&gt; **Scopes:** &#x60;report:read:admin&#x60;&lt;br&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :from Start date for which you would like to view the activity logs report.
    # @option opts [DateTime] :to End date up to which you would like to view the activity logs report.
    # @option opts [Integer] :page_size The number of records to be returned within a single API call
    # @option opts [String] :next_page_token Next page token is used to paginate through large result sets
    # @return [Array<(InlineResponse20068, Fixnum, Hash)>] InlineResponse20068 data, response status code and response headers
    def report_sign_in_sign_out_activities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_sign_in_sign_out_activities ...'
      end
      # resource path
      local_var_path = '/report/activities'

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20068')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_sign_in_sign_out_activities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Telephone Reports
    # The Telephone report allows you to view who dialed into meetings via phone (Audio Conferencing or SIP Connected Audio) and which number they dialed into and other details. Use this API to get telephone report for a specified period of time.  **Scopes:** `report:read:admin`<br>  <br>**Prerequisites:**<br> * Pro or higher plan.
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Audio types:&lt;br&gt;&#x60;1&#x60; - Toll-free Call-in &amp; Call-out. &#x60;3&#x60; - SIP Connected Audio (default to 1)
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [Integer] :page_number The current page number of returned records. (default to 1)
    # @return [InlineResponse20043]
    def report_telephone(from, to, opts = {})
      data, _status_code, _headers = report_telephone_with_http_info(from, to, opts)
      data
    end

    # Get Telephone Reports
    # The Telephone report allows you to view who dialed into meetings via phone (Audio Conferencing or SIP Connected Audio) and which number they dialed into and other details. Use this API to get telephone report for a specified period of time.  **Scopes:** &#x60;report:read:admin&#x60;&lt;br&gt;  &lt;br&gt;**Prerequisites:**&lt;br&gt; * Pro or higher plan.
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Audio types:&lt;br&gt;&#x60;1&#x60; - Toll-free Call-in &amp; Call-out. &#x60;3&#x60; - SIP Connected Audio
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [Integer] :page_number The current page number of returned records.
    # @return [Array<(InlineResponse20043, Fixnum, Hash)>] InlineResponse20043 data, response status code and response headers
    def report_telephone_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_telephone ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling ReportsApi.report_telephone"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling ReportsApi.report_telephone"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['1', '3'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of 1, 3'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ReportsApi.report_telephone, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/report/telephone'

      # query parameters
      query_params = {}
      query_params[:'from'] = from
      query_params[:'to'] = to
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page_number'] = opts[:'page_number'] if !opts[:'page_number'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20043')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_telephone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Active/Inactive Host Reports
    # A user is considered to be an active host during the month specified in the \"from\" and \"to\" range, if the user has hosted at least one meeting during this period. If the user didn't host any meetings during this period, the user is considered to be inactive.<br>The Active Hosts report displays a list of meetings, participants, and meeting minutes for a specific time range, up to one month. The month should fall within the last six months.<br>The Inactive Hosts report pulls a list of users who were not active during a specific period of time.  Use this API to retrieve an active or inactive host report for a specified period of time. The time range for the report is limited to a month and the month should fall under the past six months. <br>You can specify the type of report and date range using the query parameters.<br> **Scopes:** `report:read:admin`<br>  <br> **Prerequisites:**<br> * Pro or higher plan.
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Active or inactive hosts.&lt;br&gt;&#x60;active&#x60; - Active hosts. &lt;br&gt;&#x60;inactive&#x60; - Inactive hosts.
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [Integer] :page_number The current page number of returned records. (default to 1)
    # @return [InlineResponse20034]
    def report_users(from, to, opts = {})
      data, _status_code, _headers = report_users_with_http_info(from, to, opts)
      data
    end

    # Get Active/Inactive Host Reports
    # A user is considered to be an active host during the month specified in the \&quot;from\&quot; and \&quot;to\&quot; range, if the user has hosted at least one meeting during this period. If the user didn&#39;t host any meetings during this period, the user is considered to be inactive.&lt;br&gt;The Active Hosts report displays a list of meetings, participants, and meeting minutes for a specific time range, up to one month. The month should fall within the last six months.&lt;br&gt;The Inactive Hosts report pulls a list of users who were not active during a specific period of time.  Use this API to retrieve an active or inactive host report for a specified period of time. The time range for the report is limited to a month and the month should fall under the past six months. &lt;br&gt;You can specify the type of report and date range using the query parameters.&lt;br&gt; **Scopes:** &#x60;report:read:admin&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:**&lt;br&gt; * Pro or higher plan.
    # @param from Start date in &#39;yyyy-mm-dd&#39; format. The date range defined by the \&quot;from\&quot; and \&quot;to\&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # @param to End date.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Active or inactive hosts.&lt;br&gt;&#x60;active&#x60; - Active hosts. &lt;br&gt;&#x60;inactive&#x60; - Inactive hosts.
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [Integer] :page_number The current page number of returned records.
    # @return [Array<(InlineResponse20034, Fixnum, Hash)>] InlineResponse20034 data, response status code and response headers
    def report_users_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_users ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling ReportsApi.report_users"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling ReportsApi.report_users"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['active', 'inactive'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of active, inactive'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ReportsApi.report_users, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/report/users'

      # query parameters
      query_params = {}
      query_params[:'from'] = from
      query_params[:'to'] = to
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page_number'] = opts[:'page_number'] if !opts[:'page_number'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20034')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Webinar Detail Reports
    # Retrieve a [report](https://support.zoom.us/hc/en-us/articles/201393719-Webinar-Reporting) containing past webinar details.  <br><br> **Scopes:** `report:read:admin`<br>  <br> **Prerequisites:**<br> * Pro or higher plan with Webinar add-on.
    # @param webinar_id The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20039]
    def report_webinar_details(webinar_id, opts = {})
      data, _status_code, _headers = report_webinar_details_with_http_info(webinar_id, opts)
      data
    end

    # Get Webinar Detail Reports
    # Retrieve a [report](https://support.zoom.us/hc/en-us/articles/201393719-Webinar-Reporting) containing past webinar details.  &lt;br&gt;&lt;br&gt; **Scopes:** &#x60;report:read:admin&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:**&lt;br&gt; * Pro or higher plan with Webinar add-on.
    # @param webinar_id The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20039, Fixnum, Hash)>] InlineResponse20039 data, response status code and response headers
    def report_webinar_details_with_http_info(webinar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_webinar_details ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling ReportsApi.report_webinar_details"
      end
      # resource path
      local_var_path = '/report/webinars/{webinarId}'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20039')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_webinar_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Webinar Participant Reports
    # Get detailed report on each attendee of a webinar.<br><br> **Scopes:** `report:read:admin`<br>  <br> **Prerequisites:**<br> * Pro or a higher plan with Webinar add-on enabled.
    # @param webinar_id The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [InlineResponse20040]
    def report_webinar_participants(webinar_id, opts = {})
      data, _status_code, _headers = report_webinar_participants_with_http_info(webinar_id, opts)
      data
    end

    # Get Webinar Participant Reports
    # Get detailed report on each attendee of a webinar.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;report:read:admin&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:**&lt;br&gt; * Pro or a higher plan with Webinar add-on enabled.
    # @param webinar_id The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @return [Array<(InlineResponse20040, Fixnum, Hash)>] InlineResponse20040 data, response status code and response headers
    def report_webinar_participants_with_http_info(webinar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_webinar_participants ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling ReportsApi.report_webinar_participants"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ReportsApi.report_webinar_participants, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/report/webinars/{webinarId}/participants'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20040')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_webinar_participants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Webinar Poll Reports
    # Retrieve a report on past [webinar polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).<br><br> **Scopes:** `report:read:admin`<br>  <br> **Prerequisites:**<br> * Pro or a higher plan with Webinar add-on enabled.
    # @param webinar_id The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20041]
    def report_webinar_polls(webinar_id, opts = {})
      data, _status_code, _headers = report_webinar_polls_with_http_info(webinar_id, opts)
      data
    end

    # Get Webinar Poll Reports
    # Retrieve a report on past [webinar polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;report:read:admin&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:**&lt;br&gt; * Pro or a higher plan with Webinar add-on enabled.
    # @param webinar_id The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20041, Fixnum, Hash)>] InlineResponse20041 data, response status code and response headers
    def report_webinar_polls_with_http_info(webinar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_webinar_polls ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling ReportsApi.report_webinar_polls"
      end
      # resource path
      local_var_path = '/report/webinars/{webinarId}/polls'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20041')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_webinar_polls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Webinar Q&A Report
    # The Question & Answer (Q&A) feature for webinars allows attendees to ask questions during the webinar and for the panelists, co-hosts and host to answer their questions.  Use this API to retrieve a report on question and answers from past webinars. <br><br> **Scopes:** `report:read:admin`<br>  <br> **Prerequisites:**<br> * Pro or a higher plan with Webinar add-on enabled.
    # @param webinar_id The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20042]
    def report_webinar_qa(webinar_id, opts = {})
      data, _status_code, _headers = report_webinar_qa_with_http_info(webinar_id, opts)
      data
    end

    # Get Webinar Q&amp;A Report
    # The Question &amp; Answer (Q&amp;A) feature for webinars allows attendees to ask questions during the webinar and for the panelists, co-hosts and host to answer their questions.  Use this API to retrieve a report on question and answers from past webinars. &lt;br&gt;&lt;br&gt; **Scopes:** &#x60;report:read:admin&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:**&lt;br&gt; * Pro or a higher plan with Webinar add-on enabled.
    # @param webinar_id The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20042, Fixnum, Hash)>] InlineResponse20042 data, response status code and response headers
    def report_webinar_qa_with_http_info(webinar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_webinar_qa ...'
      end
      # verify the required parameter 'webinar_id' is set
      if @api_client.config.client_side_validation && webinar_id.nil?
        fail ArgumentError, "Missing the required parameter 'webinar_id' when calling ReportsApi.report_webinar_qa"
      end
      # resource path
      local_var_path = '/report/webinars/{webinarId}/qa'.sub('{' + 'webinarId' + '}', webinar_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20042')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_webinar_qa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
