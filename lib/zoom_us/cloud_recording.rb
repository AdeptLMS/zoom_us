=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module ZoomUs
  class CloudRecording
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List Recordings of an Account
    # List [Cloud Recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) available on an Account.  **Prerequisites**:<br> * A Pro or a higher paid plan with Cloud Recording option enabled.<br> **Scopes**: `recording:read:admin` or `account:read:admin`  If the scope `recording:read:admin` is used, the Account ID of the Account must be provided in the `accountId` path parameter to list recordings that belong to the Account. This scope only works for Sub Accounts.   To list recordings of a Master Account, the scope must be `account:read:admin` and the value of `accountId` should be `me`.<br> <br>
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @option opts [DateTime] :from The start date for the monthly range for which you would like to retrieve recordings. The maximum range can be a month. The month should fall within the past six months period from the date of query.
    # @option opts [DateTime] :to The end date for the monthly range for which you would like to retrieve recordings. The maximum range can be a month. The month should fall within the past six months period from the date of query.
    # @return [InlineResponse20073]
    def get_account_cloud_recording(account_id, opts = {})
      data, _status_code, _headers = get_account_cloud_recording_with_http_info(account_id, opts)
      data
    end

    # List Recordings of an Account
    # List [Cloud Recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) available on an Account.  **Prerequisites**:&lt;br&gt; * A Pro or a higher paid plan with Cloud Recording option enabled.&lt;br&gt; **Scopes**: &#x60;recording:read:admin&#x60; or &#x60;account:read:admin&#x60;  If the scope &#x60;recording:read:admin&#x60; is used, the Account ID of the Account must be provided in the &#x60;accountId&#x60; path parameter to list recordings that belong to the Account. This scope only works for Sub Accounts.   To list recordings of a Master Account, the scope must be &#x60;account:read:admin&#x60; and the value of &#x60;accountId&#x60; should be &#x60;me&#x60;.&lt;br&gt; &lt;br&gt;
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @option opts [DateTime] :from The start date for the monthly range for which you would like to retrieve recordings. The maximum range can be a month. The month should fall within the past six months period from the date of query.
    # @option opts [DateTime] :to The end date for the monthly range for which you would like to retrieve recordings. The maximum range can be a month. The month should fall within the past six months period from the date of query.
    # @return [Array<(InlineResponse20073, Fixnum, Hash)>] InlineResponse20073 data, response status code and response headers
    def get_account_cloud_recording_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudRecordingApi.get_account_cloud_recording ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling CloudRecordingApi.get_account_cloud_recording"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling CloudRecordingApi.get_account_cloud_recording, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/accounts/{accountId}/recordings'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20073')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudRecordingApi#get_account_cloud_recording\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Recording Registrant
    # Cloud Recordings of past Zoom Meetings can be made [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings). Users should be [registered](https://marketplace.zoom.us/docs/api-reference/zoom-api/cloud-recording/meetingrecordingregistrantcreate) to view these recordings.  Use this API to register a user to gain access to **On-demand Cloud Recordings** of a past meeting.<br> **Scopes:** `recording:write:admin`, `recording:write`.<br>
    # @param meeting_id The meeting ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20113]
    def meeting_recording_registrant_create(meeting_id, body, opts = {})
      data, _status_code, _headers = meeting_recording_registrant_create_with_http_info(meeting_id, body, opts)
      data
    end

    # Create a Recording Registrant
    # Cloud Recordings of past Zoom Meetings can be made [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings). Users should be [registered](https://marketplace.zoom.us/docs/api-reference/zoom-api/cloud-recording/meetingrecordingregistrantcreate) to view these recordings.  Use this API to register a user to gain access to **On-demand Cloud Recordings** of a past meeting.&lt;br&gt; **Scopes:** &#x60;recording:write:admin&#x60;, &#x60;recording:write&#x60;.&lt;br&gt;
    # @param meeting_id The meeting ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20113, Fixnum, Hash)>] InlineResponse20113 data, response status code and response headers
    def meeting_recording_registrant_create_with_http_info(meeting_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudRecordingApi.meeting_recording_registrant_create ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling CloudRecordingApi.meeting_recording_registrant_create"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudRecordingApi.meeting_recording_registrant_create"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/recordings/registrants'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20113')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudRecordingApi#meeting_recording_registrant_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Recording Registrant's Status
    # A registrant can either be approved or denied from viewing the [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) recording.  Use this API to update a registrant's status.  **Scopes:** `recording:write:admin`, `recording:write`<br>
    # @param meeting_id The meeting ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def meeting_recording_registrant_status(meeting_id, body, opts = {})
      meeting_recording_registrant_status_with_http_info(meeting_id, body, opts)
      nil
    end

    # Update Recording Registrant&#39;s Status
    # A registrant can either be approved or denied from viewing the [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) recording.  Use this API to update a registrant&#39;s status.  **Scopes:** &#x60;recording:write:admin&#x60;, &#x60;recording:write&#x60;&lt;br&gt;
    # @param meeting_id The meeting ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def meeting_recording_registrant_status_with_http_info(meeting_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudRecordingApi.meeting_recording_registrant_status ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling CloudRecordingApi.meeting_recording_registrant_status"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudRecordingApi.meeting_recording_registrant_status"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/recordings/registrants/status'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudRecordingApi#meeting_recording_registrant_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Recording Registrants
    # Cloud Recordings of past Zoom Meetings can be made [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings). Users should be [registered](https://marketplace.zoom.us/docs/api-reference/zoom-api/cloud-recording/meetingrecordingregistrantcreate) to view these recordings.  Use this API to list registrants of **On-demand Cloud Recordings** of a past meeting.<br> **Scopes:** `recording:read:admin`, `recording:read`.<br>
    # @param meeting_id The meeting ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status The registrant status:&lt;br&gt;&#x60;pending&#x60; - Registrant&#39;s status is pending.&lt;br&gt;&#x60;approved&#x60; - Registrant&#39;s status is approved.&lt;br&gt;&#x60;denied&#x60; - Registrant&#39;s status is denied. (default to approved)
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [Integer] :page_number The current page number of returned records. (default to 1)
    # @return [RegistrationList1]
    def meeting_recording_registrants(meeting_id, opts = {})
      data, _status_code, _headers = meeting_recording_registrants_with_http_info(meeting_id, opts)
      data
    end

    # List Recording Registrants
    # Cloud Recordings of past Zoom Meetings can be made [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings). Users should be [registered](https://marketplace.zoom.us/docs/api-reference/zoom-api/cloud-recording/meetingrecordingregistrantcreate) to view these recordings.  Use this API to list registrants of **On-demand Cloud Recordings** of a past meeting.&lt;br&gt; **Scopes:** &#x60;recording:read:admin&#x60;, &#x60;recording:read&#x60;.&lt;br&gt;
    # @param meeting_id The meeting ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status The registrant status:&lt;br&gt;&#x60;pending&#x60; - Registrant&#39;s status is pending.&lt;br&gt;&#x60;approved&#x60; - Registrant&#39;s status is approved.&lt;br&gt;&#x60;denied&#x60; - Registrant&#39;s status is denied.
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [Integer] :page_number The current page number of returned records.
    # @return [Array<(RegistrationList1, Fixnum, Hash)>] RegistrationList1 data, response status code and response headers
    def meeting_recording_registrants_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudRecordingApi.meeting_recording_registrants ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling CloudRecordingApi.meeting_recording_registrants"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['pending', 'approved', 'denied'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of pending, approved, denied'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling CloudRecordingApi.meeting_recording_registrants, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/meetings/{meetingId}/recordings/registrants'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page_number'] = opts[:'page_number'] if !opts[:'page_number'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationList1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudRecordingApi#meeting_recording_registrants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Meeting Recordings
    # Delete all recording files of a meeting.<br><br>  **Scopes:** `recording:write:admin` `recording:write`<br> <br> **Prerequisites**: * Cloud Recording should be enabled on the user's account.<br>
    # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action The recording delete actions:&lt;br&gt;&#x60;trash&#x60; - Move recording to trash.&lt;br&gt;&#x60;delete&#x60; - Delete recording permanently. (default to trash)
    # @return [nil]
    def recording_delete(meeting_id, opts = {})
      recording_delete_with_http_info(meeting_id, opts)
      nil
    end

    # Delete Meeting Recordings
    # Delete all recording files of a meeting.&lt;br&gt;&lt;br&gt;  **Scopes:** &#x60;recording:write:admin&#x60; &#x60;recording:write&#x60;&lt;br&gt; &lt;br&gt; **Prerequisites**: * Cloud Recording should be enabled on the user&#39;s account.&lt;br&gt;
    # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action The recording delete actions:&lt;br&gt;&#x60;trash&#x60; - Move recording to trash.&lt;br&gt;&#x60;delete&#x60; - Delete recording permanently.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def recording_delete_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudRecordingApi.recording_delete ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling CloudRecordingApi.recording_delete"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['trash', 'delete'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of trash, delete'
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/recordings'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudRecordingApi#recording_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Meeting Recording File
    # Delete a sprecific recording file from a meeting.<br><br> **Scopes**: `recording:write:admin` `recording:write`<br>  <br>
    # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request.
    # @param recording_id The recording ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action The recording delete actions:&lt;br&gt;&#x60;trash&#x60; - Move recording to trash.&lt;br&gt;&#x60;delete&#x60; - Delete recording permanently. (default to trash)
    # @return [nil]
    def recording_delete_one(meeting_id, recording_id, opts = {})
      recording_delete_one_with_http_info(meeting_id, recording_id, opts)
      nil
    end

    # Delete a Meeting Recording File
    # Delete a sprecific recording file from a meeting.&lt;br&gt;&lt;br&gt; **Scopes**: &#x60;recording:write:admin&#x60; &#x60;recording:write&#x60;&lt;br&gt;  &lt;br&gt;
    # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request.
    # @param recording_id The recording ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action The recording delete actions:&lt;br&gt;&#x60;trash&#x60; - Move recording to trash.&lt;br&gt;&#x60;delete&#x60; - Delete recording permanently.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def recording_delete_one_with_http_info(meeting_id, recording_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudRecordingApi.recording_delete_one ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling CloudRecordingApi.recording_delete_one"
      end
      # verify the required parameter 'recording_id' is set
      if @api_client.config.client_side_validation && recording_id.nil?
        fail ArgumentError, "Missing the required parameter 'recording_id' when calling CloudRecordingApi.recording_delete_one"
      end
      if @api_client.config.client_side_validation && opts[:'action'] && !['trash', 'delete'].include?(opts[:'action'])
        fail ArgumentError, 'invalid value for "action", must be one of trash, delete'
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/recordings/{recordingId}'.sub('{' + 'meetingId' + '}', meeting_id.to_s).sub('{' + 'recordingId' + '}', recording_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudRecordingApi#recording_delete_one\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Meeting Recordings
    # Get all the [recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording#h_7420acb5-1897-4061-87b4-5b76e99c03b4) from a meeting.<br><br> **Scopes:** `recording:read:admin` `recording:read`<br>
    # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def recording_get(meeting_id, opts = {})
      data, _status_code, _headers = recording_get_with_http_info(meeting_id, opts)
      data
    end

    # Get Meeting Recordings
    # Get all the [recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording#h_7420acb5-1897-4061-87b4-5b76e99c03b4) from a meeting.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;recording:read:admin&#x60; &#x60;recording:read&#x60;&lt;br&gt;
    # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def recording_get_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudRecordingApi.recording_get ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling CloudRecordingApi.recording_get"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/recordings'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudRecordingApi#recording_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Registration Questions
    # For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.  Use this API to update registration questions that are to be answered by users while registering to view a recording.<br> **Scopes:** `recording:write:admin`, `recording:write`<br> <br>
    # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request.
    # @param body Recording Registrant Questions
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def recording_registrant_question_update(meeting_id, body, opts = {})
      recording_registrant_question_update_with_http_info(meeting_id, body, opts)
      nil
    end

    # Update Registration Questions
    # For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.  Use this API to update registration questions that are to be answered by users while registering to view a recording.&lt;br&gt; **Scopes:** &#x60;recording:write:admin&#x60;, &#x60;recording:write&#x60;&lt;br&gt; &lt;br&gt;
    # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request.
    # @param body Recording Registrant Questions
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def recording_registrant_question_update_with_http_info(meeting_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudRecordingApi.recording_registrant_question_update ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling CloudRecordingApi.recording_registrant_question_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudRecordingApi.recording_registrant_question_update"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/recordings/registrants/questions'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudRecordingApi#recording_registrant_question_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Registration Questions
    # For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.  Use this API to retrieve a list of questions that are displayed for users to complete when registering to view the recording of a specific meeting.<br> **Scopes:** `recording:read:admin`, `recording:read`<br>
    # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request.
    # @param [Hash] opts the optional parameters
    # @return [RecordingRegistrantQuestions]
    def recording_registrants_questions_get(meeting_id, opts = {})
      data, _status_code, _headers = recording_registrants_questions_get_with_http_info(meeting_id, opts)
      data
    end

    # Get Registration Questions
    # For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.  Use this API to retrieve a list of questions that are displayed for users to complete when registering to view the recording of a specific meeting.&lt;br&gt; **Scopes:** &#x60;recording:read:admin&#x60;, &#x60;recording:read&#x60;&lt;br&gt;
    # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RecordingRegistrantQuestions, Fixnum, Hash)>] RecordingRegistrantQuestions data, response status code and response headers
    def recording_registrants_questions_get_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudRecordingApi.recording_registrants_questions_get ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling CloudRecordingApi.recording_registrants_questions_get"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/recordings/registrants/questions'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RecordingRegistrantQuestions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudRecordingApi#recording_registrants_questions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Meeting Recording Settings
    # Retrieve settings applied to a meeting's [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).<br><br> **Scopes**: `recording:read:admin` `recording:read`<br>  <br>
    # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request.
    # @param [Hash] opts the optional parameters
    # @return [RecordingSettings]
    def recording_setting_update(meeting_id, opts = {})
      data, _status_code, _headers = recording_setting_update_with_http_info(meeting_id, opts)
      data
    end

    # Get Meeting Recording Settings
    # Retrieve settings applied to a meeting&#39;s [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).&lt;br&gt;&lt;br&gt; **Scopes**: &#x60;recording:read:admin&#x60; &#x60;recording:read&#x60;&lt;br&gt;  &lt;br&gt;
    # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RecordingSettings, Fixnum, Hash)>] RecordingSettings data, response status code and response headers
    def recording_setting_update_with_http_info(meeting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudRecordingApi.recording_setting_update ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling CloudRecordingApi.recording_setting_update"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/recordings/settings'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RecordingSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudRecordingApi#recording_setting_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Meeting Recording Settings
    # Update settings applied to a meeting's [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording)<br><br> **Scopes**: `recording:write:admin` `recording:write`<br>  <br>
    # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request.
    # @param body Meeting recording Settings
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def recording_settings_update(meeting_id, body, opts = {})
      recording_settings_update_with_http_info(meeting_id, body, opts)
      nil
    end

    # Update Meeting Recording Settings
    # Update settings applied to a meeting&#39;s [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording)&lt;br&gt;&lt;br&gt; **Scopes**: &#x60;recording:write:admin&#x60; &#x60;recording:write&#x60;&lt;br&gt;  &lt;br&gt;
    # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request.
    # @param body Meeting recording Settings
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def recording_settings_update_with_http_info(meeting_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudRecordingApi.recording_settings_update ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling CloudRecordingApi.recording_settings_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudRecordingApi.recording_settings_update"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/recordings/settings'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudRecordingApi#recording_settings_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Recover Meeting Recordings
    # Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover all deleted [Cloud Recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) of a specific meeting.<br><br> **Scopes**: `recording:write:admin` `recording:write`<br>  <br> **Prerequisites**:<br> * A Pro user with Cloud Recording enabled.
    # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def recording_status_update(meeting_id, body, opts = {})
      recording_status_update_with_http_info(meeting_id, body, opts)
      nil
    end

    # Recover Meeting Recordings
    # Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover all deleted [Cloud Recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) of a specific meeting.&lt;br&gt;&lt;br&gt; **Scopes**: &#x60;recording:write:admin&#x60; &#x60;recording:write&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites**:&lt;br&gt; * A Pro user with Cloud Recording enabled.
    # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def recording_status_update_with_http_info(meeting_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudRecordingApi.recording_status_update ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling CloudRecordingApi.recording_status_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudRecordingApi.recording_status_update"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/recordings/status'.sub('{' + 'meetingId' + '}', meeting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudRecordingApi#recording_status_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Recover a Single Recording
    # Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover a single recording file from the meeting.<br> **Scopes:** `recording:write:admin` `recording:write`<br>  <br>
    # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request.
    # @param recording_id The recording ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def recording_status_update_one(meeting_id, recording_id, body, opts = {})
      recording_status_update_one_with_http_info(meeting_id, recording_id, body, opts)
      nil
    end

    # Recover a Single Recording
    # Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover a single recording file from the meeting.&lt;br&gt; **Scopes:** &#x60;recording:write:admin&#x60; &#x60;recording:write&#x60;&lt;br&gt;  &lt;br&gt;
    # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request.
    # @param recording_id The recording ID.
    # @param body
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def recording_status_update_one_with_http_info(meeting_id, recording_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudRecordingApi.recording_status_update_one ...'
      end
      # verify the required parameter 'meeting_id' is set
      if @api_client.config.client_side_validation && meeting_id.nil?
        fail ArgumentError, "Missing the required parameter 'meeting_id' when calling CloudRecordingApi.recording_status_update_one"
      end
      # verify the required parameter 'recording_id' is set
      if @api_client.config.client_side_validation && recording_id.nil?
        fail ArgumentError, "Missing the required parameter 'recording_id' when calling CloudRecordingApi.recording_status_update_one"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudRecordingApi.recording_status_update_one"
      end
      # resource path
      local_var_path = '/meetings/{meetingId}/recordings/{recordingId}/status'.sub('{' + 'meetingId' + '}', meeting_id.to_s).sub('{' + 'recordingId' + '}', recording_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudRecordingApi#recording_status_update_one\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List All Recordings
    # When a user records a meeting by choosing the **Record to the Cloud** option, the video, audio, and chat text are recorded in the Zoom cloud.   Use this API to list all [Cloud recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) of a user.<br><br> **Scopes:** `recording:read:admin` `recording:read`<br>  <br> **Prerequisites:**  * Pro or a higher plan. * Cloud Recording must be enabled on the user's account.
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call. (default to 30)
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @option opts [String] :mc Query Metadata of Recording if an On-Premise Meeting Connector was used for the meeting. (default to false)
    # @option opts [BOOLEAN] :trash Query trash. &#x60;true&#x60;: List recordings from trash.&lt;br&gt; &#x60;false&#x60;: Do not list recordings from the trash.&lt;br&gt; The default value is &#x60;false&#x60;. If you set it to &#x60;true&#x60;, you can use the &#x60;trash_type&#x60; property to indicate the type of Cloud recording that you need to retrieve.  (default to false)
    # @option opts [Date] :from Start date in &#39;yyyy-mm-dd&#39; format. (Within 6 month range)
    # @option opts [Date] :to End date in &#39;yyyy-mm-dd&#39; format. (Within 6 month range)
    # @option opts [String] :trash_type The type of Cloud recording that you would like to retrieve from the trash. The value can be one of the following:&lt;br&gt;     &#x60;meeting_recordings&#x60;: List all meeting recordings from the trash.&lt;br&gt;     &#x60;recording_file&#x60;: List all individual recording files from the trash.  (default to meeting_recordings)
    # @return [RecordingList]
    def recordings_list(user_id, opts = {})
      data, _status_code, _headers = recordings_list_with_http_info(user_id, opts)
      data
    end

    # List All Recordings
    # When a user records a meeting by choosing the **Record to the Cloud** option, the video, audio, and chat text are recorded in the Zoom cloud.   Use this API to list all [Cloud recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) of a user.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;recording:read:admin&#x60; &#x60;recording:read&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:**  * Pro or a higher plan. * Cloud Recording must be enabled on the user&#39;s account.
    # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records returned within a single API call.
    # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # @option opts [String] :mc Query Metadata of Recording if an On-Premise Meeting Connector was used for the meeting.
    # @option opts [BOOLEAN] :trash Query trash. &#x60;true&#x60;: List recordings from trash.&lt;br&gt; &#x60;false&#x60;: Do not list recordings from the trash.&lt;br&gt; The default value is &#x60;false&#x60;. If you set it to &#x60;true&#x60;, you can use the &#x60;trash_type&#x60; property to indicate the type of Cloud recording that you need to retrieve.
    # @option opts [Date] :from Start date in &#39;yyyy-mm-dd&#39; format. (Within 6 month range)
    # @option opts [Date] :to End date in &#39;yyyy-mm-dd&#39; format. (Within 6 month range)
    # @option opts [String] :trash_type The type of Cloud recording that you would like to retrieve from the trash. The value can be one of the following:&lt;br&gt;     &#x60;meeting_recordings&#x60;: List all meeting recordings from the trash.&lt;br&gt;     &#x60;recording_file&#x60;: List all individual recording files from the trash.
    # @return [Array<(RecordingList, Fixnum, Hash)>] RecordingList data, response status code and response headers
    def recordings_list_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudRecordingApi.recordings_list ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling CloudRecordingApi.recordings_list"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 300
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling CloudRecordingApi.recordings_list, must be smaller than or equal to 300.'
      end

      # resource path
      local_var_path = '/users/{userId}/recordings'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page_token'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?
      query_params[:'mc'] = opts[:'mc'] if !opts[:'mc'].nil?
      query_params[:'trash'] = opts[:'trash'] if !opts[:'trash'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'trash_type'] = opts[:'trash_type'] if !opts[:'trash_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RecordingList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudRecordingApi#recordings_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
