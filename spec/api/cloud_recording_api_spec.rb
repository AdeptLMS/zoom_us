=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'spec_helper'
require 'json'

# Unit tests for ZoomUs::CloudRecordingApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'CloudRecordingApi' do
  before do
    # run before each test
    @instance = ZoomUs::CloudRecordingApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CloudRecordingApi' do
    it 'should create an instance of CloudRecordingApi' do
      expect(@instance).to be_instance_of(ZoomUs::CloudRecordingApi)
    end
  end

  # unit tests for get_account_cloud_recording
  # List Recordings of an Account
  # List [Cloud Recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) available on an Account.  **Prerequisites**:&lt;br&gt; * A Pro or a higher paid plan with Cloud Recording option enabled.&lt;br&gt; **Scopes**: &#x60;recording:read:admin&#x60; or &#x60;account:read:admin&#x60;  If the scope &#x60;recording:read:admin&#x60; is used, the Account ID of the Account must be provided in the &#x60;accountId&#x60; path parameter to list recordings that belong to the Account. This scope only works for Sub Accounts.   To list recordings of a Master Account, the scope must be &#x60;account:read:admin&#x60; and the value of &#x60;accountId&#x60; should be &#x60;me&#x60;.&lt;br&gt; &lt;br&gt; 
  # @param account_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of records returned within a single API call.
  # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
  # @option opts [DateTime] :from The start date for the monthly range for which you would like to retrieve recordings. The maximum range can be a month. The month should fall within the past six months period from the date of query.
  # @option opts [DateTime] :to The end date for the monthly range for which you would like to retrieve recordings. The maximum range can be a month. The month should fall within the past six months period from the date of query.
  # @return [InlineResponse20073]
  describe 'get_account_cloud_recording test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meeting_recording_registrant_create
  # Create a Recording Registrant
  # Cloud Recordings of past Zoom Meetings can be made [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings). Users should be [registered](https://marketplace.zoom.us/docs/api-reference/zoom-api/cloud-recording/meetingrecordingregistrantcreate) to view these recordings.  Use this API to register a user to gain access to **On-demand Cloud Recordings** of a past meeting.&lt;br&gt; **Scopes:** &#x60;recording:write:admin&#x60;, &#x60;recording:write&#x60;.&lt;br&gt;    
  # @param meeting_id The meeting ID.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20113]
  describe 'meeting_recording_registrant_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meeting_recording_registrant_status
  # Update Recording Registrant&#39;s Status
  # A registrant can either be approved or denied from viewing the [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) recording.  Use this API to update a registrant&#39;s status.  **Scopes:** &#x60;recording:write:admin&#x60;, &#x60;recording:write&#x60;&lt;br&gt;   
  # @param meeting_id The meeting ID.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'meeting_recording_registrant_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meeting_recording_registrants
  # List Recording Registrants
  # Cloud Recordings of past Zoom Meetings can be made [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings). Users should be [registered](https://marketplace.zoom.us/docs/api-reference/zoom-api/cloud-recording/meetingrecordingregistrantcreate) to view these recordings.  Use this API to list registrants of **On-demand Cloud Recordings** of a past meeting.&lt;br&gt; **Scopes:** &#x60;recording:read:admin&#x60;, &#x60;recording:read&#x60;.&lt;br&gt;   
  # @param meeting_id The meeting ID.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :status The registrant status:&lt;br&gt;&#x60;pending&#x60; - Registrant&#39;s status is pending.&lt;br&gt;&#x60;approved&#x60; - Registrant&#39;s status is approved.&lt;br&gt;&#x60;denied&#x60; - Registrant&#39;s status is denied.
  # @option opts [Integer] :page_size The number of records returned within a single API call.
  # @option opts [Integer] :page_number The current page number of returned records.
  # @return [RegistrationList1]
  describe 'meeting_recording_registrants test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for recording_delete
  # Delete Meeting Recordings
  # Delete all recording files of a meeting.&lt;br&gt;&lt;br&gt;  **Scopes:** &#x60;recording:write:admin&#x60; &#x60;recording:write&#x60;&lt;br&gt; &lt;br&gt; **Prerequisites**: * Cloud Recording should be enabled on the user&#39;s account.&lt;br&gt; 
  # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :action The recording delete actions:&lt;br&gt;&#x60;trash&#x60; - Move recording to trash.&lt;br&gt;&#x60;delete&#x60; - Delete recording permanently.
  # @return [nil]
  describe 'recording_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for recording_delete_one
  # Delete a Meeting Recording File
  # Delete a sprecific recording file from a meeting.&lt;br&gt;&lt;br&gt; **Scopes**: &#x60;recording:write:admin&#x60; &#x60;recording:write&#x60;&lt;br&gt;  &lt;br&gt;
  # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request. 
  # @param recording_id The recording ID.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :action The recording delete actions:&lt;br&gt;&#x60;trash&#x60; - Move recording to trash.&lt;br&gt;&#x60;delete&#x60; - Delete recording permanently.
  # @return [nil]
  describe 'recording_delete_one test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for recording_get
  # Get Meeting Recordings
  # Get all the [recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording#h_7420acb5-1897-4061-87b4-5b76e99c03b4) from a meeting.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;recording:read:admin&#x60; &#x60;recording:read&#x60;&lt;br&gt;    
  # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request. 
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'recording_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for recording_registrant_question_update
  # Update Registration Questions
  # For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.  Use this API to update registration questions that are to be answered by users while registering to view a recording.&lt;br&gt; **Scopes:** &#x60;recording:write:admin&#x60;, &#x60;recording:write&#x60;&lt;br&gt; &lt;br&gt; 
  # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request. 
  # @param body Recording Registrant Questions
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'recording_registrant_question_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for recording_registrants_questions_get
  # Get Registration Questions
  # For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.  Use this API to retrieve a list of questions that are displayed for users to complete when registering to view the recording of a specific meeting.&lt;br&gt; **Scopes:** &#x60;recording:read:admin&#x60;, &#x60;recording:read&#x60;&lt;br&gt;    
  # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request. 
  # @param [Hash] opts the optional parameters
  # @return [RecordingRegistrantQuestions]
  describe 'recording_registrants_questions_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for recording_setting_update
  # Get Meeting Recording Settings
  # Retrieve settings applied to a meeting&#39;s [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).&lt;br&gt;&lt;br&gt; **Scopes**: &#x60;recording:read:admin&#x60; &#x60;recording:read&#x60;&lt;br&gt;  &lt;br&gt;
  # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request. 
  # @param [Hash] opts the optional parameters
  # @return [RecordingSettings]
  describe 'recording_setting_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for recording_settings_update
  # Update Meeting Recording Settings
  # Update settings applied to a meeting&#39;s [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording)&lt;br&gt;&lt;br&gt; **Scopes**: &#x60;recording:write:admin&#x60; &#x60;recording:write&#x60;&lt;br&gt;  &lt;br&gt;
  # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request. 
  # @param body Meeting recording Settings
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'recording_settings_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for recording_status_update
  # Recover Meeting Recordings
  # Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover all deleted [Cloud Recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) of a specific meeting.&lt;br&gt;&lt;br&gt; **Scopes**: &#x60;recording:write:admin&#x60; &#x60;recording:write&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites**:&lt;br&gt; * A Pro user with Cloud Recording enabled.
  # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request. 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'recording_status_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for recording_status_update_one
  # Recover a Single Recording
  # Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover a single recording file from the meeting.&lt;br&gt; **Scopes:** &#x60;recording:write:admin&#x60; &#x60;recording:write&#x60;&lt;br&gt;  &lt;br&gt; 
  # @param meeting_id The meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. If a UUID starts with \&quot;/\&quot; or contains \&quot;//\&quot; (example: \&quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;\&quot;), you must **double encode** the UUID before making an API request. 
  # @param recording_id The recording ID.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'recording_status_update_one test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for recordings_list
  # List All Recordings
  # When a user records a meeting by choosing the **Record to the Cloud** option, the video, audio, and chat text are recorded in the Zoom cloud.   Use this API to list all [Cloud recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) of a user.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;recording:read:admin&#x60; &#x60;recording:read&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:**  * Pro or a higher plan. * Cloud Recording must be enabled on the user&#39;s account.
  # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of records returned within a single API call.
  # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
  # @option opts [String] :mc Query Metadata of Recording if an On-Premise Meeting Connector was used for the meeting.
  # @option opts [BOOLEAN] :trash Query trash. &#x60;true&#x60;: List recordings from trash.&lt;br&gt; &#x60;false&#x60;: Do not list recordings from the trash.&lt;br&gt; The default value is &#x60;false&#x60;. If you set it to &#x60;true&#x60;, you can use the &#x60;trash_type&#x60; property to indicate the type of Cloud recording that you need to retrieve. 
  # @option opts [Date] :from Start date in &#39;yyyy-mm-dd&#39; format. (Within 6 month range)
  # @option opts [Date] :to End date in &#39;yyyy-mm-dd&#39; format. (Within 6 month range)
  # @option opts [String] :trash_type The type of Cloud recording that you would like to retrieve from the trash. The value can be one of the following:&lt;br&gt;     &#x60;meeting_recordings&#x60;: List all meeting recordings from the trash.&lt;br&gt;     &#x60;recording_file&#x60;: List all individual recording files from the trash. 
  # @return [RecordingList]
  describe 'recordings_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
