=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'spec_helper'
require 'json'

# Unit tests for ZoomUs::MeetingsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'MeetingsApi' do
  before do
    # run before each test
    @instance = ZoomUs::MeetingsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of MeetingsApi' do
    it 'should create an instance of MeetingsApi' do
      expect(@instance).to be_instance_of(ZoomUs::MeetingsApi)
    end
  end

  # unit tests for list_past_meeting_files
  # List Past Meeting Files
  # List files sent via in-meeting chat during a meeting. The in-meeting files are deleted after 24 hours of the meeting completion time.  &lt;br&gt;&lt;br&gt; **Scope:** &#x60;meeting:read&#x60;, &#x60;meeting:read:admin&#x60;&lt;br&gt;  
  # @param meeting_id The meeting ID.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20084]
  describe 'list_past_meeting_files test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_past_meeting_polls
  # List Past Meeting&#39;s Poll Results
  # [Polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) allow the meeting host to survey attendees. Use this API to list poll results of a meeting.&lt;br&gt;&lt;br&gt;  **Scopes**: &#x60;meeting:read:admin&#x60;, &#x60;meeting:read&#x60;&lt;br&gt;  **Prerequisites**:&lt;br&gt; * Host user type must be **Pro**. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
  # @param meeting_id The meeting ID or meeting UUID. If   meeting ID is provided, it will take the last meeting instance.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20083]
  describe 'list_past_meeting_polls test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meeting
  # Get a Meeting
  # Retrieve the details of a meeting.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:read:admin&#x60; &#x60;meeting:read&#x60;&lt;br&gt;    
  # @param meeting_id The meeting ID.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :occurrence_id Meeting occurrence id
  # @return [InlineResponse20022]
  describe 'meeting test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meeting_create
  # Create a Meeting
  # Create a meeting for a user. &lt;br&gt;This API has a daily rate limit of 100 requests per day. Therefore, only 100 **Create a Meeting** API requests are permitted within a 24 hour window for a user.&lt;br&gt;  &lt;aside&gt;The &lt;code&gt;start_url&lt;/code&gt; of a meeting is a URL using which a host or an alternative host can start a meeting. The expiration time for the &lt;code&gt;start_url&lt;/code&gt; field is two hours for all regular users.    For users created using the &lt;code&gt;custCreate&lt;/code&gt; option via the [Create Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usercreate) API, the expiration time of the &lt;code&gt;start_url&lt;/code&gt; field is 90 days.   For security reasons, the recommended way to retrieve the updated value for the &lt;code&gt;start_url&lt;/code&gt; field programmatically (after expiry) is by calling the [Retrieve a Meeting API](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meeting) and referring to the value of the &lt;code&gt;start_url&lt;/code&gt; field in the response.&lt;/aside&gt;&lt;br&gt;&lt;br&gt; Scopes: &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;
  # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
  # @param body Meeting object.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20110]
  describe 'meeting_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meeting_delete
  # Delete a Meeting
  # Delete a meeting.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;&lt;br&gt;    
  # @param meeting_id The meeting ID.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :occurrence_id The meeting occurrence ID.
  # @option opts [BOOLEAN] :schedule_for_reminder &#x60;true&#x60;: Notify host and alternative host about the meeting cancellation via email. &#x60;false&#x60;: Do not send any email notification.
  # @return [nil]
  describe 'meeting_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meeting_invitation
  # Get Meeting Invitation
  # Retrieve the meeting invite note that was sent for a specific meeting.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:read:admin&#x60; &#x60;meeting:read&#x60;&lt;br&gt;    
  # @param meeting_id The meeting ID.
  # @param [Hash] opts the optional parameters
  # @return [MeetingInvitation]
  describe 'meeting_invitation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meeting_live_stream_status_update
  # Update Live Stream Status
  # Zoom allows users to [live stream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to update the status of a meeting&#39;s live stream.&lt;br&gt;&lt;br&gt; **Prerequisites:**&lt;br&gt; * Meeting host must have a Pro license.&lt;br&gt; **Scopes:** &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;&lt;br&gt;    
  # @param meeting_id The meeting ID.
  # @param body Meeting
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'meeting_live_stream_status_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meeting_live_stream_update
  # Update Live Stream
  # Zoom allows users to [live stream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to update a meeting&#39;s live stream information.&lt;br&gt;&lt;br&gt; **Prerequisites:**&lt;br&gt; * Meeting host must have a Pro license.&lt;br&gt; **Scopes:** &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;&lt;br&gt;    
  # @param meeting_id The meeting ID.
  # @param body Meeting
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'meeting_live_stream_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meeting_poll_create
  # Create a Meeting Poll
  # Polls allow the meeting host to survey attendees. Use this API to create a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.&lt;br&gt;&lt;br&gt;  **Scopes**: &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;&lt;br&gt;    **Prerequisites**:&lt;br&gt; * Host user type must be **Pro**. * Polling feature should be enabled in the host&#39;s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
  # @param meeting_id The meeting ID.
  # @param body Meeting poll object
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20112]
  describe 'meeting_poll_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meeting_poll_delete
  # Delete a Meeting Poll
  # Polls allow the meeting host to survey attendees. Use this API to delete a meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).&lt;br&gt; **Scopes**: &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;&lt;br&gt;   **Prerequisites**:&lt;br&gt; * Host user type must be **Pro**. * Polling feature should be enabled in the host&#39;s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
  # @param meeting_id The meeting ID.
  # @param poll_id The poll ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'meeting_poll_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meeting_poll_get
  # Get a Meeting Poll
  # Polls allow the meeting host to survey attendees. Use this API to get information about a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).&lt;br&gt;&lt;br&gt; **Scopes**: &#x60;meeting:read:admin&#x60; &#x60;meeting:read&#x60;&lt;br&gt;     
  # @param meeting_id The meeting ID.
  # @param poll_id The poll ID
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20112]
  describe 'meeting_poll_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meeting_poll_update
  # Update a Meeting Poll
  # Polls allow the meeting host to survey attendees. Use this API to update information of a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings)&lt;br&gt;&lt;br&gt; **Scopes**: &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;    
  # @param meeting_id The meeting ID.
  # @param poll_id The poll ID
  # @param body Meeting Poll
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'meeting_poll_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meeting_polls
  # List Meeting Polls
  # Polls allow the meeting host to survey attendees. Use this API to list [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) of a meeting.&lt;br&gt;&lt;br&gt;  **Scopes**: &#x60;meeting:read:admin&#x60; &#x60;meeting:read&#x60;&lt;br&gt;   **Prerequisites**:&lt;br&gt; * Host user type must be **Pro**. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
  # @param meeting_id The meeting ID.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'meeting_polls test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meeting_registrant_create
  # Add Meeting Registrant
  # Register a participant for a meeting.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;
  # @param meeting_id The meeting ID.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :occurrence_ids Occurrence IDs. You can find these with the meeting get API. Multiple values separated by comma.
  # @return [InlineResponse20111]
  describe 'meeting_registrant_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meeting_registrant_question_update
  # Update Registration Questions
  # Update registration questions that will be displayed to users while [registering for a meeeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:write&#x60;, &#x60;meeting:write:admin&#x60;&lt;br&gt;    
  # @param meeting_id The meeting ID.
  # @param body Meeting Registrant Questions
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'meeting_registrant_question_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meeting_registrant_status
  # Update Meeting Registrant Status
  # Update a meeting registrant&#39;s status by either approving, cancelling or denying a registrant from joining the meeting.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;
  # @param meeting_id The meeting ID.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :occurrence_id The meeting occurrence ID.
  # @return [nil]
  describe 'meeting_registrant_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meeting_registrants
  # List Meeting Registrants
  # A host or a user with admin permission can require [registration for a Zoom meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings). Use this API to list users that have registered for a meeting.&lt;br&gt;&lt;br&gt; **Scopes**: &#x60;meeting:read:admin&#x60; &#x60;meeting:read&#x60;&lt;br&gt; 
  # @param meeting_id The meeting ID.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :occurrence_id The meeting occurrence ID.
  # @option opts [String] :status The registrant status:&lt;br&gt;&#x60;pending&#x60; - Registrant&#39;s status is pending.&lt;br&gt;&#x60;approved&#x60; - Registrant&#39;s status is approved.&lt;br&gt;&#x60;denied&#x60; - Registrant&#39;s status is denied.
  # @option opts [Integer] :page_size The number of records returned within a single API call.
  # @option opts [Integer] :page_number The current page number of returned records.
  # @return [RegistrationList]
  describe 'meeting_registrants test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meeting_registrants_questions_get
  # List Registration Questions 
  # List registration questions that will be displayed to users while [registering for a meeeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).&lt;br&gt;  **Scopes:** &#x60;meeting:read&#x60;, &#x60;meeting:read:admin&#x60;&lt;br&gt;    
  # @param meeting_id The meeting ID.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20025]
  describe 'meeting_registrants_questions_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meeting_status
  # Update Meeting Status
  # End a meeting by updating its status.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;
  # @param meeting_id The meeting ID.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'meeting_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meeting_update
  # Update a Meeting
  # Update the details of a meeting.&lt;br&gt;This API has a rate limit of 100 requests per day. Therefore, a meeting can only be updated for a maximum of 100 times within a 24 hour window.&lt;br&gt; **Scopes:** &#x60;meeting:write:admin&#x60; &#x60;meeting:write&#x60;&lt;br&gt;    
  # @param meeting_id The meeting ID.
  # @param body Meeting
  # @param [Hash] opts the optional parameters
  # @option opts [String] :occurrence_id Meeting occurrence id. Support change of agenda, start_time, duration, settings: {host_video, participant_video, join_before_host, mute_upon_entry, waiting_room, watermark, auto_recording}
  # @return [nil]
  describe 'meeting_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meetings
  # List Meetings
  # List all the meetings that were scheduled for a user (meeting host).&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:read:admin&#x60; &#x60;meeting:read&#x60;&lt;br&gt;  
  # @param user_id The user ID or email address of the user. For user-level apps, pass &#x60;me&#x60; as the value for userId.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type The meeting types: &lt;br&gt;&#x60;scheduled&#x60; - All the scheduled meetings.&lt;br&gt;&#x60;live&#x60; - All the live meetings.&lt;br&gt;&#x60;upcoming&#x60; - All the upcoming meetings.
  # @option opts [Integer] :page_size The number of records returned within a single API call.
  # @option opts [Integer] :page_number The current page number of returned records.
  # @return [GroupList]
  describe 'meetings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for past_meeting_details
  # Get Past Meeting Details
  # Get details on a past meeting. &lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:read:admin&#x60; &#x60;meeting:read&#x60;  &gt; **Note**: Please double encode your UUID when using this API if the UUID begins with a &#39;/&#39;or contains &#39;//&#39; in it.
  # @param meeting_uuid The meeting UUID. Please double encode your UUID when using it for other API calls if the UUID begins with a &#39;/&#39;or contains &#39;//&#39; in it.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20023]
  describe 'past_meeting_details test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for past_meeting_participants
  # Get Past Meeting Participants
  # Retrieve information on participants from a past meeting. &lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:read:admin&#x60; &#x60;meeting:read&#x60;  **Prerequisites:**&lt;br&gt; * Paid account on a Pro or higher plan.  &lt;br&gt; &lt;br&gt;  **Note**: Please double encode your UUID when using this API if the UUID begins with a &#39;/&#39;or contains &#39;//&#39; in it. 
  # @param meeting_uuid The meeting UUID. Please double encode your UUID when using it for other API calls if the UUID begins with a &#39;/&#39;or contains &#39;//&#39; in it.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of records returned within a single API call.
  # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
  # @return [InlineResponse20024]
  describe 'past_meeting_participants test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for past_meetings
  # List Ended Meeting Instances
  # Get a list of ended meeting instances&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;meeting:read:admin&#x60; &#x60;meeting:read&#x60;&lt;br&gt;  
  # @param meeting_id The meeting ID.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'past_meetings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
