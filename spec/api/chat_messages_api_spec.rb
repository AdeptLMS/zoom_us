=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'spec_helper'
require 'json'

# Unit tests for ZoomUs::ChatMessagesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ChatMessagesApi' do
  before do
    # run before each test
    @instance = ZoomUs::ChatMessagesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ChatMessagesApi' do
    it 'should create an instance of ChatMessagesApi' do
      expect(@instance).to be_instance_of(ZoomUs::ChatMessagesApi)
    end
  end

  # unit tests for delete_chat_message
  # Delete a Message
  # Delete a chat message that you previously sent to a contact or a channel. In the query parameter, you must provide either of the following:&lt;br&gt; * &#x60;to_contact&#x60;: The email address of the contact to whom you sent the message. Use this parameter to delete a message sent to an individual contact in Zoom. * &#x60;to_channel&#x60;: The channel ID of the channel where you sent the message. Use this parameter to delete a message sent to a channel in Zoom.  &lt;p style&#x3D;\&quot;background-color:#e1f5fe;color:#01579b;padding:8px\&quot;&gt; &lt;b&gt;Note: &lt;/b&gt;This API only supports &lt;b&gt;user-managed&lt;/b&gt; &lt;a href&#x3D;\&quot;https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\&quot;&gt;OAuth app&lt;/a&gt;.&lt;/p&gt;&lt;br&gt;  **Scope:** &#x60;chat_message:write&#x60;&lt;br&gt;   
  # @param message_id Message ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :to_contact The userId or email address of a chat contact to whom you previously sent the message.  Note: You must provide either &#x60;to_contact&#x60; or &#x60;to_channel&#x60; as a query parameter to delete a message that was previously sent to either an individual or a chat channel respectively. 
  # @option opts [String] :to_channel The channel Id of the channel where you would like to send the message.  You must provide either &#x60;to_contact&#x60; or &#x60;to_channel&#x60; as a query parameter to delete a message that was previously sent to either an individual or a chat channel 
  # @return [Object]
  describe 'delete_chat_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_message
  # Update a Message
  # Each chat message has a unique identifier. Use this API to edit a chat message that you previously sent to either a contact or a channel in Zoom by providing the ID of the message as the value of the &#x60;messageId&#x60; parameter. The ID can be retrieved from List User&#39;s Chat Messages API. Additionally, as a query parameter, you must provide either the **email address** of the contact or the **Channel ID** of the channel where the message was sent.   &lt;p style&#x3D;\&quot;background-color:#e1f5fe; color:#01579b; padding:8px\&quot;&gt; &lt;b&gt;Note: &lt;/b&gt; This API only supports &lt;b&gt;user-managed&lt;/b&gt; &lt;a href&#x3D;\&quot;https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\&quot;&gt;OAuth app&lt;/a&gt;.&lt;/p&gt;&lt;br&gt;  **Scope:** &#x60;chat_message:write&#x60; &lt;br&gt;      
  # @param message_id Message ID: Unique Identifier of the message.
  # @param [Hash] opts the optional parameters
  # @option opts [Body6] :body 
  # @return [nil]
  describe 'edit_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_chat_messages
  # List User&#39;s Chat Messages
  # A Zoom user can have conversations with other Zoom users via chat. Use this API to list the current user&#39;s chat messages between the user and an individual contact or a chat channel.&lt;br&gt; In the query parameter, you must provide either of the following:&lt;br&gt; * &#x60;to_contact&#x60;: The email address of the contact with whom the user conversed by sending/receiving messages. * &#x60;to_channel&#x60;: The channel ID of the channel to/from which the user has sent and/or received messages. &lt;br&gt; **Specify a date** in the &#x60;date&#x60; query parameter to view messages from that date. If a date is not provided, the default value for the query will be the **current date**.&lt;br&gt; &lt;p style&#x3D;\&quot;background-color:#e1f5fe; color:#01579b; padding:8px\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;This API only supports &lt;b&gt;user-managed&lt;/b&gt; &lt;a href&#x3D;\&quot;https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\&quot;&gt;OAuth app&lt;/a&gt;.&lt;/p&gt;&lt;br&gt;  &lt;br&gt;**Scopes:** &#x60;chat_message:read&#x60;&lt;br&gt;    
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :to_contact The email address of a chat contact with whom the current user chatted. Messages that were sent and/or received between the user and the contact is displayed.  Note: You must provide either &#x60;contact&#x60; or &#x60;channel&#x60; as a query parameter to retrieve messages either from an individual or a chat channel. 
  # @option opts [String] :to_channel The channel Id of a channel inside which current user had chat converstations. Messages that were sent and/or received between the user and the channel is displayed.  Note: You must provide either &#x60;contact&#x60; or &#x60;channel&#x60; as a query parameter to retrieve messages either from an individual or a chat channel. 
  # @option opts [Date] :date_ The query date for which you would like to get the chat messages.
  # @option opts [Integer] :page_size The number of records returned with a single API call. 
  # @option opts [String] :next_page_token The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
  # @return [InlineResponse2006]
  describe 'get_chat_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for senda_chat_message
  # Send a Chat Message
  # Send chat messages on Zoom to either an individual user who is in your contact list or to a [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) of which you are a member. To send a message to a contact, provide the contact&#39;s email address in the &#x60;to_contact&#x60; field. Similary, to send a message to a channel, provide the Channel Id of the Channel in &#x60;to_channel&#x60; field.&lt;br&gt;  &lt;br&gt;**Scopes:** &#x60;chat_message:write&#x60;&lt;br&gt;   &lt;br&gt;  &lt;p style&#x3D;\&quot;background-color:#e1f5fe; color:#01579b; padding:8px\&quot;&gt; &lt;b&gt;Note: &lt;/b&gt;This API only supports &lt;b&gt;user-managed&lt;/b&gt;  &lt;a href&#x3D;\&quot;https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\&quot;&gt;OAuth app&lt;/a&gt;.&lt;/p&gt;&lt;br&gt; 
  # @param [Hash] opts the optional parameters
  # @option opts [Body5] :body 
  # @return [InlineResponse2011]
  describe 'senda_chat_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
