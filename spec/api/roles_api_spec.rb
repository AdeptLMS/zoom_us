=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'spec_helper'
require 'json'

# Unit tests for ZoomUs::RolesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'RolesApi' do
  before do
    # run before each test
    @instance = ZoomUs::RolesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of RolesApi' do
    it 'should create an instance of RolesApi' do
      expect(@instance).to be_instance_of(ZoomUs::RolesApi)
    end
  end

  # unit tests for add_role_members
  # Assign a Role to Members
  # User [roles](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) can have a set of permissions that allows access only to the pages a user needs to view or edit. Use this API to [assign a role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control#h_748b6fd8-5057-4cf4-bbfd-787909c09db0) to members.  **Scopes:** &#x60;role:write:admin&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:**&lt;br&gt; * A Pro or a higher plan.
  # @param role_id The role ID
  # @param body Role members
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20115]
  describe 'add_role_members test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_role
  # Create a Role
  # Each Zoom user automatically has a role which can either be owner, administrator, or a member.   **Pre-requisite:**&lt;br&gt; * Pro or higher plan. * For setting the initial role, you must be the Account Owner.&lt;br&gt; * For subsequent role management, you must be the Account Owner or user with role management permissions.&lt;br&gt; **Scopes:** &#x60;role:write:admin&#x60;&lt;br&gt;  
  # @param [Hash] opts the optional parameters
  # @option opts [Body28] :body 
  # @return [Object]
  describe 'create_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_role
  # Delete a Role
  # Each Zoom user automatically has a role which can either be owner, administrator, or a member. Account Owners and users with edit privileges for Role management can add customized roles with a list.  Use this API to delete a role.&lt;br&gt; **Pre-requisite:**&lt;br&gt; * A Pro or higher plan.&lt;br&gt; * For role management and updates, you must be the Account Owner or user with role management permissions.  **Scopes:** &#x60;role:write:admin&#x60;&lt;br&gt;  
  # @param role_id Role Id.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_role_information
  # Get Role Information
  # Each Zoom user automatically has a role which can either be owner, administrator, or a member. Account Owners and users with edit privileges for Role management can add customized roles with a list of privileges.  Use this API to get information including specific privileges assigned to a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control).&lt;br&gt; **Pre-requisite:**&lt;br&gt; * A Pro or higher plan.&lt;br&gt; * For role management and updates, you must be the Account Owner or user with role management permissions.  **Scopes:** &#x60;role:read:admin&#x60;&lt;br&gt;  
  # @param role_id Role Id. 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20071]
  describe 'get_role_information test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for role_member_delete
  # Unassign a Member&#39;s Role
  # User [roles](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) can have a set of permissions that allows access only to the pages a user needs to view or edit. Use this API to unassign a user&#39;s role.  **Scope:** &#x60;role:write:admin&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites:**&lt;br&gt; * A Pro or a higher plan.
  # @param role_id The role ID
  # @param member_id Member&#39;s ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'role_member_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for role_members
  # List Members in a Role
  # User [roles](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) can have a set of permissions that allows access only to the pages a user needs to view or edit. Use this API to list all the members that are assigned a specific role.  **Scope:** &#x60;role:read:admin&#x60;&lt;br&gt;  &lt;br&gt;**Prerequisites:**&lt;br&gt; * A Pro or a higher plan.
  # @param role_id The role ID
  # @param [Hash] opts the optional parameters
  # @return [RoleMembersList]
  describe 'role_members test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for roles
  # List Roles
  # List [roles](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) on your account  **Scopes:** &#x60;role:read:admin&#x60;&lt;br&gt;  &lt;br&gt; **Prerequisites** : *  Pro or higher plan.  *  For setting the initial role, you must be the Account Owner.  *  For subsequent role management, you must be the Account Owner or user with role management permissions.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'roles test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_role
  # Update Role Information
  # Each Zoom user automatically has a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) which can either be owner, administrator, or a member. Account Owners and users with edit privileges for Role management can add customized roles with a list.  Use this API to change the privileges, name and description of a specific role.&lt;br&gt; **Pre-requisite:**&lt;br&gt; * A Pro or higher plan.&lt;br&gt; * For role management and updates, you must be the Account Owner or user with role management permissions.&lt;br&gt;**Scopes:** &#x60;role:write:admin&#x60;&lt;br&gt;  
  # @param role_id Role Id
  # @param [Hash] opts the optional parameters
  # @option opts [Body52] :body 
  # @return [Object]
  describe 'update_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
