=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'spec_helper'
require 'json'

# Unit tests for ZoomUs::BillingApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'BillingApi' do
  before do
    # run before each test
    @instance = ZoomUs::BillingApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BillingApi' do
    it 'should create an instance of BillingApi' do
      expect(@instance).to be_instance_of(ZoomUs::BillingApi)
    end
  end

  # unit tests for account_billing
  # Get Billing Information
  # Get [billing information](https://support.zoom.us/hc/en-us/articles/201363263-About-Billing) of a Sub Account under a Master Account.&lt;br&gt;&lt;br&gt;  **Prerequisites:** * Pro or a higher paid account with Master Account option enabled. &lt;br&gt; **Scope**:&#x60;billing:master&#x60;&lt;br&gt;  
  # @param account_id The account ID.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20014]
  describe 'account_billing test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_billing_update
  # Update Billing Information
  # Update [billing information](https://support.zoom.us/hc/en-us/articles/201363263-About-Billing) for a Sub Account under a Master account. &lt;aside&gt;This is only for a paid sub account that is paid by a master account.&lt;/aside&gt;&lt;br&gt;&lt;br&gt;  **Prerequisites:** * Pro or a higher paid account with Master Account option enabled. &lt;br&gt; **Scope**:&#x60;billing:master&#x60;&lt;br&gt;  
  # @param account_id The account ID.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'account_billing_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_plan_addon_cancel
  # Cancel  Additional Plans
  # [Cancel additional plan](https://support.zoom.us/hc/en-us/articles/203634215-How-Do-I-Cancel-My-Subscription-) for a sub account. Only a Master account holder who pays for this sub account can cancel the add-on. The cancellation does not provide refund for the current subscription. The service remains active for the current session.  **Prerequisites:**&lt;br&gt; * Pro or a higher plan with Master Account option enabled. * The Sub Account must be a paid account.&lt;br&gt; **Scope:** &#x60;billing:master&#x60;&lt;br&gt;  
  # @param account_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Body49] :body 
  # @return [nil]
  describe 'account_plan_addon_cancel test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_plan_addon_create
  # Add an Additional Plan
  # Add an additional plan for a sub account. &lt;br&gt; &lt;br&gt;**Prerequisites:**&lt;br&gt; * Pro or a higher plan with Master Account enabled. * The Sub Account must be a paid account. The billing charges for the Sub Account must be paid by the Master Account.&lt;br&gt; **Scopes**: &#x60;billing:master&#x60;&lt;br&gt;  
  # @param account_id The account ID.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'account_plan_addon_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_plan_addon_update
  # Update an Additional Plan
  # Update an additional plan for a sub account.&lt;br&gt; &lt;br&gt;**Prerequisites:**&lt;br&gt; * Pro or a higher plan with Master Account enabled. * The Sub Account must be a paid account. The billing charges for the Sub Account must be paid by the Master Account.&lt;br&gt; **Scopes**: &#x60;billing:master&#x60;&lt;br&gt;  
  # @param account_id The account ID.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'account_plan_addon_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_plan_base_delete
  # Cancel Base Plan
  # [Cancel a base plan](https://support.zoom.us/hc/en-us/articles/203634215-How-Do-I-Cancel-My-Subscription-) for a sub account. Only a master account holder who pays for this sub account can cancel the plan. The cancellation does not provide refund for the current subscription.  The service remains active for the current session.  **Scopes**: &#x60;billing:master&#x60;&lt;br&gt;  
  # @param account_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Body48] :body 
  # @return [nil]
  describe 'account_plan_base_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_plan_base_update
  # Update a Base Plan
  # Update a base plan of a Sub Account. &lt;aside&gt; This can only update a base plan for a paid Sub Account that is paid by a Master Account.&lt;/aside&gt;&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;billing:master&#x60;&lt;br&gt;  
  # @param account_id The account ID.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'account_plan_base_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_plan_create
  # Subscribe to Plans
  # Subscribe plans for a Sub Account under a Master Account. &lt;aside&gt; The plans can only be subscribed for an existing free Sub Account and the subscriptions charge should be paid by a Master Account.&lt;/aside&gt;&lt;br&gt;&lt;br&gt; **Scopes**: &#x60;billing:master&#x60;&lt;br&gt;  
  # @param account_id The account ID.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'account_plan_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_plans
  # Get Plan Information
  # Get plan information for a Sub Account under the Master account.  &lt;aside&gt; This is only for a Sub Account that is paid by a Master Account.&lt;/aside&gt;&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;billing:master&#x60;&lt;br&gt;  
  # @param account_id The account ID.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20015]
  describe 'account_plans test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_plan_usage
  # Get Plan Usage
  # Get information on usage of [plans](https://marketplace.zoom.us/docs/api-reference/other-references/plans) on a Master Account.  **Prerequisite**:&lt;br&gt; Account type: Master Account on a paid Pro, Business or Enterprise plan.&lt;br&gt; **Scope:** &#x60;billing:master&#x60;&lt;br&gt;  
  # @param account_id 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20072]
  describe 'get_plan_usage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
