=begin
#Zoom API

#The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.

OpenAPI spec version: 2.0.0
Contact: developersupport@zoom.us
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'spec_helper'
require 'json'

# Unit tests for ZoomUs::ChatbotMessagesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ChatbotMessagesApi' do
  before do
    # run before each test
    @instance = ZoomUs::ChatbotMessagesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ChatbotMessagesApi' do
    it 'should create an instance of ChatbotMessagesApi' do
      expect(@instance).to be_instance_of(ZoomUs::ChatbotMessagesApi)
    end
  end

  # unit tests for delete_a_chatbot_message
  # Delete a Chatbot Message
  # Delete a message that was sent by your chatbot app.   **Scopes:** &#x60;imchat:bot&#x60;&lt;br&gt;  **Authorization Flow**: Client Credentials Flow&lt;br&gt;&lt;br&gt; To get authorized, make a POST request to &#x60;/oauth/token&#x60; endpoint with grant type as &#x60;client_credentials&#x60;. &lt;br&gt;Use &#x60;https://api.zoom.us/oauth/token?grant_type&#x3D;client_credentials&#x60; as the endpoint for the request.  You will need to send your ClientID and Secret as a Basic base64 encoded AUthorization header. Ex. &#x60;Basic base64Encode({client_id}:{client_sceret})&#x60;&lt;br&gt;&lt;br&gt; Next, use the token received (access_token) as a bearer token while making the DELETE /im/chat/messages/{message_id} request to delete a message.&lt;br&gt;&lt;br&gt; Learn more about how to authotize chatbots in the [Chatbot Authorization](https://marketplace.zoom.us/docs/guides/chatbots/authorization) guide.
  # @param message_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Body41] :body 
  # @return [InlineResponse20058]
  describe 'delete_a_chatbot_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_chatbot_message
  # Edit a Chatbot Message
  # Edit a message that was [sent](https://marketplace.zoom.us/docs/api-reference/zoom-api/im-chat/sendchatbot) by your Chatbot app.&lt;br&gt; After sending a message using the Send Chatbot Message API, you must store the messageId returned in the response so that you can make edits to the associated message using this API.  **Scope:** &#x60;imchat:bot&#x60;&lt;br&gt;&lt;br&gt; **Authorization Flow**: Client Credentials Flow&lt;br&gt;&lt;br&gt; To get authorized, make a POST request to &#x60;/oauth/token&#x60; endpoint with grant type as &#x60;client_credentials&#x60;. &lt;br&gt;Use &#x60;https://api.zoom.us/oauth/token?grant_type&#x3D;client_credentials&#x60; as the endpoint for the request.  You will need to send your ClientID and Secret as a Basic base64 encoded AUthorization header. Ex. &#x60;Basic base64Encode({client_id}:{client_sceret})&#x60;&lt;br&gt;&lt;br&gt; Next, use the token received (access_token) as a bearer token while making the PUT /im/chat/messages/{message_id} request to edit a chatbot message.&lt;br&gt;&lt;br&gt; Learn more about how to authotize chatbots in the [Chatbot Authorization](https://marketplace.zoom.us/docs/guides/chatbots/authorization) guide.
  # @param message_id Unique Identifier of the message that needs to be updated. This should be retrieved from the response of [Send Chatbot Message API](https://marketplace.zoom.us/docs/api-reference/zoom-api/im-chat/sendchatbot).
  # @param [Hash] opts the optional parameters
  # @option opts [Body40] :body 
  # @return [InlineResponse20057]
  describe 'edit_chatbot_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sendchatbot
  # Send Chatbot Messages
  # Send chatbot messages from your marketplace chatbot app.&lt;br&gt;&lt;br&gt; **Scopes:** &#x60;imchat:bot&#x60;&lt;br&gt; **Authorization Flow**: Client Credentials Flow&lt;br&gt;&lt;br&gt; To get authorized, make a POST request to &#x60;/oauth/token&#x60; endpoint with grant type as &#x60;client_credentials&#x60;. &lt;br&gt;Use &#x60;https://api.zoom.us/oauth/token?grant_type&#x3D;client_credentials&#x60; as the endpoint for the request.  You will need to send your ClientID and Secret as a Basic base64 encoded AUthorization header. Ex. &#x60;Basic base64Encode({client_id}:{client_sceret})&#x60;&lt;br&gt;&lt;br&gt; Next, use the token recieved (access_token) as a bearer token while making the POST /im/chat/messages request to send chatbot messages.&lt;br&gt;&lt;br&gt; Learn more about how to authorize chatbots in the [Chatbot Authorization](https://marketplace.zoom.us/docs/guides/chatbots/authorization) guide.
  # @param [Hash] opts the optional parameters
  # @option opts [Body39] :body 
  # @return [nil]
  describe 'sendchatbot test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
